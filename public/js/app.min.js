function Interceptor(e) {
    return e.interceptors.push("AuthInterceptor");
}

function Router(e, t, n) {
    n.html5Mode(!0), e.state("homepage", {
        url: "/",
        templateUrl: "/js/views/homepage.html"
    }).state("register", {
        url: "/register",
        templateUrl: "/js/views/authentications/register.html",
        controller: "RegisterCtrl",
        controllerAs: "register"
    }).state("login", {
        url: "/login",
        templateUrl: "/js/views/authentications/login.html",
        controller: "LoginCtrl",
        controllerAs: "login"
    }).state("buildingsIndex", {
        url: "/buildings",
        templateUrl: "/js/views/buildings/index.html",
        controller: "BuildingsIndexCtrl",
        controllerAs: "vm"
    }).state("buildingsNew", {
        url: "/buildings/new",
        templateUrl: "/js/views/buildings/new.html",
        controller: "BuildingsNewCtrl",
        controllerAs: "vm"
    }).state("buildingsShow", {
        url: "/buildings/:id",
        templateUrl: "/js/views/buildings/show.html",
        controller: "BuildingsShowCtrl",
        controllerAs: "vm"
    }).state("buildingsEdit", {
        url: "/buildings/:id/edit",
        templateUrl: "/js/views/buildings/edit.html",
        controller: "BuildingsEditCtrl",
        controllerAs: "vm"
    }).state("usersEdit", {
        url: "/users/:id/edit",
        templateUrl: "/js/views/users/edit.html",
        controller: "UsersEditCtrl",
        controllerAs: "vm"
    }).state("usersShow", {
        url: "/users/:id",
        templateUrl: "/js/views/users/show.html",
        controller: "UsersShowCtrl",
        controllerAs: "vm"
    }).state("periodsIndex", {
        url: "/periods",
        templateUrl: "/js/views/periods/index.html",
        controller: "periodsIndexCtrl",
        controllerAs: "vm"
    }).state("periodsShow", {
        url: "/periods/:id",
        templateUrl: "/js/views/periods/periods.show.html",
        controller: "periodsShowCtrl",
        controllerAs: "vm"
    }), t.otherwise("/");
}

function LoginCtrl(e, t, n) {
    var r = this;
    r.login = function() {
        e.login(r.user).$promise.then(function() {
            t.getUser(), n.go("homepage");
        }, function(e) {
            console.log(e);
        });
    };
}

function RegisterCtrl(e, t, n) {
    var r = this;
    r.register = function() {
        e.register(r.user).$promise.then(function() {
            t.getUser(), n.go("buildingsIndex");
        }, function(e) {
            console.log(e);
        });
    };
}

function BuildingsEditCtrl(e, t, n) {
    function r() {
        t.update({
            id: o.building.id
        }, {
            building: o.building
        }).$promise.then(function() {
            return n.go("buildingsShow", e);
        });
    }
    function i() {
        t.remove({
            id: o.building.id
        }).$promise.then(function() {
            n.go("buildingsIndex");
        });
    }
    var o = this;
    o.building = t.get(e), o.update = r, o.delete = i;
}

function BuildingsIndexCtrl(e) {
    this.buildings = e.query();
}

function BuildingsNewCtrl(e, t, n) {
    function r() {
        t.save({
            building: i.building
        }).$promise.then(function() {
            return e.go("buildingsIndex");
        });
    }
    var i = this;
    i.addBuilding = r, i.building = {}, i.periods = n.query();
}

function BuildingsShowCtrl(e, t, n, r, i, o) {
    function a() {
        l.material.user_id = i.currentUser.id, l.material.building_id = parseInt(e.id), 
        n.save({
            material: l.material
        }).$promise.then(function(e) {
            l.building.materials.push(e);
        });
    }
    function s(e) {
        n.delete({
            id: e
        }).$promise.then(function() {
            o.reload();
        });
    }
    function u() {
        l.likedForm = !0, l.favourite = {
            user_id: i.currentUser.id,
            building_id: parseInt(e.id)
        }, console.log(l.favourite), console.log(l.likedForm), r.save(l.favourite).$promise.then(function() {
            console.log("favourite was saved!");
        });
    }
    var l = this;
    l.material = {}, l.favourite = {}, l.building = t.get({
        id: e.id
    }), l.addMaterial = a, l.materialDelete = s, l.addFavourite = u, l.likedForm = !1;
}

function MainCtrl(e, t, n) {
    var r = this;
    e.$on("loggedIn", function() {
        r.user = t.currentUser;
    }), e.$on("loggedOut", function() {
        r.user = null, n.go("login");
    }), r.logout = function() {
        t.removeUser();
    };
}

function periodsIndexCtrl(e) {
    this.periods = e.query();
}

function periodsShowCtrl(e, t) {
    var n = this;
    n.period = {}, n.period = e.get({
        id: t.id
    });
}

function UsersShowCtrl(e, t) {
    var n = this;
    n.user = {}, n.user = e.get({
        id: t.id
    });
}

function googleMap(e) {
    return {
        restrict: "E",
        replace: !0,
        template: '<div class="google-map"></div>',
        scope: {
            buildings: "="
        },
        link: function(t, n) {
            setTimeout(function() {
                var r = new e.google.maps.Map(n[0], {
                    zoom: 12,
                    center: {
                        lat: 51.5152519,
                        lng: -.0745329
                    }
                });
                t.buildings.forEach(function(t) {
                    console.log(t), new e.google.maps.Marker({
                        position: {
                            lat: t.lat,
                            lng: t.long
                        },
                        map: r,
                        animation: e.google.maps.Animation.DROP
                    });
                });
            }, 900);
        }
    };
}

function streetView(e) {
    return {
        restrict: "E",
        replace: !0,
        template: '<div class="street-view"></div>',
        scope: {
            center: "="
        },
        link: function(t, n) {
            setTimeout(function() {
                new e.google.maps.StreetViewPanorama(n[0], {
                    position: t.center,
                    pov: {
                        heading: 150,
                        pitch: 5
                    },
                    addressControlOptions: {
                        position: google.maps.ControlPosition.BOTTOM_CENTER
                    },
                    linksControl: !1,
                    panControl: !1,
                    enableCloseButton: !1
                }), console.log(t.center), console.log(n[0]);
            }, 200);
        }
    };
}

function AuthInterceptor(e, t) {
    return {
        request: function(n) {
            var r = t.getToken();
            return 0 === n.url.indexOf(e) && r && (n.headers.Authorization = "Bearer " + r), 
            n;
        },
        response: function(n) {
            return 0 === n.config.url.indexOf(e) && n.data.token && t.setToken(n.data.token), 
            n;
        }
    };
}

function buildingsFactory(e, t) {
    return e(t + "/buildings/:id", {
        id: "@_id"
    }, {
        update: {
            method: "PUT"
        }
    });
}

function FavouritesFactory(e, t) {
    return t(e + "/favourites/:id", {
        id: "@_id"
    });
}

function MaterialFactory(e, t) {
    return e(t + "/materials/:id", {
        id: "@_id"
    }, {
        update: {
            method: "PUT"
        }
    });
}

function PeriodsFactory(e, t) {
    return t(e + "/periods/:id", {
        id: "@_id"
    });
}

function UserFactory(e, t) {
    return t(e + "/users/:id", {
        id: "@_id"
    }, {
        register: {
            method: "POST",
            url: e + "/register"
        },
        login: {
            method: "POST",
            url: e + "/login"
        }
    });
}

function CurrentUserService(e, t, n) {
    var r = this;
    r.getUser = function() {
        var i = e.decodeToken();
        i && n.get({
            id: i.id
        }).$promise.then(function(e) {
            r.currentUser = e, t.$broadcast("loggedIn");
        });
    }, r.removeUser = function() {
        r.currentUser = null, e.removeToken(), t.$broadcast("loggedOut");
    }, r.getUser();
}

function TokenService(e, t) {
    var n = this;
    n.setToken = function(t) {
        return e.localStorage.setItem("auth-token", t);
    }, n.getToken = function() {
        return e.localStorage.getItem("auth-token");
    }, n.removeToken = function() {
        e.localStorage.clear();
    }, n.decodeToken = function() {
        var e = n.getToken();
        return e ? t.decodeToken(e) : null;
    };
}

if (function(e) {
    "use strict";
    function t(e) {
        if (!w(e)) return Qr;
        b(e.objectMaxDepth) && (Qr.objectMaxDepth = n(e.objectMaxDepth) ? e.objectMaxDepth : NaN);
    }
    function n(e) {
        return C(e) && e > 0;
    }
    function r(e, t) {
        return t = t || Error, function() {
            var n, r, i = arguments[0], o = arguments[1], a = "[" + (e ? e + ":" : "") + i + "] ", s = z(arguments, 2).map(function(e) {
                return xe(e, Qr.objectMaxDepth);
            });
            for (a += o.replace(/\{\d+\}/g, function(e) {
                var t = +e.slice(1, -1);
                return t < s.length ? s[t] : e;
            }), a += "\nhttp://errors.angularjs.org/1.6.6/" + (e ? e + "/" : "") + i, r = 0, 
            n = "?"; r < s.length; r++, n = "&") a += n + "p" + r + "=" + encodeURIComponent(s[r]);
            return new t(a);
        };
    }
    function i(e) {
        if (null == e || O(e)) return !1;
        if (gi(e) || x(e) || ii && e instanceof ii) return !0;
        var t = "length" in Object(e) && e.length;
        return C(t) && (t >= 0 && (t - 1 in e || e instanceof Array) || "function" == typeof e.item);
    }
    function o(e, t, n) {
        var r, a;
        if (e) if (_(e)) for (r in e) "prototype" !== r && "length" !== r && "name" !== r && e.hasOwnProperty(r) && t.call(n, e[r], r, e); else if (gi(e) || i(e)) {
            var s = "object" != typeof e;
            for (r = 0, a = e.length; r < a; r++) (s || r in e) && t.call(n, e[r], r, e);
        } else if (e.forEach && e.forEach !== o) e.forEach(t, n, e); else if (E(e)) for (r in e) t.call(n, e[r], r, e); else if ("function" == typeof e.hasOwnProperty) for (r in e) e.hasOwnProperty(r) && t.call(n, e[r], r, e); else for (r in e) Jr.call(e, r) && t.call(n, e[r], r, e);
        return e;
    }
    function a(e, t, n) {
        for (var r = Object.keys(e).sort(), i = 0; i < r.length; i++) t.call(n, e[r[i]], r[i]);
        return r;
    }
    function s(e) {
        return function(t, n) {
            e(n, t);
        };
    }
    function u() {
        return ++di;
    }
    function l(e, t) {
        t ? e.$$hashKey = t : delete e.$$hashKey;
    }
    function c(e, t, n) {
        for (var r = e.$$hashKey, i = 0, o = t.length; i < o; ++i) {
            var a = t[i];
            if (w(a) || _(a)) for (var s = Object.keys(a), u = 0, f = s.length; u < f; u++) {
                var h = s[u], p = a[h];
                n && w(p) ? S(p) ? e[h] = new Date(p.valueOf()) : A(p) ? e[h] = new RegExp(p) : p.nodeName ? e[h] = p.cloneNode(!0) : R(p) ? e[h] = p.clone() : (w(e[h]) || (e[h] = gi(p) ? [] : {}), 
                c(e[h], [ p ], !0)) : e[h] = p;
            }
        }
        return l(e, r), e;
    }
    function f(e) {
        return c(e, si.call(arguments, 1), !1);
    }
    function h(e) {
        return c(e, si.call(arguments, 1), !0);
    }
    function p(e) {
        return parseInt(e, 10);
    }
    function d(e, t) {
        return f(Object.create(e), t);
    }
    function m() {}
    function g(e) {
        return e;
    }
    function v(e) {
        return function() {
            return e;
        };
    }
    function $(e) {
        return _(e.toString) && e.toString !== ci;
    }
    function y(e) {
        return void 0 === e;
    }
    function b(e) {
        return void 0 !== e;
    }
    function w(e) {
        return null !== e && "object" == typeof e;
    }
    function E(e) {
        return null !== e && "object" == typeof e && !fi(e);
    }
    function x(e) {
        return "string" == typeof e;
    }
    function C(e) {
        return "number" == typeof e;
    }
    function S(e) {
        return "[object Date]" === ci.call(e);
    }
    function T(e) {
        switch (ci.call(e)) {
          case "[object Error]":
          case "[object Exception]":
          case "[object DOMException]":
            return !0;

          default:
            return e instanceof Error;
        }
    }
    function _(e) {
        return "function" == typeof e;
    }
    function A(e) {
        return "[object RegExp]" === ci.call(e);
    }
    function O(e) {
        return e && e.window === e;
    }
    function k(e) {
        return e && e.$evalAsync && e.$watch;
    }
    function I(e) {
        return "[object File]" === ci.call(e);
    }
    function D(e) {
        return "[object FormData]" === ci.call(e);
    }
    function N(e) {
        return "[object Blob]" === ci.call(e);
    }
    function j(e) {
        return "boolean" == typeof e;
    }
    function P(e) {
        return e && _(e.then);
    }
    function M(e) {
        return e && C(e.length) && vi.test(ci.call(e));
    }
    function L(e) {
        return "[object ArrayBuffer]" === ci.call(e);
    }
    function R(e) {
        return !(!e || !(e.nodeName || e.prop && e.attr && e.find));
    }
    function V(e) {
        var t, n = {}, r = e.split(",");
        for (t = 0; t < r.length; t++) n[r[t]] = !0;
        return n;
    }
    function H(e) {
        return Zr(e.nodeName || e[0] && e[0].nodeName);
    }
    function F(e, t) {
        return -1 !== Array.prototype.indexOf.call(e, t);
    }
    function U(e, t) {
        var n = e.indexOf(t);
        return n >= 0 && e.splice(n, 1), n;
    }
    function q(e, t, r) {
        function i(e, t, n) {
            if (--n < 0) return "...";
            var r, i = t.$$hashKey;
            if (gi(e)) for (var o = 0, s = e.length; o < s; o++) t.push(a(e[o], n)); else if (E(e)) for (r in e) t[r] = a(e[r], n); else if (e && "function" == typeof e.hasOwnProperty) for (r in e) e.hasOwnProperty(r) && (t[r] = a(e[r], n)); else for (r in e) Jr.call(e, r) && (t[r] = a(e[r], n));
            return l(t, i), t;
        }
        function a(e, t) {
            if (!w(e)) return e;
            var n = u.indexOf(e);
            if (-1 !== n) return c[n];
            if (O(e) || k(e)) throw hi("cpws", "Can't copy! Making copies of Window or Scope instances is not supported.");
            var r = !1, o = s(e);
            return void 0 === o && (o = gi(e) ? [] : Object.create(fi(e)), r = !0), u.push(e), 
            c.push(o), r ? i(e, o, t) : o;
        }
        function s(e) {
            switch (ci.call(e)) {
              case "[object Int8Array]":
              case "[object Int16Array]":
              case "[object Int32Array]":
              case "[object Float32Array]":
              case "[object Float64Array]":
              case "[object Uint8Array]":
              case "[object Uint8ClampedArray]":
              case "[object Uint16Array]":
              case "[object Uint32Array]":
                return new e.constructor(a(e.buffer), e.byteOffset, e.length);

              case "[object ArrayBuffer]":
                if (!e.slice) {
                    var t = new ArrayBuffer(e.byteLength);
                    return new Uint8Array(t).set(new Uint8Array(e)), t;
                }
                return e.slice(0);

              case "[object Boolean]":
              case "[object Number]":
              case "[object String]":
              case "[object Date]":
                return new e.constructor(e.valueOf());

              case "[object RegExp]":
                var n = new RegExp(e.source, e.toString().match(/[^\/]*$/)[0]);
                return n.lastIndex = e.lastIndex, n;

              case "[object Blob]":
                return new e.constructor([ e ], {
                    type: e.type
                });
            }
            if (_(e.cloneNode)) return e.cloneNode(!0);
        }
        var u = [], c = [];
        if (r = n(r) ? r : NaN, t) {
            if (M(t) || L(t)) throw hi("cpta", "Can't copy! TypedArray destination cannot be mutated.");
            if (e === t) throw hi("cpi", "Can't copy! Source and destination are identical.");
            return gi(t) ? t.length = 0 : o(t, function(e, n) {
                "$$hashKey" !== n && delete t[n];
            }), u.push(e), c.push(t), i(e, t, r);
        }
        return a(e, r);
    }
    function B(e, t) {
        return e === t || e !== e && t !== t;
    }
    function W(e, t) {
        if (e === t) return !0;
        if (null === e || null === t) return !1;
        if (e !== e && t !== t) return !0;
        var n, r, i, o = typeof e, a = typeof t;
        if (o === a && "object" === o) {
            if (!gi(e)) {
                if (S(e)) return !!S(t) && B(e.getTime(), t.getTime());
                if (A(e)) return !!A(t) && e.toString() === t.toString();
                if (k(e) || k(t) || O(e) || O(t) || gi(t) || S(t) || A(t)) return !1;
                i = $e();
                for (r in e) if ("$" !== r.charAt(0) && !_(e[r])) {
                    if (!W(e[r], t[r])) return !1;
                    i[r] = !0;
                }
                for (r in t) if (!(r in i) && "$" !== r.charAt(0) && b(t[r]) && !_(t[r])) return !1;
                return !0;
            }
            if (!gi(t)) return !1;
            if ((n = e.length) === t.length) {
                for (r = 0; r < n; r++) if (!W(e[r], t[r])) return !1;
                return !0;
            }
        }
        return !1;
    }
    function G(e, t, n) {
        return e.concat(si.call(t, n));
    }
    function z(e, t) {
        return si.call(e, t || 0);
    }
    function K(e, t) {
        var n = arguments.length > 2 ? z(arguments, 2) : [];
        return !_(t) || t instanceof RegExp ? t : n.length ? function() {
            return arguments.length ? t.apply(e, G(n, arguments, 0)) : t.apply(e, n);
        } : function() {
            return arguments.length ? t.apply(e, arguments) : t.call(e);
        };
    }
    function Q(t, n) {
        var r = n;
        return "string" == typeof t && "$" === t.charAt(0) && "$" === t.charAt(1) ? r = void 0 : O(n) ? r = "$WINDOW" : n && e.document === n ? r = "$DOCUMENT" : k(n) && (r = "$SCOPE"), 
        r;
    }
    function Y(e, t) {
        if (!y(e)) return C(t) || (t = t ? 2 : null), JSON.stringify(e, Q, t);
    }
    function X(e) {
        return x(e) ? JSON.parse(e) : e;
    }
    function J(e, t) {
        e = e.replace(Ei, "");
        var n = Date.parse("Jan 01, 1970 00:00:00 " + e) / 6e4;
        return mi(n) ? t : n;
    }
    function Z(e, t) {
        return e = new Date(e.getTime()), e.setMinutes(e.getMinutes() + t), e;
    }
    function ee(e, t, n) {
        n = n ? -1 : 1;
        var r = e.getTimezoneOffset();
        return Z(e, n * (J(t, r) - r));
    }
    function te(e) {
        e = ii(e).clone().empty();
        var t = ii("<div>").append(e).html();
        try {
            return e[0].nodeType === Ai ? Zr(t) : t.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/, function(e, t) {
                return "<" + Zr(t);
            });
        } catch (e) {
            return Zr(t);
        }
    }
    function ne(e) {
        try {
            return decodeURIComponent(e);
        } catch (e) {}
    }
    function re(e) {
        var t = {};
        return o((e || "").split("&"), function(e) {
            var n, r, i;
            e && (r = e = e.replace(/\+/g, "%20"), n = e.indexOf("="), -1 !== n && (r = e.substring(0, n), 
            i = e.substring(n + 1)), r = ne(r), b(r) && (i = !b(i) || ne(i), Jr.call(t, r) ? gi(t[r]) ? t[r].push(i) : t[r] = [ t[r], i ] : t[r] = i));
        }), t;
    }
    function ie(e) {
        var t = [];
        return o(e, function(e, n) {
            gi(e) ? o(e, function(e) {
                t.push(ae(n, !0) + (!0 === e ? "" : "=" + ae(e, !0)));
            }) : t.push(ae(n, !0) + (!0 === e ? "" : "=" + ae(e, !0)));
        }), t.length ? t.join("&") : "";
    }
    function oe(e) {
        return ae(e, !0).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+");
    }
    function ae(e, t) {
        return encodeURIComponent(e).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%20/g, t ? "%20" : "+");
    }
    function se(e, t) {
        var n, r, i = xi.length;
        for (r = 0; r < i; ++r) if (n = xi[r] + t, x(n = e.getAttribute(n))) return n;
        return null;
    }
    function ue(t, n) {
        var r, i, a = {};
        if (o(xi, function(e) {
            var n = e + "app";
            !r && t.hasAttribute && t.hasAttribute(n) && (r = t, i = t.getAttribute(n));
        }), o(xi, function(e) {
            var n, o = e + "app";
            !r && (n = t.querySelector("[" + o.replace(":", "\\:") + "]")) && (r = n, i = n.getAttribute(o));
        }), r) {
            if (!Ci) return void e.console.error("Angular: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match.");
            a.strictDi = null !== se(r, "strict-di"), n(r, i ? [ i ] : [], a);
        }
    }
    function le(t, n, r) {
        w(r) || (r = {}), r = f({
            strictDi: !1
        }, r);
        var i = function() {
            if (t = ii(t), t.injector()) {
                var i = t[0] === e.document ? "document" : te(t);
                throw hi("btstrpd", "App already bootstrapped with this element '{0}'", i.replace(/</, "&lt;").replace(/>/, "&gt;"));
            }
            n = n || [], n.unshift([ "$provide", function(e) {
                e.value("$rootElement", t);
            } ]), r.debugInfoEnabled && n.push([ "$compileProvider", function(e) {
                e.debugInfoEnabled(!0);
            } ]), n.unshift("ng");
            var o = lt(n, r.strictDi);
            return o.invoke([ "$rootScope", "$rootElement", "$compile", "$injector", function(e, t, n, r) {
                e.$apply(function() {
                    t.data("$injector", r), n(t)(e);
                });
            } ]), o;
        }, a = /^NG_ENABLE_DEBUG_INFO!/, s = /^NG_DEFER_BOOTSTRAP!/;
        if (e && a.test(e.name) && (r.debugInfoEnabled = !0, e.name = e.name.replace(a, "")), 
        e && !s.test(e.name)) return i();
        e.name = e.name.replace(s, ""), pi.resumeBootstrap = function(e) {
            return o(e, function(e) {
                n.push(e);
            }), i();
        }, _(pi.resumeDeferredBootstrap) && pi.resumeDeferredBootstrap();
    }
    function ce() {
        e.name = "NG_ENABLE_DEBUG_INFO!" + e.name, e.location.reload();
    }
    function fe(e) {
        var t = pi.element(e).injector();
        if (!t) throw hi("test", "no injector found for element argument to getTestability");
        return t.get("$$testability");
    }
    function he(e, t) {
        return t = t || "_", e.replace(Si, function(e, n) {
            return (n ? t : "") + e.toLowerCase();
        });
    }
    function pe(e, t, n) {
        if (!e) throw hi("areq", "Argument '{0}' is {1}", t || "?", n || "required");
        return e;
    }
    function de(e, t, n) {
        return n && gi(e) && (e = e[e.length - 1]), pe(_(e), t, "not a function, got " + (e && "object" == typeof e ? e.constructor.name || "Object" : typeof e)), 
        e;
    }
    function me(e, t) {
        if ("hasOwnProperty" === e) throw hi("badname", "hasOwnProperty is not a valid {0} name", t);
    }
    function ge(e, t, n) {
        if (!t) return e;
        for (var r, i = t.split("."), o = e, a = i.length, s = 0; s < a; s++) r = i[s], 
        e && (e = (o = e)[r]);
        return !n && _(e) ? K(o, e) : e;
    }
    function ve(e) {
        for (var t, n = e[0], r = e[e.length - 1], i = 1; n !== r && (n = n.nextSibling); i++) (t || e[i] !== n) && (t || (t = ii(si.call(e, 0, i))), 
        t.push(n));
        return t || e;
    }
    function $e() {
        return Object.create(null);
    }
    function ye(e) {
        if (null == e) return "";
        switch (typeof e) {
          case "string":
            break;

          case "number":
            e = "" + e;
            break;

          default:
            e = !$(e) || gi(e) || S(e) ? Y(e) : e.toString();
        }
        return e;
    }
    function be(e) {
        function t(e, t, n) {
            return e[t] || (e[t] = n());
        }
        var n = r("$injector"), i = r("ng"), o = t(e, "angular", Object);
        return o.$$minErr = o.$$minErr || r, t(o, "module", function() {
            var e = {};
            return function(r, o, a) {
                var s = {};
                return function(e, t) {
                    if ("hasOwnProperty" === e) throw i("badname", "hasOwnProperty is not a valid {0} name", t);
                }(r, "module"), o && e.hasOwnProperty(r) && (e[r] = null), t(e, r, function() {
                    function e(e, t, n, r) {
                        return r || (r = u), function() {
                            return r[n || "push"]([ e, t, arguments ]), h;
                        };
                    }
                    function t(e, t, n) {
                        return n || (n = u), function(i, o) {
                            return o && _(o) && (o.$$moduleName = r), n.push([ e, t, arguments ]), h;
                        };
                    }
                    if (!o) throw n("nomod", "Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.", r);
                    var u = [], l = [], c = [], f = e("$injector", "invoke", "push", l), h = {
                        _invokeQueue: u,
                        _configBlocks: l,
                        _runBlocks: c,
                        info: function(e) {
                            if (b(e)) {
                                if (!w(e)) throw i("aobj", "Argument '{0}' must be an object", "value");
                                return s = e, this;
                            }
                            return s;
                        },
                        requires: o,
                        name: r,
                        provider: t("$provide", "provider"),
                        factory: t("$provide", "factory"),
                        service: t("$provide", "service"),
                        value: e("$provide", "value"),
                        constant: e("$provide", "constant", "unshift"),
                        decorator: t("$provide", "decorator", l),
                        animation: t("$animateProvider", "register"),
                        filter: t("$filterProvider", "register"),
                        controller: t("$controllerProvider", "register"),
                        directive: t("$compileProvider", "directive"),
                        component: t("$compileProvider", "component"),
                        config: f,
                        run: function(e) {
                            return c.push(e), this;
                        }
                    };
                    return a && f(a), h;
                });
            };
        });
    }
    function we(e, t) {
        if (gi(e)) {
            t = t || [];
            for (var n = 0, r = e.length; n < r; n++) t[n] = e[n];
        } else if (w(e)) {
            t = t || {};
            for (var i in e) "$" === i.charAt(0) && "$" === i.charAt(1) || (t[i] = e[i]);
        }
        return t || e;
    }
    function Ee(e, t) {
        var r = [];
        return n(t) && (e = pi.copy(e, null, t)), JSON.stringify(e, function(e, t) {
            if (t = Q(e, t), w(t)) {
                if (r.indexOf(t) >= 0) return "...";
                r.push(t);
            }
            return t;
        });
    }
    function xe(e, t) {
        return "function" == typeof e ? e.toString().replace(/ \{[\s\S]*$/, "") : y(e) ? "undefined" : "string" != typeof e ? Ee(e, t) : e;
    }
    function Ce() {
        return ++ji;
    }
    function Se(e) {
        return _e(e.replace(Mi, "ms-"));
    }
    function Te(e, t) {
        return t.toUpperCase();
    }
    function _e(e) {
        return e.replace(Pi, Te);
    }
    function Ae(e) {
        return !Hi.test(e);
    }
    function Oe(e) {
        var t = e.nodeType;
        return t === _i || !t || t === ki;
    }
    function ke(e) {
        for (var t in Ni[e.ng339]) return !0;
        return !1;
    }
    function Ie(e, t) {
        var n, r, i, a, s = t.createDocumentFragment(), u = [];
        if (Ae(e)) u.push(t.createTextNode(e)); else {
            for (n = s.appendChild(t.createElement("div")), r = (Fi.exec(e) || [ "", "" ])[1].toLowerCase(), 
            i = qi[r] || qi._default, n.innerHTML = i[1] + e.replace(Ui, "<$1></$2>") + i[2], 
            a = i[0]; a--; ) n = n.lastChild;
            u = G(u, n.childNodes), n = s.firstChild, n.textContent = "";
        }
        return s.textContent = "", s.innerHTML = "", o(u, function(e) {
            s.appendChild(e);
        }), s;
    }
    function De(t, n) {
        n = n || e.document;
        var r;
        return (r = Vi.exec(t)) ? [ n.createElement(r[1]) ] : (r = Ie(t, n)) ? r.childNodes : [];
    }
    function Ne(e, t) {
        var n = e.parentNode;
        n && n.replaceChild(t, e), t.appendChild(e);
    }
    function je(e) {
        if (e instanceof je) return e;
        var t;
        if (x(e) && (e = $i(e), t = !0), !(this instanceof je)) {
            if (t && "<" !== e.charAt(0)) throw Ri("nosel", "Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");
            return new je(e);
        }
        t ? Be(this, De(e)) : _(e) ? Ye(e) : Be(this, e);
    }
    function Pe(e) {
        return e.cloneNode(!0);
    }
    function Me(e, t) {
        !t && Oe(e) && ii.cleanData([ e ]), e.querySelectorAll && ii.cleanData(e.querySelectorAll("*"));
    }
    function Le(e, t, n, r) {
        if (b(r)) throw Ri("offargs", "jqLite#off() does not support the `selector` argument");
        var i = Ve(e), a = i && i.events, s = i && i.handle;
        if (s) if (t) {
            var u = function(t) {
                var r = a[t];
                b(n) && U(r || [], n), b(n) && r && r.length > 0 || (e.removeEventListener(t, s), 
                delete a[t]);
            };
            o(t.split(" "), function(e) {
                u(e), Li[e] && u(Li[e]);
            });
        } else for (t in a) "$destroy" !== t && e.removeEventListener(t, s), delete a[t];
    }
    function Re(e, t) {
        var n = e.ng339, r = n && Ni[n];
        if (r) {
            if (t) return void delete r.data[t];
            r.handle && (r.events.$destroy && r.handle({}, "$destroy"), Le(e)), delete Ni[n], 
            e.ng339 = void 0;
        }
    }
    function Ve(e, t) {
        var n = e.ng339, r = n && Ni[n];
        return t && !r && (e.ng339 = n = Ce(), r = Ni[n] = {
            events: {},
            data: {},
            handle: void 0
        }), r;
    }
    function He(e, t, n) {
        if (Oe(e)) {
            var r, i = b(n), o = !i && t && !w(t), a = !t, s = Ve(e, !o), u = s && s.data;
            if (i) u[_e(t)] = n; else {
                if (a) return u;
                if (o) return u && u[_e(t)];
                for (r in t) u[_e(r)] = t[r];
            }
        }
    }
    function Fe(e, t) {
        return !!e.getAttribute && (" " + (e.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").indexOf(" " + t + " ") > -1;
    }
    function Ue(e, t) {
        t && e.setAttribute && o(t.split(" "), function(t) {
            e.setAttribute("class", $i((" " + (e.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").replace(" " + $i(t) + " ", " ")));
        });
    }
    function qe(e, t) {
        if (t && e.setAttribute) {
            var n = (" " + (e.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ");
            o(t.split(" "), function(e) {
                e = $i(e), -1 === n.indexOf(" " + e + " ") && (n += e + " ");
            }), e.setAttribute("class", $i(n));
        }
    }
    function Be(e, t) {
        if (t) if (t.nodeType) e[e.length++] = t; else {
            var n = t.length;
            if ("number" == typeof n && t.window !== t) {
                if (n) for (var r = 0; r < n; r++) e[e.length++] = t[r];
            } else e[e.length++] = t;
        }
    }
    function We(e, t) {
        return Ge(e, "$" + (t || "ngController") + "Controller");
    }
    function Ge(e, t, n) {
        e.nodeType === ki && (e = e.documentElement);
        for (var r = gi(t) ? t : [ t ]; e; ) {
            for (var i = 0, o = r.length; i < o; i++) if (b(n = ii.data(e, r[i]))) return n;
            e = e.parentNode || e.nodeType === Ii && e.host;
        }
    }
    function ze(e) {
        for (Me(e, !0); e.firstChild; ) e.removeChild(e.firstChild);
    }
    function Ke(e, t) {
        t || Me(e);
        var n = e.parentNode;
        n && n.removeChild(e);
    }
    function Qe(t, n) {
        n = n || e, "complete" === n.document.readyState ? n.setTimeout(t) : ii(n).on("load", t);
    }
    function Ye(t) {
        function n() {
            e.document.removeEventListener("DOMContentLoaded", n), e.removeEventListener("load", n), 
            t();
        }
        "complete" === e.document.readyState ? e.setTimeout(t) : (e.document.addEventListener("DOMContentLoaded", n), 
        e.addEventListener("load", n));
    }
    function Xe(e, t) {
        var n = Gi[t.toLowerCase()];
        return n && zi[H(e)] && n;
    }
    function Je(e) {
        return Ki[e];
    }
    function Ze(e, t) {
        var n = function(n, r) {
            n.isDefaultPrevented = function() {
                return n.defaultPrevented;
            };
            var i = t[r || n.type], o = i ? i.length : 0;
            if (o) {
                if (y(n.immediatePropagationStopped)) {
                    var a = n.stopImmediatePropagation;
                    n.stopImmediatePropagation = function() {
                        n.immediatePropagationStopped = !0, n.stopPropagation && n.stopPropagation(), a && a.call(n);
                    };
                }
                n.isImmediatePropagationStopped = function() {
                    return !0 === n.immediatePropagationStopped;
                };
                var s = i.specialHandlerWrapper || et;
                o > 1 && (i = we(i));
                for (var u = 0; u < o; u++) n.isImmediatePropagationStopped() || s(e, n, i[u]);
            }
        };
        return n.elem = e, n;
    }
    function et(e, t, n) {
        n.call(e, t);
    }
    function tt(e, t, n) {
        var r = t.relatedTarget;
        r && (r === e || Bi.call(e, r)) || n.call(e, t);
    }
    function nt() {
        this.$get = function() {
            return f(je, {
                hasClass: function(e, t) {
                    return e.attr && (e = e[0]), Fe(e, t);
                },
                addClass: function(e, t) {
                    return e.attr && (e = e[0]), qe(e, t);
                },
                removeClass: function(e, t) {
                    return e.attr && (e = e[0]), Ue(e, t);
                }
            });
        };
    }
    function rt(e, t) {
        var n = e && e.$$hashKey;
        if (n) return "function" == typeof n && (n = e.$$hashKey()), n;
        var r = typeof e;
        return n = "function" === r || "object" === r && null !== e ? e.$$hashKey = r + ":" + (t || u)() : r + ":" + e;
    }
    function it() {
        this._keys = [], this._values = [], this._lastKey = NaN, this._lastIndex = -1;
    }
    function ot(e) {
        return Function.prototype.toString.call(e);
    }
    function at(e) {
        var t = ot(e).replace(no, "");
        return t.match(Ji) || t.match(Zi);
    }
    function st(e) {
        var t = at(e);
        return t ? "function(" + (t[1] || "").replace(/[\s\r\n]+/, " ") + ")" : "fn";
    }
    function ut(e, t, n) {
        var r, i, a;
        if ("function" == typeof e) {
            if (!(r = e.$inject)) {
                if (r = [], e.length) {
                    if (t) throw x(n) && n || (n = e.name || st(e)), ro("strictdi", "{0} is not using explicit annotation and cannot be invoked in strict mode", n);
                    i = at(e), o(i[1].split(eo), function(e) {
                        e.replace(to, function(e, t, n) {
                            r.push(n);
                        });
                    });
                }
                e.$inject = r;
            }
        } else gi(e) ? (a = e.length - 1, de(e[a], "fn"), r = e.slice(0, a)) : de(e, "fn", !0);
        return r;
    }
    function lt(e, t) {
        function n(e) {
            return function(t, n) {
                if (!w(t)) return e(t, n);
                o(t, s(e));
            };
        }
        function r(e, t) {
            if (me(e, "service"), (_(t) || gi(t)) && (t = E.instantiate(t)), !t.$get) throw ro("pget", "Provider '{0}' must define $get factory method.", e);
            return b[e + m] = t;
        }
        function i(e, t) {
            return function() {
                var n = T.invoke(t, this);
                if (y(n)) throw ro("undef", "Provider '{0}' must return a value from $get factory method.", e);
                return n;
            };
        }
        function a(e, t, n) {
            return r(e, {
                $get: !1 !== n ? i(e, t) : t
            });
        }
        function u(e, t) {
            return a(e, [ "$injector", function(e) {
                return e.instantiate(t);
            } ]);
        }
        function l(e, t) {
            return a(e, v(t), !1);
        }
        function c(e, t) {
            me(e, "constant"), b[e] = t, C[e] = t;
        }
        function f(e, t) {
            var n = E.get(e + m), r = n.$get;
            n.$get = function() {
                var e = T.invoke(r, n);
                return T.invoke(t, null, {
                    $delegate: e
                });
            };
        }
        function h(e) {
            pe(y(e) || gi(e), "modulesToLoad", "not an array");
            var t, n = [];
            return o(e, function(e) {
                function r(e) {
                    var t, n;
                    for (t = 0, n = e.length; t < n; t++) {
                        var r = e[t], i = E.get(r[0]);
                        i[r[1]].apply(i, r[2]);
                    }
                }
                if (!$.get(e)) {
                    $.set(e, !0);
                    try {
                        x(e) ? (t = ai(e), T.modules[e] = t, n = n.concat(h(t.requires)).concat(t._runBlocks), 
                        r(t._invokeQueue), r(t._configBlocks)) : _(e) ? n.push(E.invoke(e)) : gi(e) ? n.push(E.invoke(e)) : de(e, "module");
                    } catch (t) {
                        throw gi(e) && (e = e[e.length - 1]), t.message && t.stack && -1 === t.stack.indexOf(t.message) && (t = t.message + "\n" + t.stack), 
                        ro("modulerr", "Failed to instantiate module {0} due to:\n{1}", e, t.stack || t.message || t);
                    }
                }
            }), n;
        }
        function p(e, n) {
            function r(t, r) {
                if (e.hasOwnProperty(t)) {
                    if (e[t] === d) throw ro("cdep", "Circular dependency found: {0}", t + " <- " + g.join(" <- "));
                    return e[t];
                }
                try {
                    return g.unshift(t), e[t] = d, e[t] = n(t, r), e[t];
                } catch (n) {
                    throw e[t] === d && delete e[t], n;
                } finally {
                    g.shift();
                }
            }
            function i(e, n, i) {
                for (var o = [], a = lt.$$annotate(e, t, i), s = 0, u = a.length; s < u; s++) {
                    var l = a[s];
                    if ("string" != typeof l) throw ro("itkn", "Incorrect injection token! Expected service name as string, got {0}", l);
                    o.push(n && n.hasOwnProperty(l) ? n[l] : r(l, i));
                }
                return o;
            }
            function o(e) {
                if (ri || "function" != typeof e) return !1;
                var t = e.$$ngIsClass;
                return j(t) || (t = e.$$ngIsClass = /^(?:class\b|constructor\()/.test(ot(e))), t;
            }
            function a(e, t, n, r) {
                "string" == typeof n && (r = n, n = null);
                var a = i(e, n, r);
                return gi(e) && (e = e[e.length - 1]), o(e) ? (a.unshift(null), new (Function.prototype.bind.apply(e, a))()) : e.apply(t, a);
            }
            function s(e, t, n) {
                var r = gi(e) ? e[e.length - 1] : e, o = i(e, t, n);
                return o.unshift(null), new (Function.prototype.bind.apply(r, o))();
            }
            return {
                invoke: a,
                instantiate: s,
                get: r,
                annotate: lt.$$annotate,
                has: function(t) {
                    return b.hasOwnProperty(t + m) || e.hasOwnProperty(t);
                }
            };
        }
        t = !0 === t;
        var d = {}, m = "Provider", g = [], $ = new Yi(), b = {
            $provide: {
                provider: n(r),
                factory: n(a),
                service: n(u),
                value: n(l),
                constant: n(c),
                decorator: f
            }
        }, E = b.$injector = p(b, function(e, t) {
            throw pi.isString(t) && g.push(t), ro("unpr", "Unknown provider: {0}", g.join(" <- "));
        }), C = {}, S = p(C, function(e, t) {
            var n = E.get(e + m, t);
            return T.invoke(n.$get, n, void 0, e);
        }), T = S;
        b["$injector" + m] = {
            $get: v(S)
        }, T.modules = E.modules = $e();
        var A = h(e);
        return T = S.get("$injector"), T.strictDi = t, o(A, function(e) {
            e && T.invoke(e);
        }), T;
    }
    function ct() {
        var e = !0;
        this.disableAutoScrolling = function() {
            e = !1;
        }, this.$get = [ "$window", "$location", "$rootScope", function(t, n, r) {
            function i(e) {
                var t = null;
                return Array.prototype.some.call(e, function(e) {
                    if ("a" === H(e)) return t = e, !0;
                }), t;
            }
            function o() {
                var e = s.yOffset;
                if (_(e)) e = e(); else if (R(e)) {
                    var n = e[0], r = t.getComputedStyle(n);
                    e = "fixed" !== r.position ? 0 : n.getBoundingClientRect().bottom;
                } else C(e) || (e = 0);
                return e;
            }
            function a(e) {
                if (e) {
                    e.scrollIntoView();
                    var n = o();
                    if (n) {
                        var r = e.getBoundingClientRect().top;
                        t.scrollBy(0, r - n);
                    }
                } else t.scrollTo(0, 0);
            }
            function s(e) {
                e = x(e) ? e : C(e) ? e.toString() : n.hash();
                var t;
                e ? (t = u.getElementById(e)) ? a(t) : (t = i(u.getElementsByName(e))) ? a(t) : "top" === e && a(null) : a(null);
            }
            var u = t.document;
            return e && r.$watch(function() {
                return n.hash();
            }, function(e, t) {
                e === t && "" === e || Qe(function() {
                    r.$evalAsync(s);
                });
            }), s;
        } ];
    }
    function ft(e, t) {
        return e || t ? e ? t ? (gi(e) && (e = e.join(" ")), gi(t) && (t = t.join(" ")), 
        e + " " + t) : e : t : "";
    }
    function ht(e) {
        for (var t = 0; t < e.length; t++) {
            var n = e[t];
            if (n.nodeType === oo) return n;
        }
    }
    function pt(e) {
        x(e) && (e = e.split(" "));
        var t = $e();
        return o(e, function(e) {
            e.length && (t[e] = !0);
        }), t;
    }
    function dt(e) {
        return w(e) ? e : {};
    }
    function mt(e, t, n, r) {
        function i(e) {
            try {
                e.apply(null, z(arguments, 1));
            } finally {
                if (0 === --v) for (;$.length; ) try {
                    $.pop()();
                } catch (e) {
                    n.error(e);
                }
            }
        }
        function a(e) {
            var t = e.indexOf("#");
            return -1 === t ? "" : e.substr(t);
        }
        function s() {
            C = null, l();
        }
        function u() {
            b = S(), b = y(b) ? null : b, W(b, A) && (b = A), A = b, w = b;
        }
        function l() {
            var e = w;
            u(), E === c.url() && e === b || (E = c.url(), w = b, o(T, function(e) {
                e(c.url(), b);
            }));
        }
        var c = this, f = e.location, h = e.history, p = e.setTimeout, d = e.clearTimeout, g = {};
        c.isMock = !1;
        var v = 0, $ = [];
        c.$$completeOutstandingRequest = i, c.$$incOutstandingRequestCount = function() {
            v++;
        }, c.notifyWhenNoOutstandingRequests = function(e) {
            0 === v ? e() : $.push(e);
        };
        var b, w, E = f.href, x = t.find("base"), C = null, S = r.history ? function() {
            try {
                return h.state;
            } catch (e) {}
        } : m;
        u(), c.url = function(t, n, i) {
            if (y(i) && (i = null), f !== e.location && (f = e.location), h !== e.history && (h = e.history), 
            t) {
                var o = w === i;
                if (E === t && (!r.history || o)) return c;
                var s = E && Yt(E) === Yt(t);
                return E = t, w = i, !r.history || s && o ? (s || (C = t), n ? f.replace(t) : s ? f.hash = a(t) : f.href = t, 
                f.href !== t && (C = t)) : (h[n ? "replaceState" : "pushState"](i, "", t), u()), 
                C && (C = t), c;
            }
            return C || f.href.replace(/%27/g, "'");
        }, c.state = function() {
            return b;
        };
        var T = [], _ = !1, A = null;
        c.onUrlChange = function(t) {
            return _ || (r.history && ii(e).on("popstate", s), ii(e).on("hashchange", s), _ = !0), 
            T.push(t), t;
        }, c.$$applicationDestroyed = function() {
            ii(e).off("hashchange popstate", s);
        }, c.$$checkUrlChange = l, c.baseHref = function() {
            var e = x.attr("href");
            return e ? e.replace(/^(https?:)?\/\/[^\/]*/, "") : "";
        }, c.defer = function(e, t) {
            var n;
            return v++, n = p(function() {
                delete g[n], i(e);
            }, t || 0), g[n] = !0, n;
        }, c.defer.cancel = function(e) {
            return !!g[e] && (delete g[e], d(e), i(m), !0);
        };
    }
    function gt() {
        this.$get = [ "$window", "$log", "$sniffer", "$document", function(e, t, n, r) {
            return new mt(e, r, t, n);
        } ];
    }
    function vt() {
        this.$get = function() {
            function e(e, n) {
                function i(e) {
                    e !== h && (p ? p === e && (p = e.n) : p = e, o(e.n, e.p), o(e, h), h = e, h.n = null);
                }
                function o(e, t) {
                    e !== t && (e && (e.p = t), t && (t.n = e));
                }
                if (e in t) throw r("$cacheFactory")("iid", "CacheId '{0}' is already taken!", e);
                var a = 0, s = f({}, n, {
                    id: e
                }), u = $e(), l = n && n.capacity || Number.MAX_VALUE, c = $e(), h = null, p = null;
                return t[e] = {
                    put: function(e, t) {
                        if (!y(t)) {
                            if (l < Number.MAX_VALUE) {
                                i(c[e] || (c[e] = {
                                    key: e
                                }));
                            }
                            return e in u || a++, u[e] = t, a > l && this.remove(p.key), t;
                        }
                    },
                    get: function(e) {
                        if (l < Number.MAX_VALUE) {
                            var t = c[e];
                            if (!t) return;
                            i(t);
                        }
                        return u[e];
                    },
                    remove: function(e) {
                        if (l < Number.MAX_VALUE) {
                            var t = c[e];
                            if (!t) return;
                            t === h && (h = t.p), t === p && (p = t.n), o(t.n, t.p), delete c[e];
                        }
                        e in u && (delete u[e], a--);
                    },
                    removeAll: function() {
                        u = $e(), a = 0, c = $e(), h = p = null;
                    },
                    destroy: function() {
                        u = null, s = null, c = null, delete t[e];
                    },
                    info: function() {
                        return f({}, s, {
                            size: a
                        });
                    }
                };
            }
            var t = {};
            return e.info = function() {
                var e = {};
                return o(t, function(t, n) {
                    e[n] = t.info();
                }), e;
            }, e.get = function(e) {
                return t[e];
            }, e;
        };
    }
    function $t() {
        this.$get = [ "$cacheFactory", function(e) {
            return e("templates");
        } ];
    }
    function yt() {}
    function bt(t, n) {
        function r(e, t, n) {
            var r = /^\s*([@&<]|=(\*?))(\??)\s*([\w$]*)\s*$/, i = $e();
            return o(e, function(e, o) {
                if (e in A) return void (i[o] = A[e]);
                var a = e.match(r);
                if (!a) throw ho("iscp", "Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}", t, o, e, n ? "controller bindings definition" : "isolate scope definition");
                i[o] = {
                    mode: a[1][0],
                    collection: "*" === a[2],
                    optional: "?" === a[3],
                    attrName: a[4] || o
                }, a[4] && (A[e] = i[o]);
            }), i;
        }
        function i(e, t) {
            var n = {
                isolateScope: null,
                bindToController: null
            };
            if (w(e.scope) && (!0 === e.bindToController ? (n.bindToController = r(e.scope, t, !0), 
            n.isolateScope = {}) : n.isolateScope = r(e.scope, t, !1)), w(e.bindToController) && (n.bindToController = r(e.bindToController, t, !0)), 
            n.bindToController && !e.controller) throw ho("noctrl", "Cannot bind to controller without directive '{0}'s controller.", t);
            return n;
        }
        function a(e) {
            var t = e.charAt(0);
            if (!t || t !== Zr(t)) throw ho("baddir", "Directive/Component name '{0}' is invalid. The first character must be a lowercase letter", e);
            if (e !== e.trim()) throw ho("baddir", "Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces", e);
        }
        function u(e) {
            var t = e.require || e.controller && e.name;
            return !gi(t) && w(t) && o(t, function(e, n) {
                var r = e.match(C);
                e.substring(r[0].length) || (t[n] = r[0] + n);
            }), t;
        }
        function l(e, t) {
            if (e && (!x(e) || !/[EACM]/.test(e))) throw ho("badrestrict", "Restrict property '{0}' of directive '{1}' is invalid", e, t);
            return e || "EA";
        }
        var c = {}, h = "Directive", p = /^\s*directive:\s*([\w-]+)\s+(.*)$/, $ = /(([\w-]+)(?::([^;]+))?;?)/, E = V("ngSrc,ngSrcset,src,srcset"), C = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/, S = /^(on[a-z]+|formaction)$/, A = $e();
        this.directive = function e(n, r) {
            return pe(n, "name"), me(n, "directive"), x(n) ? (a(n), pe(r, "directiveFactory"), 
            c.hasOwnProperty(n) || (c[n] = [], t.factory(n + h, [ "$injector", "$exceptionHandler", function(e, t) {
                var r = [];
                return o(c[n], function(i, o) {
                    try {
                        var a = e.invoke(i);
                        _(a) ? a = {
                            compile: v(a)
                        } : !a.compile && a.link && (a.compile = v(a.link)), a.priority = a.priority || 0, 
                        a.index = o, a.name = a.name || n, a.require = u(a), a.restrict = l(a.restrict, n), 
                        a.$$moduleName = i.$$moduleName, r.push(a);
                    } catch (e) {
                        t(e);
                    }
                }), r;
            } ])), c[n].push(r)) : o(n, s(e)), this;
        }, this.component = function e(t, n) {
            function r(e) {
                function t(t) {
                    return _(t) || gi(t) ? function(n, r) {
                        return e.invoke(t, this, {
                            $element: n,
                            $attrs: r
                        });
                    } : t;
                }
                var r = n.template || n.templateUrl ? n.template : "", a = {
                    controller: i,
                    controllerAs: St(n.controller) || n.controllerAs || "$ctrl",
                    template: t(r),
                    templateUrl: t(n.templateUrl),
                    transclude: n.transclude,
                    scope: {},
                    bindToController: n.bindings || {},
                    restrict: "E",
                    require: n.require
                };
                return o(n, function(e, t) {
                    "$" === t.charAt(0) && (a[t] = e);
                }), a;
            }
            if (!x(t)) return o(t, s(K(this, e))), this;
            var i = n.controller || function() {};
            return o(n, function(e, t) {
                "$" === t.charAt(0) && (r[t] = e, _(i) && (i[t] = e));
            }), r.$inject = [ "$injector" ], this.directive(t, r);
        }, this.aHrefSanitizationWhitelist = function(e) {
            return b(e) ? (n.aHrefSanitizationWhitelist(e), this) : n.aHrefSanitizationWhitelist();
        }, this.imgSrcSanitizationWhitelist = function(e) {
            return b(e) ? (n.imgSrcSanitizationWhitelist(e), this) : n.imgSrcSanitizationWhitelist();
        };
        var O = !0;
        this.debugInfoEnabled = function(e) {
            return b(e) ? (O = e, this) : O;
        };
        var I = !1;
        this.preAssignBindingsEnabled = function(e) {
            return b(e) ? (I = e, this) : I;
        };
        var D = !1;
        this.strictComponentBindingsEnabled = function(e) {
            return b(e) ? (D = e, this) : D;
        };
        var N = 10;
        this.onChangesTtl = function(e) {
            return arguments.length ? (N = e, this) : N;
        };
        var P = !0;
        this.commentDirectivesEnabled = function(e) {
            return arguments.length ? (P = e, this) : P;
        };
        var M = !0;
        this.cssClassDirectivesEnabled = function(e) {
            return arguments.length ? (M = e, this) : M;
        }, this.$get = [ "$injector", "$interpolate", "$exceptionHandler", "$templateRequest", "$parse", "$controller", "$rootScope", "$sce", "$animate", "$$sanitizeUri", function(t, n, r, a, s, u, l, v, A, L) {
            function R() {
                try {
                    if (!--Ne) throw _e = void 0, ho("infchng", "{0} $onChanges() iterations reached. Aborting!\n", N);
                    l.$apply(function() {
                        for (var e = [], t = 0, n = _e.length; t < n; ++t) try {
                            _e[t]();
                        } catch (t) {
                            e.push(t);
                        }
                        if (_e = void 0, e.length) throw e;
                    });
                } finally {
                    Ne++;
                }
            }
            function V(e, t) {
                if (t) {
                    var n, r, i, o = Object.keys(t);
                    for (n = 0, r = o.length; n < r; n++) i = o[n], this[i] = t[i];
                } else this.$attr = {};
                this.$$element = e;
            }
            function F(e, t, n) {
                ke.innerHTML = "<span " + t + ">";
                var r = ke.firstChild.attributes, i = r[0];
                r.removeNamedItem(i.name), i.value = n, e.attributes.setNamedItem(i);
            }
            function q(e, t) {
                try {
                    e.addClass(t);
                } catch (e) {}
            }
            function G(e, t, n, r, i) {
                e instanceof ii || (e = ii(e));
                var o = Y(e, t, e, n, r, i);
                G.$$addScopeClass(e);
                var a = null;
                return function(t, n, r) {
                    if (!e) throw ho("multilink", "This element has already been linked.");
                    pe(t, "scope"), i && i.needsNewScope && (t = t.$parent.$new()), r = r || {};
                    var s = r.parentBoundTranscludeFn, u = r.transcludeControllers, l = r.futureParentElement;
                    s && s.$$boundTransclude && (s = s.$$boundTransclude), a || (a = Q(l));
                    var c;
                    if (c = "html" !== a ? ii(ye(a, ii("<div>").append(e).html())) : n ? Wi.clone.call(e) : e, 
                    u) for (var f in u) c.data("$" + f + "Controller", u[f].instance);
                    return G.$$addScopeInfo(c, t), n && n(c, t), o && o(t, c, c, s), n || (e = o = null), 
                    c;
                };
            }
            function Q(e) {
                var t = e && e[0];
                return t && "foreignobject" !== H(t) && ci.call(t).match(/SVG/) ? "svg" : "html";
            }
            function Y(e, t, n, r, i, o) {
                function a(e, n, r, i) {
                    var o, a, s, u, l, c, f, h, m;
                    if (p) {
                        var g = n.length;
                        for (m = new Array(g), l = 0; l < d.length; l += 3) f = d[l], m[f] = n[f];
                    } else m = n;
                    for (l = 0, c = d.length; l < c; ) s = m[d[l++]], o = d[l++], a = d[l++], o ? (o.scope ? (u = e.$new(), 
                    G.$$addScopeInfo(ii(s), u)) : u = e, h = o.transcludeOnThisElement ? J(e, o.transclude, i) : !o.templateOnThisElement && i ? i : !i && t ? J(e, t) : null, 
                    o(a, u, s, r, h)) : a && a(e, s.childNodes, void 0, i);
                }
                for (var s, u, l, c, f, h, p, d = [], m = gi(e) || e instanceof ii, g = 0; g < e.length; g++) s = new V(), 
                11 === ri && X(e, g, m), u = Z(e[g], [], s, 0 === g ? r : void 0, i), l = u.length ? oe(u, e[g], s, t, n, null, [], [], o) : null, 
                l && l.scope && G.$$addScopeClass(s.$$element), f = l && l.terminal || !(c = e[g].childNodes) || !c.length ? null : Y(c, l ? (l.transcludeOnThisElement || !l.templateOnThisElement) && l.transclude : t), 
                (l || f) && (d.push(g, l, f), h = !0, p = p || l), o = null;
                return h ? a : null;
            }
            function X(e, t, n) {
                var r, i = e[t], o = i.parentNode;
                if (i.nodeType === Ai) for (;;) {
                    if (!(r = o ? i.nextSibling : e[t + 1]) || r.nodeType !== Ai) break;
                    i.nodeValue = i.nodeValue + r.nodeValue, r.parentNode && r.parentNode.removeChild(r), 
                    n && r === e[t + 1] && e.splice(t + 1, 1);
                }
            }
            function J(e, t, n) {
                function r(r, i, o, a, s) {
                    return r || (r = e.$new(!1, s), r.$$transcluded = !0), t(r, i, {
                        parentBoundTranscludeFn: n,
                        transcludeControllers: o,
                        futureParentElement: a
                    });
                }
                var i = r.$$slots = $e();
                for (var o in t.$$slots) t.$$slots[o] ? i[o] = J(e, t.$$slots[o], n) : i[o] = null;
                return r;
            }
            function Z(e, t, n, r, i) {
                var o, a, s, u = e.nodeType, l = n.$attr;
                switch (u) {
                  case _i:
                    a = H(e), le(t, Et(a), "E", r, i);
                    for (var c, f, h, p, d, m, g = e.attributes, v = 0, y = g && g.length; v < y; v++) {
                        var b = !1, E = !1;
                        c = g[v], f = c.name, d = c.value, p = Et(f), m = Re.test(p), m && (f = f.replace(mo, "").substr(8).replace(/_(.)/g, function(e, t) {
                            return t.toUpperCase();
                        }));
                        var C = p.match(Ve);
                        C && ce(C[1]) && (b = f, E = f.substr(0, f.length - 5) + "end", f = f.substr(0, f.length - 6)), 
                        h = Et(f.toLowerCase()), l[h] = f, !m && n.hasOwnProperty(h) || (n[h] = d, Xe(e, h) && (n[h] = !0)), 
                        we(e, t, d, h, m), le(t, h, "A", r, i, b, E);
                    }
                    if ("input" === a && "hidden" === e.getAttribute("type") && e.setAttribute("autocomplete", "off"), 
                    !De) break;
                    if (s = e.className, w(s) && (s = s.animVal), x(s) && "" !== s) for (;o = $.exec(s); ) h = Et(o[2]), 
                    le(t, h, "C", r, i) && (n[h] = $i(o[3])), s = s.substr(o.index + o[0].length);
                    break;

                  case Ai:
                    ve(t, e.nodeValue);
                    break;

                  case Oi:
                    if (!Ie) break;
                    ee(e, t, n, r, i);
                }
                return t.sort(me), t;
            }
            function ee(e, t, n, r, i) {
                try {
                    var o = p.exec(e.nodeValue);
                    if (o) {
                        var a = Et(o[1]);
                        le(t, a, "M", r, i) && (n[a] = $i(o[2]));
                    }
                } catch (e) {}
            }
            function ne(e, t, n) {
                var r = [], i = 0;
                if (t && e.hasAttribute && e.hasAttribute(t)) do {
                    if (!e) throw ho("uterdir", "Unterminated attribute, found '{0}' but no matching '{1}' found.", t, n);
                    e.nodeType === _i && (e.hasAttribute(t) && i++, e.hasAttribute(n) && i--), r.push(e), 
                    e = e.nextSibling;
                } while (i > 0); else r.push(e);
                return ii(r);
            }
            function re(e, t, n) {
                return function(r, i, o, a, s) {
                    return i = ne(i[0], t, n), e(r, i, o, a, s);
                };
            }
            function ie(e, t, n, r, i, o) {
                var a;
                return e ? G(t, n, r, i, o) : function() {
                    return a || (a = G(t, n, r, i, o), t = n = o = null), a.apply(this, arguments);
                };
            }
            function oe(e, t, n, i, a, s, u, l, c) {
                function h(e, t, n, r) {
                    e && (n && (e = re(e, n, r)), e.require = d.require, e.directiveName = m, (C === d || d.$$isolateScope) && (e = xe(e, {
                        isolateScope: !0
                    })), u.push(e)), t && (n && (t = re(t, n, r)), t.require = d.require, t.directiveName = m, 
                    (C === d || d.$$isolateScope) && (t = xe(t, {
                        isolateScope: !0
                    })), l.push(t));
                }
                function p(e, i, a, s, c) {
                    function h(e, t, n, r) {
                        var i;
                        if (k(e) || (r = n, n = t, t = e, e = void 0), D && (i = $), n || (n = D ? T.parent() : T), 
                        !r) return c(e, t, i, n, R);
                        var o = c.$$slots[r];
                        if (o) return o(e, t, i, n, R);
                        if (y(o)) throw ho("noslot", 'No parent directive that requires a transclusion with slot name "{0}". Element: {1}', r, te(T));
                    }
                    var p, d, m, g, v, $, b, T, A, O;
                    t === a ? (A = n, T = n.$$element) : (T = ii(a), A = new V(T, n)), v = i, C ? g = i.$new(!0) : E && (v = i.$parent), 
                    c && (b = h, b.$$boundTransclude = c, b.isSlotFilled = function(e) {
                        return !!c.$$slots[e];
                    }), x && ($ = se(T, A, b, x, g, i, C)), C && (G.$$addScopeInfo(T, g, !0, !(S && (S === C || S === C.$$originalDirective))), 
                    G.$$addScopeClass(T, !0), g.$$isolateBindings = C.$$isolateBindings, O = Te(i, A, g, g.$$isolateBindings, C), 
                    O.removeWatches && g.$on("$destroy", O.removeWatches));
                    for (var N in $) {
                        var j = x[N], P = $[N], M = j.$$bindings.bindToController;
                        if (I) {
                            P.bindingInfo = M ? Te(v, A, P.instance, M, j) : {};
                            var L = P();
                            L !== P.instance && (P.instance = L, T.data("$" + j.name + "Controller", L), P.bindingInfo.removeWatches && P.bindingInfo.removeWatches(), 
                            P.bindingInfo = Te(v, A, P.instance, M, j));
                        } else P.instance = P(), T.data("$" + j.name + "Controller", P.instance), P.bindingInfo = Te(v, A, P.instance, M, j);
                    }
                    for (o(x, function(e, t) {
                        var n = e.require;
                        e.bindToController && !gi(n) && w(n) && f($[t].instance, ae(t, n, T, $));
                    }), o($, function(e) {
                        var t = e.instance;
                        if (_(t.$onChanges)) try {
                            t.$onChanges(e.bindingInfo.initialChanges);
                        } catch (e) {
                            r(e);
                        }
                        if (_(t.$onInit)) try {
                            t.$onInit();
                        } catch (e) {
                            r(e);
                        }
                        _(t.$doCheck) && (v.$watch(function() {
                            t.$doCheck();
                        }), t.$doCheck()), _(t.$onDestroy) && v.$on("$destroy", function() {
                            t.$onDestroy();
                        });
                    }), p = 0, d = u.length; p < d; p++) m = u[p], Ce(m, m.isolateScope ? g : i, T, A, m.require && ae(m.directiveName, m.require, T, $), b);
                    var R = i;
                    for (C && (C.template || null === C.templateUrl) && (R = g), e && e(R, a.childNodes, void 0, c), 
                    p = l.length - 1; p >= 0; p--) m = l[p], Ce(m, m.isolateScope ? g : i, T, A, m.require && ae(m.directiveName, m.require, T, $), b);
                    o($, function(e) {
                        var t = e.instance;
                        _(t.$postLink) && t.$postLink();
                    });
                }
                c = c || {};
                for (var d, m, g, v, $, b = -Number.MAX_VALUE, E = c.newScopeDirective, x = c.controllerDirectives, C = c.newIsolateScopeDirective, S = c.templateDirective, T = c.nonTlbTranscludeDirective, A = !1, O = !1, D = c.hasElementTranscludeDirective, N = n.$$element = ii(t), j = s, P = i, M = !1, L = !1, R = 0, F = e.length; R < F; R++) {
                    d = e[R];
                    var U = d.$$start, q = d.$$end;
                    if (U && (N = ne(t, U, q)), g = void 0, b > d.priority) break;
                    if ($ = d.scope, $ && (d.templateUrl || (w($) ? (ge("new/isolated scope", C || E, d, N), 
                    C = d) : ge("new/isolated scope", C, d, N)), E = E || d), m = d.name, !M && (d.replace && (d.templateUrl || d.template) || d.transclude && !d.$$tlb)) {
                        for (var B, W = R + 1; B = e[W++]; ) if (B.transclude && !B.$$tlb || B.replace && (B.templateUrl || B.template)) {
                            L = !0;
                            break;
                        }
                        M = !0;
                    }
                    if (!d.templateUrl && d.controller && (x = x || $e(), ge("'" + m + "' controller", x[m], d, N), 
                    x[m] = d), $ = d.transclude) if (A = !0, d.$$tlb || (ge("transclusion", T, d, N), 
                    T = d), "element" === $) D = !0, b = d.priority, g = N, N = n.$$element = ii(G.$$createComment(m, n[m])), 
                    t = N[0], Ee(a, z(g), t), g[0].$$parentNode = g[0].parentNode, P = ie(L, g, i, b, j && j.name, {
                        nonTlbTranscludeDirective: T
                    }); else {
                        var Q = $e();
                        if (w($)) {
                            g = [];
                            var Y = $e(), X = $e();
                            o($, function(e, t) {
                                var n = "?" === e.charAt(0);
                                e = n ? e.substring(1) : e, Y[e] = t, Q[t] = null, X[t] = n;
                            }), o(N.contents(), function(e) {
                                var t = Y[Et(H(e))];
                                t ? (X[t] = !0, Q[t] = Q[t] || [], Q[t].push(e)) : g.push(e);
                            }), o(X, function(e, t) {
                                if (!e) throw ho("reqslot", "Required transclusion slot `{0}` was not filled.", t);
                            });
                            for (var J in Q) Q[J] && (Q[J] = ie(L, Q[J], i));
                        } else g = ii(Pe(t)).contents();
                        N.empty(), P = ie(L, g, i, void 0, void 0, {
                            needsNewScope: d.$$isolateScope || d.$$newScope
                        }), P.$$slots = Q;
                    }
                    if (d.template) if (O = !0, ge("template", S, d, N), S = d, $ = _(d.template) ? d.template(N, n) : d.template, 
                    $ = Le($), d.replace) {
                        if (j = d, g = Ae($) ? [] : Ct(ye(d.templateNamespace, $i($))), t = g[0], 1 !== g.length || t.nodeType !== _i) throw ho("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", m, "");
                        Ee(a, N, t);
                        var ee = {
                            $attr: {}
                        }, oe = Z(t, [], ee), le = e.splice(R + 1, e.length - (R + 1));
                        (C || E) && ue(oe, C, E), e = e.concat(oe).concat(le), fe(n, ee), F = e.length;
                    } else N.html($);
                    if (d.templateUrl) O = !0, ge("template", S, d, N), S = d, d.replace && (j = d), 
                    p = de(e.splice(R, e.length - R), N, n, a, A && P, u, l, {
                        controllerDirectives: x,
                        newScopeDirective: E !== d && E,
                        newIsolateScopeDirective: C,
                        templateDirective: S,
                        nonTlbTranscludeDirective: T
                    }), F = e.length; else if (d.compile) try {
                        v = d.compile(N, n, P);
                        var ce = d.$$originalDirective || d;
                        _(v) ? h(null, K(ce, v), U, q) : v && h(K(ce, v.pre), K(ce, v.post), U, q);
                    } catch (e) {
                        r(e, te(N));
                    }
                    d.terminal && (p.terminal = !0, b = Math.max(b, d.priority));
                }
                return p.scope = E && !0 === E.scope, p.transcludeOnThisElement = A, p.templateOnThisElement = O, 
                p.transclude = P, c.hasElementTranscludeDirective = D, p;
            }
            function ae(e, t, n, r) {
                var i;
                if (x(t)) {
                    var a = t.match(C), s = t.substring(a[0].length), u = a[1] || a[3], l = "?" === a[2];
                    if ("^^" === u ? n = n.parent() : (i = r && r[s], i = i && i.instance), !i) {
                        var c = "$" + s + "Controller";
                        i = u ? n.inheritedData(c) : n.data(c);
                    }
                    if (!i && !l) throw ho("ctreq", "Controller '{0}', required by directive '{1}', can't be found!", s, e);
                } else if (gi(t)) {
                    i = [];
                    for (var f = 0, h = t.length; f < h; f++) i[f] = ae(e, t[f], n, r);
                } else w(t) && (i = {}, o(t, function(t, o) {
                    i[o] = ae(e, t, n, r);
                }));
                return i || null;
            }
            function se(e, t, n, r, i, o, a) {
                var s = $e();
                for (var l in r) {
                    var c = r[l], f = {
                        $scope: c === a || c.$$isolateScope ? i : o,
                        $element: e,
                        $attrs: t,
                        $transclude: n
                    }, h = c.controller;
                    "@" === h && (h = t[c.name]);
                    var p = u(h, f, !0, c.controllerAs);
                    s[c.name] = p, e.data("$" + c.name + "Controller", p.instance);
                }
                return s;
            }
            function ue(e, t, n) {
                for (var r = 0, i = e.length; r < i; r++) e[r] = d(e[r], {
                    $$isolateScope: t,
                    $$newScope: n
                });
            }
            function le(e, n, r, o, a, s, u) {
                if (n === a) return null;
                var l = null;
                if (c.hasOwnProperty(n)) for (var f, p = t.get(n + h), m = 0, g = p.length; m < g; m++) if (f = p[m], 
                (y(o) || o > f.priority) && -1 !== f.restrict.indexOf(r)) {
                    if (s && (f = d(f, {
                        $$start: s,
                        $$end: u
                    })), !f.$$bindings) {
                        var v = f.$$bindings = i(f, f.name);
                        w(v.isolateScope) && (f.$$isolateBindings = v.isolateScope);
                    }
                    e.push(f), l = f;
                }
                return l;
            }
            function ce(e) {
                if (c.hasOwnProperty(e)) for (var n, r = t.get(e + h), i = 0, o = r.length; i < o; i++) if (n = r[i], 
                n.multiElement) return !0;
                return !1;
            }
            function fe(e, t) {
                var n = t.$attr, r = e.$attr;
                o(e, function(r, i) {
                    "$" !== i.charAt(0) && (t[i] && t[i] !== r && (r.length ? r += ("style" === i ? ";" : " ") + t[i] : r = t[i]), 
                    e.$set(i, r, !0, n[i]));
                }), o(t, function(t, i) {
                    e.hasOwnProperty(i) || "$" === i.charAt(0) || (e[i] = t, "class" !== i && "style" !== i && (r[i] = n[i]));
                });
            }
            function de(e, t, n, i, s, u, l, c) {
                var f, h, p = [], m = t[0], g = e.shift(), v = d(g, {
                    templateUrl: null,
                    transclude: null,
                    replace: null,
                    $$originalDirective: g
                }), $ = _(g.templateUrl) ? g.templateUrl(t, n) : g.templateUrl, y = g.templateNamespace;
                return t.empty(), a($).then(function(r) {
                    var a, d, b, E;
                    if (r = Le(r), g.replace) {
                        if (b = Ae(r) ? [] : Ct(ye(y, $i(r))), a = b[0], 1 !== b.length || a.nodeType !== _i) throw ho("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", g.name, $);
                        d = {
                            $attr: {}
                        }, Ee(i, t, a);
                        var x = Z(a, [], d);
                        w(g.scope) && ue(x, !0), e = x.concat(e), fe(n, d);
                    } else a = m, t.html(r);
                    for (e.unshift(v), f = oe(e, a, n, s, t, g, u, l, c), o(i, function(e, n) {
                        e === a && (i[n] = t[0]);
                    }), h = Y(t[0].childNodes, s); p.length; ) {
                        var C = p.shift(), S = p.shift(), T = p.shift(), _ = p.shift(), A = t[0];
                        if (!C.$$destroyed) {
                            if (S !== m) {
                                var O = S.className;
                                c.hasElementTranscludeDirective && g.replace || (A = Pe(a)), Ee(T, ii(S), A), q(ii(A), O);
                            }
                            E = f.transcludeOnThisElement ? J(C, f.transclude, _) : _, f(h, C, A, i, E);
                        }
                    }
                    p = null;
                }).catch(function(e) {
                    T(e) && r(e);
                }), function(e, t, n, r, i) {
                    var o = i;
                    t.$$destroyed || (p ? p.push(t, n, r, o) : (f.transcludeOnThisElement && (o = J(t, f.transclude, i)), 
                    f(h, t, n, r, o)));
                };
            }
            function me(e, t) {
                var n = t.priority - e.priority;
                return 0 !== n ? n : e.name !== t.name ? e.name < t.name ? -1 : 1 : e.index - t.index;
            }
            function ge(e, t, n, r) {
                function i(e) {
                    return e ? " (module: " + e + ")" : "";
                }
                if (t) throw ho("multidir", "Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}", t.name, i(t.$$moduleName), n.name, i(n.$$moduleName), e, te(r));
            }
            function ve(e, t) {
                var r = n(t, !0);
                r && e.push({
                    priority: 0,
                    compile: function(e) {
                        var t = e.parent(), n = !!t.length;
                        return n && G.$$addBindingClass(t), function(e, t) {
                            var i = t.parent();
                            n || G.$$addBindingClass(i), G.$$addBindingInfo(i, r.expressions), e.$watch(r, function(e) {
                                t[0].nodeValue = e;
                            });
                        };
                    }
                });
            }
            function ye(t, n) {
                switch (t = Zr(t || "html")) {
                  case "svg":
                  case "math":
                    var r = e.document.createElement("div");
                    return r.innerHTML = "<" + t + ">" + n + "</" + t + ">", r.childNodes[0].childNodes;

                  default:
                    return n;
                }
            }
            function be(e, t) {
                if ("srcdoc" === t) return v.HTML;
                var n = H(e);
                if ("src" === t || "ngSrc" === t) {
                    if (-1 === [ "img", "video", "audio", "source", "track" ].indexOf(n)) return v.RESOURCE_URL;
                } else if ("xlinkHref" === t || "form" === n && "action" === t || "link" === n && "href" === t) return v.RESOURCE_URL;
            }
            function we(e, t, r, i, o) {
                var a = be(e, i), s = !o, u = E[i] || o, l = n(r, s, a, u);
                if (l) {
                    if ("multiple" === i && "select" === H(e)) throw ho("selmulti", "Binding to the 'multiple' attribute is not supported. Element: {0}", te(e));
                    if (S.test(i)) throw ho("nodomevents", "Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");
                    t.push({
                        priority: 100,
                        compile: function() {
                            return {
                                pre: function(e, t, o) {
                                    var s = o.$$observers || (o.$$observers = $e()), c = o[i];
                                    c !== r && (l = c && n(c, !0, a, u), r = c), l && (o[i] = l(e), (s[i] || (s[i] = [])).$$inter = !0, 
                                    (o.$$observers && o.$$observers[i].$$scope || e).$watch(l, function(e, t) {
                                        "class" === i && e !== t ? o.$updateClass(e, t) : o.$set(i, e);
                                    }));
                                }
                            };
                        }
                    });
                }
            }
            function Ee(t, n, r) {
                var i, o, a = n[0], s = n.length, u = a.parentNode;
                if (t) for (i = 0, o = t.length; i < o; i++) if (t[i] === a) {
                    t[i++] = r;
                    for (var l = i, c = l + s - 1, f = t.length; l < f; l++, c++) c < f ? t[l] = t[c] : delete t[l];
                    t.length -= s - 1, t.context === a && (t.context = r);
                    break;
                }
                u && u.replaceChild(r, a);
                var h = e.document.createDocumentFragment();
                for (i = 0; i < s; i++) h.appendChild(n[i]);
                for (ii.hasData(a) && (ii.data(r, ii.data(a)), ii(a).off("$destroy")), ii.cleanData(h.querySelectorAll("*")), 
                i = 1; i < s; i++) delete n[i];
                n[0] = r, n.length = 1;
            }
            function xe(e, t) {
                return f(function() {
                    return e.apply(null, arguments);
                }, e, t);
            }
            function Ce(e, t, n, i, o, a) {
                try {
                    e(t, n, i, o, a);
                } catch (e) {
                    r(e, te(n));
                }
            }
            function Se(e, t) {
                if (D) throw ho("missingattr", "Attribute '{0}' of '{1}' is non-optional and must be set!", e, t);
            }
            function Te(e, t, r, i, a) {
                function u(t, n, i) {
                    _(r.$onChanges) && !B(n, i) && (_e || (e.$$postDigest(R), _e = []), c || (c = {}, 
                    _e.push(l)), c[t] && (i = c[t].previousValue), c[t] = new wt(i, n));
                }
                function l() {
                    r.$onChanges(c), c = void 0;
                }
                var c, f = [], h = {};
                return o(i, function(i, o) {
                    var l, c, p, d, g, v = i.attrName, $ = i.optional, y = i.mode;
                    switch (y) {
                      case "@":
                        $ || Jr.call(t, v) || (Se(v, a.name), r[o] = t[v] = void 0), g = t.$observe(v, function(e) {
                            if (x(e) || j(e)) {
                                var t = r[o];
                                u(o, e, t), r[o] = e;
                            }
                        }), t.$$observers[v].$$scope = e, l = t[v], x(l) ? r[o] = n(l)(e) : j(l) && (r[o] = l), 
                        h[o] = new wt(po, r[o]), f.push(g);
                        break;

                      case "=":
                        if (!Jr.call(t, v)) {
                            if ($) break;
                            Se(v, a.name), t[v] = void 0;
                        }
                        if ($ && !t[v]) break;
                        c = s(t[v]), d = c.literal ? W : B, p = c.assign || function() {
                            throw l = r[o] = c(e), ho("nonassign", "Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!", t[v], v, a.name);
                        }, l = r[o] = c(e);
                        var b = function(t) {
                            return d(t, r[o]) || (d(t, l) ? p(e, t = r[o]) : r[o] = t), l = t;
                        };
                        b.$stateful = !0, g = i.collection ? e.$watchCollection(t[v], b) : e.$watch(s(t[v], b), null, c.literal), 
                        f.push(g);
                        break;

                      case "<":
                        if (!Jr.call(t, v)) {
                            if ($) break;
                            Se(v, a.name), t[v] = void 0;
                        }
                        if ($ && !t[v]) break;
                        c = s(t[v]);
                        var w = c.literal, E = r[o] = c(e);
                        h[o] = new wt(po, r[o]), g = e.$watch(c, function(e, t) {
                            if (t === e) {
                                if (t === E || w && W(t, E)) return;
                                t = E;
                            }
                            u(o, e, t), r[o] = e;
                        }, w), f.push(g);
                        break;

                      case "&":
                        if ($ || Jr.call(t, v) || Se(v, a.name), (c = t.hasOwnProperty(v) ? s(t[v]) : m) === m && $) break;
                        r[o] = function(t) {
                            return c(e, t);
                        };
                    }
                }), {
                    initialChanges: h,
                    removeWatches: f.length && function() {
                        for (var e = 0, t = f.length; e < t; ++e) f[e]();
                    }
                };
            }
            var _e, Oe = /^\w/, ke = e.document.createElement("div"), Ie = P, De = M, Ne = N;
            V.prototype = {
                $normalize: Et,
                $addClass: function(e) {
                    e && e.length > 0 && A.addClass(this.$$element, e);
                },
                $removeClass: function(e) {
                    e && e.length > 0 && A.removeClass(this.$$element, e);
                },
                $updateClass: function(e, t) {
                    var n = xt(e, t);
                    n && n.length && A.addClass(this.$$element, n);
                    var r = xt(t, e);
                    r && r.length && A.removeClass(this.$$element, r);
                },
                $set: function(e, t, n, i) {
                    var a, s = this.$$element[0], u = Xe(s, e), l = Je(e), c = e;
                    if (u ? (this.$$element.prop(e, t), i = u) : l && (this[l] = t, c = l), this[e] = t, 
                    i ? this.$attr[e] = i : (i = this.$attr[e]) || (this.$attr[e] = i = he(e, "-")), 
                    "a" === (a = H(this.$$element)) && ("href" === e || "xlinkHref" === e) || "img" === a && "src" === e) this[e] = t = L(t, "src" === e); else if ("img" === a && "srcset" === e && b(t)) {
                        for (var f = "", h = $i(t), p = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/, d = /\s/.test(h) ? p : /(,)/, m = h.split(d), g = Math.floor(m.length / 2), v = 0; v < g; v++) {
                            var $ = 2 * v;
                            f += L($i(m[$]), !0), f += " " + $i(m[$ + 1]);
                        }
                        var w = $i(m[2 * v]).split(/\s/);
                        f += L($i(w[0]), !0), 2 === w.length && (f += " " + $i(w[1])), this[e] = t = f;
                    }
                    !1 !== n && (null === t || y(t) ? this.$$element.removeAttr(i) : Oe.test(i) ? this.$$element.attr(i, t) : F(this.$$element[0], i, t));
                    var E = this.$$observers;
                    E && o(E[c], function(e) {
                        try {
                            e(t);
                        } catch (e) {
                            r(e);
                        }
                    });
                },
                $observe: function(e, t) {
                    var n = this, r = n.$$observers || (n.$$observers = $e()), i = r[e] || (r[e] = []);
                    return i.push(t), l.$evalAsync(function() {
                        i.$$inter || !n.hasOwnProperty(e) || y(n[e]) || t(n[e]);
                    }), function() {
                        U(i, t);
                    };
                }
            };
            var je = n.startSymbol(), Me = n.endSymbol(), Le = "{{" === je && "}}" === Me ? g : function(e) {
                return e.replace(/\{\{/g, je).replace(/}}/g, Me);
            }, Re = /^ngAttr[A-Z]/, Ve = /^(.+)Start$/;
            return G.$$addBindingInfo = O ? function(e, t) {
                var n = e.data("$binding") || [];
                gi(t) ? n = n.concat(t) : n.push(t), e.data("$binding", n);
            } : m, G.$$addBindingClass = O ? function(e) {
                q(e, "ng-binding");
            } : m, G.$$addScopeInfo = O ? function(e, t, n, r) {
                var i = n ? r ? "$isolateScopeNoTemplate" : "$isolateScope" : "$scope";
                e.data(i, t);
            } : m, G.$$addScopeClass = O ? function(e, t) {
                q(e, t ? "ng-isolate-scope" : "ng-scope");
            } : m, G.$$createComment = function(t, n) {
                var r = "";
                return O && (r = " " + (t || "") + ": ", n && (r += n + " ")), e.document.createComment(r);
            }, G;
        } ];
    }
    function wt(e, t) {
        this.previousValue = e, this.currentValue = t;
    }
    function Et(e) {
        return e.replace(mo, "").replace(go, Te);
    }
    function xt(e, t) {
        var n = "", r = e.split(/\s+/), i = t.split(/\s+/);
        e: for (var o = 0; o < r.length; o++) {
            for (var a = r[o], s = 0; s < i.length; s++) if (a === i[s]) continue e;
            n += (n.length > 0 ? " " : "") + a;
        }
        return n;
    }
    function Ct(e) {
        e = ii(e);
        var t = e.length;
        if (t <= 1) return e;
        for (;t--; ) {
            var n = e[t];
            (n.nodeType === Oi || n.nodeType === Ai && "" === n.nodeValue.trim()) && ui.call(e, t, 1);
        }
        return e;
    }
    function St(e, t) {
        if (t && x(t)) return t;
        if (x(e)) {
            var n = $o.exec(e);
            if (n) return n[3];
        }
    }
    function Tt() {
        var e = {}, t = !1;
        this.has = function(t) {
            return e.hasOwnProperty(t);
        }, this.register = function(t, n) {
            me(t, "controller"), w(t) ? f(e, t) : e[t] = n;
        }, this.allowGlobals = function() {
            t = !0;
        }, this.$get = [ "$injector", "$window", function(n, i) {
            function o(e, t, n, i) {
                if (!e || !w(e.$scope)) throw r("$controller")("noscp", "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.", i, t);
                e.$scope[t] = n;
            }
            return function(r, a, s, u) {
                var l, c, h, p;
                if (s = !0 === s, u && x(u) && (p = u), x(r)) {
                    if (!(c = r.match($o))) throw vo("ctrlfmt", "Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.", r);
                    if (h = c[1], p = p || c[3], !(r = e.hasOwnProperty(h) ? e[h] : ge(a.$scope, h, !0) || (t ? ge(i, h, !0) : void 0))) throw vo("ctrlreg", "The controller with the name '{0}' is not registered.", h);
                    de(r, h, !0);
                }
                if (s) {
                    var d = (gi(r) ? r[r.length - 1] : r).prototype;
                    return l = Object.create(d || null), p && o(a, p, l, h || r.name), f(function() {
                        var e = n.invoke(r, l, a, h);
                        return e !== l && (w(e) || _(e)) && (l = e, p && o(a, p, l, h || r.name)), l;
                    }, {
                        instance: l,
                        identifier: p
                    });
                }
                return l = n.instantiate(r, a, h), p && o(a, p, l, h || r.name), l;
            };
        } ];
    }
    function _t() {
        this.$get = [ "$window", function(e) {
            return ii(e.document);
        } ];
    }
    function At() {
        this.$get = [ "$document", "$rootScope", function(e, t) {
            function n() {
                i = r.hidden;
            }
            var r = e[0], i = r && r.hidden;
            return e.on("visibilitychange", n), t.$on("$destroy", function() {
                e.off("visibilitychange", n);
            }), function() {
                return i;
            };
        } ];
    }
    function Ot() {
        this.$get = [ "$log", function(e) {
            return function(t, n) {
                e.error.apply(e, arguments);
            };
        } ];
    }
    function kt(e) {
        return w(e) ? S(e) ? e.toISOString() : Y(e) : e;
    }
    function It() {
        this.$get = function() {
            return function(e) {
                if (!e) return "";
                var t = [];
                return a(e, function(e, n) {
                    null === e || y(e) || _(e) || (gi(e) ? o(e, function(e) {
                        t.push(ae(n) + "=" + ae(kt(e)));
                    }) : t.push(ae(n) + "=" + ae(kt(e))));
                }), t.join("&");
            };
        };
    }
    function Dt() {
        this.$get = function() {
            return function(e) {
                function t(e, r, i) {
                    null === e || y(e) || (gi(e) ? o(e, function(e, n) {
                        t(e, r + "[" + (w(e) ? n : "") + "]");
                    }) : w(e) && !S(e) ? a(e, function(e, n) {
                        t(e, r + (i ? "" : "[") + n + (i ? "" : "]"));
                    }) : n.push(ae(r) + "=" + ae(kt(e))));
                }
                if (!e) return "";
                var n = [];
                return t(e, "", !0), n.join("&");
            };
        };
    }
    function Nt(e, t) {
        if (x(e)) {
            var n = e.replace(Co, "").trim();
            if (n) {
                var r = t("Content-Type"), i = r && 0 === r.indexOf(bo);
                if (i || jt(n)) try {
                    e = X(n);
                } catch (t) {
                    if (!i) return e;
                    throw So("baddata", 'Data must be a valid JSON object. Received: "{0}". Parse error: "{1}"', e, t);
                }
            }
        }
        return e;
    }
    function jt(e) {
        var t = e.match(Eo);
        return t && xo[t[0]].test(e);
    }
    function Pt(e) {
        function t(e, t) {
            e && (r[e] = r[e] ? r[e] + ", " + t : t);
        }
        var n, r = $e();
        return x(e) ? o(e.split("\n"), function(e) {
            n = e.indexOf(":"), t(Zr($i(e.substr(0, n))), $i(e.substr(n + 1)));
        }) : w(e) && o(e, function(e, n) {
            t(Zr(n), $i(e));
        }), r;
    }
    function Mt(e) {
        var t;
        return function(n) {
            if (t || (t = Pt(e)), n) {
                var r = t[Zr(n)];
                return void 0 === r && (r = null), r;
            }
            return t;
        };
    }
    function Lt(e, t, n, r) {
        return _(r) ? r(e, t, n) : (o(r, function(r) {
            e = r(e, t, n);
        }), e);
    }
    function Rt(e) {
        return 200 <= e && e < 300;
    }
    function Vt() {
        var e = this.defaults = {
            transformResponse: [ Nt ],
            transformRequest: [ function(e) {
                return !w(e) || I(e) || N(e) || D(e) ? e : Y(e);
            } ],
            headers: {
                common: {
                    Accept: "application/json, text/plain, */*"
                },
                post: we(wo),
                put: we(wo),
                patch: we(wo)
            },
            xsrfCookieName: "XSRF-TOKEN",
            xsrfHeaderName: "X-XSRF-TOKEN",
            paramSerializer: "$httpParamSerializer",
            jsonpCallbackParam: "callback"
        }, t = !1;
        this.useApplyAsync = function(e) {
            return b(e) ? (t = !!e, this) : t;
        };
        var n = this.interceptors = [];
        this.$get = [ "$browser", "$httpBackend", "$$cookieReader", "$cacheFactory", "$rootScope", "$q", "$injector", "$sce", function(i, a, s, u, l, c, h, p) {
            function d(t) {
                function n(e, t) {
                    for (var n = 0, r = t.length; n < r; ) {
                        var i = t[n++], o = t[n++];
                        e = e.then(i, o);
                    }
                    return t.length = 0, e;
                }
                function a() {
                    i.$$completeOutstandingRequest(m);
                }
                function s(e, t) {
                    var n, r = {};
                    return o(e, function(e, i) {
                        _(e) ? null != (n = e(t)) && (r[i] = n) : r[i] = e;
                    }), r;
                }
                function u(t) {
                    var n = t.headers, r = Lt(t.data, Mt(n), void 0, t.transformRequest);
                    return y(r) && o(n, function(e, t) {
                        "content-type" === Zr(t) && delete n[t];
                    }), y(t.withCredentials) && !y(e.withCredentials) && (t.withCredentials = e.withCredentials), 
                    g(t, r).then(l, l);
                }
                function l(e) {
                    var t = f({}, e);
                    return t.data = Lt(e.data, e.headers, e.status, d.transformResponse), Rt(e.status) ? t : c.reject(t);
                }
                if (!w(t)) throw r("$http")("badreq", "Http request configuration must be an object.  Received: {0}", t);
                if (!x(p.valueOf(t.url))) throw r("$http")("badreq", "Http request configuration url must be a string or a $sce trusted object.  Received: {0}", t.url);
                var d = f({
                    method: "get",
                    transformRequest: e.transformRequest,
                    transformResponse: e.transformResponse,
                    paramSerializer: e.paramSerializer,
                    jsonpCallbackParam: e.jsonpCallbackParam
                }, t);
                d.headers = function(t) {
                    var n, r, i, o = e.headers, a = f({}, t.headers);
                    o = f({}, o.common, o[Zr(t.method)]);
                    e: for (n in o) {
                        r = Zr(n);
                        for (i in a) if (Zr(i) === r) continue e;
                        a[n] = o[n];
                    }
                    return s(a, we(t));
                }(t), d.method = ei(d.method), d.paramSerializer = x(d.paramSerializer) ? h.get(d.paramSerializer) : d.paramSerializer, 
                i.$$incOutstandingRequestCount();
                var v = [], $ = [], b = c.resolve(d);
                return o(C, function(e) {
                    (e.request || e.requestError) && v.unshift(e.request, e.requestError), (e.response || e.responseError) && $.push(e.response, e.responseError);
                }), b = n(b, v), b = b.then(u), b = n(b, $), b = b.finally(a);
            }
            function g(n, r) {
                function i(e) {
                    if (e) {
                        var n = {};
                        return o(e, function(e, r) {
                            n[r] = function(n) {
                                function r() {
                                    e(n);
                                }
                                t ? l.$applyAsync(r) : l.$$phase ? r() : l.$apply(r);
                            };
                        }), n;
                    }
                }
                function u(e, n, r, i, o) {
                    function a() {
                        f(n, e, r, i, o);
                    }
                    g && (Rt(e) ? g.put(O, [ e, n, Pt(r), i, o ]) : g.remove(O)), t ? l.$applyAsync(a) : (a(), 
                    l.$$phase || l.$apply());
                }
                function f(e, t, r, i, o) {
                    t = t >= -1 ? t : 0, (Rt(t) ? S.resolve : S.reject)({
                        data: e,
                        status: t,
                        headers: Mt(r),
                        config: n,
                        statusText: i,
                        xhrStatus: o
                    });
                }
                function h(e) {
                    f(e.data, e.status, we(e.headers()), e.statusText, e.xhrStatus);
                }
                function m() {
                    var e = d.pendingRequests.indexOf(n);
                    -1 !== e && d.pendingRequests.splice(e, 1);
                }
                var g, C, S = c.defer(), T = S.promise, _ = n.headers, A = "jsonp" === Zr(n.method), O = n.url;
                if (A ? O = p.getTrustedResourceUrl(O) : x(O) || (O = p.valueOf(O)), O = v(O, n.paramSerializer(n.params)), 
                A && (O = $(O, n.jsonpCallbackParam)), d.pendingRequests.push(n), T.then(m, m), 
                !n.cache && !e.cache || !1 === n.cache || "GET" !== n.method && "JSONP" !== n.method || (g = w(n.cache) ? n.cache : w(e.cache) ? e.cache : E), 
                g && (C = g.get(O), b(C) ? P(C) ? C.then(h, h) : gi(C) ? f(C[1], C[0], we(C[2]), C[3], C[4]) : f(C, 200, {}, "OK", "complete") : g.put(O, T)), 
                y(C)) {
                    var k = qn(n.url) ? s()[n.xsrfCookieName || e.xsrfCookieName] : void 0;
                    k && (_[n.xsrfHeaderName || e.xsrfHeaderName] = k), a(n.method, O, r, u, _, n.timeout, n.withCredentials, n.responseType, i(n.eventHandlers), i(n.uploadEventHandlers));
                }
                return T;
            }
            function v(e, t) {
                return t.length > 0 && (e += (-1 === e.indexOf("?") ? "?" : "&") + t), e;
            }
            function $(e, t) {
                if (/[&?][^=]+=JSON_CALLBACK/.test(e)) throw So("badjsonp", 'Illegal use of JSON_CALLBACK in url, "{0}"', e);
                if (new RegExp("[&?]" + t + "=").test(e)) throw So("badjsonp", 'Illegal use of callback param, "{0}", in url, "{1}"', t, e);
                return e += (-1 === e.indexOf("?") ? "?" : "&") + t + "=JSON_CALLBACK";
            }
            var E = u("$http");
            e.paramSerializer = x(e.paramSerializer) ? h.get(e.paramSerializer) : e.paramSerializer;
            var C = [];
            return o(n, function(e) {
                C.unshift(x(e) ? h.get(e) : h.invoke(e));
            }), d.pendingRequests = [], function(e) {
                o(arguments, function(e) {
                    d[e] = function(t, n) {
                        return d(f({}, n || {}, {
                            method: e,
                            url: t
                        }));
                    };
                });
            }("get", "delete", "head", "jsonp"), function(e) {
                o(arguments, function(e) {
                    d[e] = function(t, n, r) {
                        return d(f({}, r || {}, {
                            method: e,
                            url: t,
                            data: n
                        }));
                    };
                });
            }("post", "put", "patch"), d.defaults = e, d;
        } ];
    }
    function Ht() {
        this.$get = function() {
            return function() {
                return new e.XMLHttpRequest();
            };
        };
    }
    function Ft() {
        this.$get = [ "$browser", "$jsonpCallbacks", "$document", "$xhrFactory", function(e, t, n, r) {
            return Ut(e, r, e.defer, t, n[0]);
        } ];
    }
    function Ut(e, t, n, r, i) {
        function a(e, t, n) {
            e = e.replace("JSON_CALLBACK", t);
            var o = i.createElement("script"), a = null;
            return o.type = "text/javascript", o.src = e, o.async = !0, a = function(e) {
                o.removeEventListener("load", a), o.removeEventListener("error", a), i.body.removeChild(o), 
                o = null;
                var s = -1, u = "unknown";
                e && ("load" !== e.type || r.wasCalled(t) || (e = {
                    type: "error"
                }), u = e.type, s = "error" === e.type ? 404 : 200), n && n(s, u);
            }, o.addEventListener("load", a), o.addEventListener("error", a), i.body.appendChild(o), 
            a;
        }
        return function(i, s, u, l, c, f, h, p, d, m) {
            function g() {
                w && w(), E && E.abort();
            }
            function v(e, t, r, i, o, a) {
                b(T) && n.cancel(T), w = E = null, e(t, r, i, o, a);
            }
            if (s = s || e.url(), "jsonp" === Zr(i)) var $ = r.createCallback(s), w = a(s, $, function(e, t) {
                var n = 200 === e && r.getResponse($);
                v(l, e, n, "", t, "complete"), r.removeCallback($);
            }); else {
                var E = t(i, s);
                E.open(i, s, !0), o(c, function(e, t) {
                    b(e) && E.setRequestHeader(t, e);
                }), E.onload = function() {
                    var e = E.statusText || "", t = "response" in E ? E.response : E.responseText, n = 1223 === E.status ? 204 : E.status;
                    0 === n && (n = t ? 200 : "file" === Un(s).protocol ? 404 : 0), v(l, n, t, E.getAllResponseHeaders(), e, "complete");
                };
                var x = function() {
                    v(l, -1, null, null, "", "error");
                }, C = function() {
                    v(l, -1, null, null, "", "abort");
                }, S = function() {
                    v(l, -1, null, null, "", "timeout");
                };
                if (E.onerror = x, E.onabort = C, E.ontimeout = S, o(d, function(e, t) {
                    E.addEventListener(t, e);
                }), o(m, function(e, t) {
                    E.upload.addEventListener(t, e);
                }), h && (E.withCredentials = !0), p) try {
                    E.responseType = p;
                } catch (e) {
                    if ("json" !== p) throw e;
                }
                E.send(y(u) ? null : u);
            }
            if (f > 0) var T = n(g, f); else P(f) && f.then(g);
        };
    }
    function qt() {
        var e = "{{", t = "}}";
        this.startSymbol = function(t) {
            return t ? (e = t, this) : e;
        }, this.endSymbol = function(e) {
            return e ? (t = e, this) : t;
        }, this.$get = [ "$parse", "$exceptionHandler", "$sce", function(n, r, i) {
            function o(e) {
                return "\\\\\\" + e;
            }
            function a(n) {
                return n.replace(h, e).replace(p, t);
            }
            function s(e, t, n, r) {
                var i = e.$watch(function(e) {
                    return i(), r(e);
                }, t, n);
                return i;
            }
            function u(o, u, h, p) {
                function d(e) {
                    try {
                        return e = k(e), p && !b(e) ? e : ye(e);
                    } catch (e) {
                        r(To.interr(o, e));
                    }
                }
                if (!o.length || -1 === o.indexOf(e)) {
                    var m;
                    if (!u) {
                        m = v(a(o)), m.exp = o, m.expressions = [], m.$$watchDelegate = s;
                    }
                    return m;
                }
                p = !!p;
                for (var g, $, w, E = 0, x = [], C = [], S = o.length, T = [], A = []; E < S; ) {
                    if (-1 === (g = o.indexOf(e, E)) || -1 === ($ = o.indexOf(t, g + l))) {
                        E !== S && T.push(a(o.substring(E)));
                        break;
                    }
                    E !== g && T.push(a(o.substring(E, g))), w = o.substring(g + l, $), x.push(w), C.push(n(w, d)), 
                    E = $ + c, A.push(T.length), T.push("");
                }
                if (h && T.length > 1 && To.throwNoconcat(o), !u || x.length) {
                    var O = function(e) {
                        for (var t = 0, n = x.length; t < n; t++) {
                            if (p && y(e[t])) return;
                            T[A[t]] = e[t];
                        }
                        return T.join("");
                    }, k = function(e) {
                        return h ? i.getTrusted(h, e) : i.valueOf(e);
                    };
                    return f(function(e) {
                        var t = 0, n = x.length, i = new Array(n);
                        try {
                            for (;t < n; t++) i[t] = C[t](e);
                            return O(i);
                        } catch (e) {
                            r(To.interr(o, e));
                        }
                    }, {
                        exp: o,
                        expressions: x,
                        $$watchDelegate: function(e, t) {
                            var n;
                            return e.$watchGroup(C, function(r, i) {
                                var o = O(r);
                                _(t) && t.call(this, o, r !== i ? n : o, e), n = o;
                            });
                        }
                    });
                }
            }
            var l = e.length, c = t.length, h = new RegExp(e.replace(/./g, o), "g"), p = new RegExp(t.replace(/./g, o), "g");
            return u.startSymbol = function() {
                return e;
            }, u.endSymbol = function() {
                return t;
            }, u;
        } ];
    }
    function Bt() {
        this.$get = [ "$rootScope", "$window", "$q", "$$q", "$browser", function(e, t, n, r, i) {
            function o(o, s, u, l) {
                function c() {
                    f ? o.apply(null, h) : o(m);
                }
                var f = arguments.length > 4, h = f ? z(arguments, 4) : [], p = t.setInterval, d = t.clearInterval, m = 0, g = b(l) && !l, v = (g ? r : n).defer(), $ = v.promise;
                return u = b(u) ? u : 0, $.$$intervalId = p(function() {
                    g ? i.defer(c) : e.$evalAsync(c), v.notify(m++), u > 0 && m >= u && (v.resolve(m), 
                    d($.$$intervalId), delete a[$.$$intervalId]), g || e.$apply();
                }, s), a[$.$$intervalId] = v, $;
            }
            var a = {};
            return o.cancel = function(e) {
                return !!(e && e.$$intervalId in a) && (On(a[e.$$intervalId].promise), a[e.$$intervalId].reject("canceled"), 
                t.clearInterval(e.$$intervalId), delete a[e.$$intervalId], !0);
            }, o;
        } ];
    }
    function Wt(e) {
        for (var t = e.split("/"), n = t.length; n--; ) t[n] = oe(t[n]);
        return t.join("/");
    }
    function Gt(e, t) {
        var n = Un(e);
        t.$$protocol = n.protocol, t.$$host = n.hostname, t.$$port = p(n.port) || Oo[n.protocol] || null;
    }
    function zt(e, t) {
        if (Io.test(e)) throw ko("badpath", 'Invalid url "{0}".', e);
        var n = "/" !== e.charAt(0);
        n && (e = "/" + e);
        var r = Un(e);
        t.$$path = decodeURIComponent(n && "/" === r.pathname.charAt(0) ? r.pathname.substring(1) : r.pathname), 
        t.$$search = re(r.search), t.$$hash = decodeURIComponent(r.hash), t.$$path && "/" !== t.$$path.charAt(0) && (t.$$path = "/" + t.$$path);
    }
    function Kt(e, t) {
        return e.slice(0, t.length) === t;
    }
    function Qt(e, t) {
        if (Kt(t, e)) return t.substr(e.length);
    }
    function Yt(e) {
        var t = e.indexOf("#");
        return -1 === t ? e : e.substr(0, t);
    }
    function Xt(e) {
        return e.replace(/(#.+)|#$/, "$1");
    }
    function Jt(e) {
        return e.substr(0, Yt(e).lastIndexOf("/") + 1);
    }
    function Zt(e) {
        return e.substring(0, e.indexOf("/", e.indexOf("//") + 2));
    }
    function en(e, t, n) {
        this.$$html5 = !0, n = n || "", Gt(e, this), this.$$parse = function(e) {
            var n = Qt(t, e);
            if (!x(n)) throw ko("ipthprfx", 'Invalid url "{0}", missing path prefix "{1}".', e, t);
            zt(n, this), this.$$path || (this.$$path = "/"), this.$$compose();
        }, this.$$compose = function() {
            var e = ie(this.$$search), n = this.$$hash ? "#" + oe(this.$$hash) : "";
            this.$$url = Wt(this.$$path) + (e ? "?" + e : "") + n, this.$$absUrl = t + this.$$url.substr(1), 
            this.$$urlUpdatedByLocation = !0;
        }, this.$$parseLinkUrl = function(r, i) {
            if (i && "#" === i[0]) return this.hash(i.slice(1)), !0;
            var o, a, s;
            return b(o = Qt(e, r)) ? (a = o, s = n && b(o = Qt(n, o)) ? t + (Qt("/", o) || o) : e + a) : b(o = Qt(t, r)) ? s = t + o : t === r + "/" && (s = t), 
            s && this.$$parse(s), !!s;
        };
    }
    function tn(e, t, n) {
        Gt(e, this), this.$$parse = function(r) {
            var i, o = Qt(e, r) || Qt(t, r);
            y(o) || "#" !== o.charAt(0) ? this.$$html5 ? i = o : (i = "", y(o) && (e = r, this.replace())) : (i = Qt(n, o), 
            y(i) && (i = o)), zt(i, this), this.$$path = function(e, t, n) {
                var r, i = /^\/[A-Z]:(\/.*)/;
                return Kt(t, n) && (t = t.replace(n, "")), i.exec(t) ? e : (r = i.exec(e), r ? r[1] : e);
            }(this.$$path, i, e), this.$$compose();
        }, this.$$compose = function() {
            var t = ie(this.$$search), r = this.$$hash ? "#" + oe(this.$$hash) : "";
            this.$$url = Wt(this.$$path) + (t ? "?" + t : "") + r, this.$$absUrl = e + (this.$$url ? n + this.$$url : ""), 
            this.$$urlUpdatedByLocation = !0;
        }, this.$$parseLinkUrl = function(t, n) {
            return Yt(e) === Yt(t) && (this.$$parse(t), !0);
        };
    }
    function nn(e, t, n) {
        this.$$html5 = !0, tn.apply(this, arguments), this.$$parseLinkUrl = function(r, i) {
            if (i && "#" === i[0]) return this.hash(i.slice(1)), !0;
            var o, a;
            return e === Yt(r) ? o = r : (a = Qt(t, r)) ? o = e + n + a : t === r + "/" && (o = t), 
            o && this.$$parse(o), !!o;
        }, this.$$compose = function() {
            var t = ie(this.$$search), r = this.$$hash ? "#" + oe(this.$$hash) : "";
            this.$$url = Wt(this.$$path) + (t ? "?" + t : "") + r, this.$$absUrl = e + n + this.$$url, 
            this.$$urlUpdatedByLocation = !0;
        };
    }
    function rn(e) {
        return function() {
            return this[e];
        };
    }
    function on(e, t) {
        return function(n) {
            return y(n) ? this[e] : (this[e] = t(n), this.$$compose(), this);
        };
    }
    function an() {
        var e = "!", t = {
            enabled: !1,
            requireBase: !0,
            rewriteLinks: !0
        };
        this.hashPrefix = function(t) {
            return b(t) ? (e = t, this) : e;
        }, this.html5Mode = function(e) {
            return j(e) ? (t.enabled = e, this) : w(e) ? (j(e.enabled) && (t.enabled = e.enabled), 
            j(e.requireBase) && (t.requireBase = e.requireBase), (j(e.rewriteLinks) || x(e.rewriteLinks)) && (t.rewriteLinks = e.rewriteLinks), 
            this) : t;
        }, this.$get = [ "$rootScope", "$browser", "$sniffer", "$rootElement", "$window", function(n, r, i, o, a) {
            function s(e, t, n) {
                var i = l.url(), o = l.$$state;
                try {
                    r.url(e, t, n), l.$$state = r.state();
                } catch (e) {
                    throw l.url(i), l.$$state = o, e;
                }
            }
            function u(e, t) {
                n.$broadcast("$locationChangeSuccess", l.absUrl(), e, l.$$state, t);
            }
            var l, c, f, h = r.baseHref(), p = r.url();
            if (t.enabled) {
                if (!h && t.requireBase) throw ko("nobase", "$location in HTML5 mode requires a <base> tag to be present!");
                f = Zt(p) + (h || "/"), c = i.history ? en : nn;
            } else f = Yt(p), c = tn;
            var d = Jt(f);
            l = new c(f, d, "#" + e), l.$$parseLinkUrl(p, p), l.$$state = r.state();
            var m = /^\s*(javascript|mailto):/i;
            o.on("click", function(e) {
                var i = t.rewriteLinks;
                if (i && !e.ctrlKey && !e.metaKey && !e.shiftKey && 2 !== e.which && 2 !== e.button) {
                    for (var s = ii(e.target); "a" !== H(s[0]); ) if (s[0] === o[0] || !(s = s.parent())[0]) return;
                    if (!x(i) || !y(s.attr(i))) {
                        var u = s.prop("href"), c = s.attr("href") || s.attr("xlink:href");
                        w(u) && "[object SVGAnimatedString]" === u.toString() && (u = Un(u.animVal).href), 
                        m.test(u) || !u || s.attr("target") || e.isDefaultPrevented() || l.$$parseLinkUrl(u, c) && (e.preventDefault(), 
                        l.absUrl() !== r.url() && (n.$apply(), a.angular["ff-684208-preventDefault"] = !0));
                    }
                }
            }), Xt(l.absUrl()) !== Xt(p) && r.url(l.absUrl(), !0);
            var g = !0;
            return r.onUrlChange(function(e, t) {
                if (!Kt(e, d)) return void (a.location.href = e);
                n.$evalAsync(function() {
                    var r, i = l.absUrl(), o = l.$$state;
                    e = Xt(e), l.$$parse(e), l.$$state = t, r = n.$broadcast("$locationChangeStart", e, i, t, o).defaultPrevented, 
                    l.absUrl() === e && (r ? (l.$$parse(i), l.$$state = o, s(i, !1, o)) : (g = !1, u(i, o)));
                }), n.$$phase || n.$digest();
            }), n.$watch(function() {
                if (g || l.$$urlUpdatedByLocation) {
                    l.$$urlUpdatedByLocation = !1;
                    var e = Xt(r.url()), t = Xt(l.absUrl()), o = r.state(), a = l.$$replace, c = e !== t || l.$$html5 && i.history && o !== l.$$state;
                    (g || c) && (g = !1, n.$evalAsync(function() {
                        var t = l.absUrl(), r = n.$broadcast("$locationChangeStart", t, e, l.$$state, o).defaultPrevented;
                        l.absUrl() === t && (r ? (l.$$parse(e), l.$$state = o) : (c && s(t, a, o === l.$$state ? null : l.$$state), 
                        u(e, o)));
                    }));
                }
                l.$$replace = !1;
            }), l;
        } ];
    }
    function sn() {
        var e = !0, t = this;
        this.debugEnabled = function(t) {
            return b(t) ? (e = t, this) : e;
        }, this.$get = [ "$window", function(n) {
            function r(e) {
                return T(e) && (e.stack && a ? e = e.message && -1 === e.stack.indexOf(e.message) ? "Error: " + e.message + "\n" + e.stack : e.stack : e.sourceURL && (e = e.message + "\n" + e.sourceURL + ":" + e.line)), 
                e;
            }
            function i(e) {
                var t = n.console || {}, i = t[e] || t.log || m;
                return function() {
                    var e = [];
                    return o(arguments, function(t) {
                        e.push(r(t));
                    }), Function.prototype.apply.call(i, t, e);
                };
            }
            var a = ri || /\bEdge\//.test(n.navigator && n.navigator.userAgent);
            return {
                log: i("log"),
                info: i("info"),
                warn: i("warn"),
                error: i("error"),
                debug: function() {
                    var n = i("debug");
                    return function() {
                        e && n.apply(t, arguments);
                    };
                }()
            };
        } ];
    }
    function un(e) {
        return e + "";
    }
    function ln(e, t) {
        return void 0 !== e ? e : t;
    }
    function cn(e, t) {
        return void 0 === e ? t : void 0 === t ? e : e + t;
    }
    function fn(e, t) {
        return !e(t).$stateful;
    }
    function hn(e, t) {
        switch (e.type) {
          case Ro.MemberExpression:
            if (e.computed) return !1;
            break;

          case Ro.UnaryExpression:
            return Vo;

          case Ro.BinaryExpression:
            return "+" !== e.operator && Vo;

          case Ro.CallExpression:
            return !1;
        }
        return void 0 === t ? Ho : t;
    }
    function pn(e, t, n) {
        var r, i, a, s = e.isPure = hn(e, n);
        switch (e.type) {
          case Ro.Program:
            r = !0, o(e.body, function(e) {
                pn(e.expression, t, s), r = r && e.expression.constant;
            }), e.constant = r;
            break;

          case Ro.Literal:
            e.constant = !0, e.toWatch = [];
            break;

          case Ro.UnaryExpression:
            pn(e.argument, t, s), e.constant = e.argument.constant, e.toWatch = e.argument.toWatch;
            break;

          case Ro.BinaryExpression:
            pn(e.left, t, s), pn(e.right, t, s), e.constant = e.left.constant && e.right.constant, 
            e.toWatch = e.left.toWatch.concat(e.right.toWatch);
            break;

          case Ro.LogicalExpression:
            pn(e.left, t, s), pn(e.right, t, s), e.constant = e.left.constant && e.right.constant, 
            e.toWatch = e.constant ? [] : [ e ];
            break;

          case Ro.ConditionalExpression:
            pn(e.test, t, s), pn(e.alternate, t, s), pn(e.consequent, t, s), e.constant = e.test.constant && e.alternate.constant && e.consequent.constant, 
            e.toWatch = e.constant ? [] : [ e ];
            break;

          case Ro.Identifier:
            e.constant = !1, e.toWatch = [ e ];
            break;

          case Ro.MemberExpression:
            pn(e.object, t, s), e.computed && pn(e.property, t, s), e.constant = e.object.constant && (!e.computed || e.property.constant), 
            e.toWatch = e.constant ? [] : [ e ];
            break;

          case Ro.CallExpression:
            a = !!e.filter && fn(t, e.callee.name), r = a, i = [], o(e.arguments, function(e) {
                pn(e, t, s), r = r && e.constant, i.push.apply(i, e.toWatch);
            }), e.constant = r, e.toWatch = a ? i : [ e ];
            break;

          case Ro.AssignmentExpression:
            pn(e.left, t, s), pn(e.right, t, s), e.constant = e.left.constant && e.right.constant, 
            e.toWatch = [ e ];
            break;

          case Ro.ArrayExpression:
            r = !0, i = [], o(e.elements, function(e) {
                pn(e, t, s), r = r && e.constant, i.push.apply(i, e.toWatch);
            }), e.constant = r, e.toWatch = i;
            break;

          case Ro.ObjectExpression:
            r = !0, i = [], o(e.properties, function(e) {
                pn(e.value, t, s), r = r && e.value.constant, i.push.apply(i, e.value.toWatch), 
                e.computed && (pn(e.key, t, !1), r = r && e.key.constant, i.push.apply(i, e.key.toWatch));
            }), e.constant = r, e.toWatch = i;
            break;

          case Ro.ThisExpression:
          case Ro.LocalsExpression:
            e.constant = !1, e.toWatch = [];
        }
    }
    function dn(e) {
        if (1 === e.length) {
            var t = e[0].expression, n = t.toWatch;
            return 1 !== n.length ? n : n[0] !== t ? n : void 0;
        }
    }
    function mn(e) {
        return e.type === Ro.Identifier || e.type === Ro.MemberExpression;
    }
    function gn(e) {
        if (1 === e.body.length && mn(e.body[0].expression)) return {
            type: Ro.AssignmentExpression,
            left: e.body[0].expression,
            right: {
                type: Ro.NGValueParameter
            },
            operator: "="
        };
    }
    function vn(e) {
        return 0 === e.body.length || 1 === e.body.length && (e.body[0].expression.type === Ro.Literal || e.body[0].expression.type === Ro.ArrayExpression || e.body[0].expression.type === Ro.ObjectExpression);
    }
    function $n(e) {
        return e.constant;
    }
    function yn(e) {
        this.$filter = e;
    }
    function bn(e) {
        this.$filter = e;
    }
    function wn(e, t, n) {
        this.ast = new Ro(e, n), this.astCompiler = n.csp ? new bn(t) : new yn(t);
    }
    function En(e) {
        return _(e.valueOf) ? e.valueOf() : jo.call(e);
    }
    function xn() {
        var e, t, n = $e(), r = {
            true: !0,
            false: !1,
            null: null,
            undefined: void 0
        };
        this.addLiteral = function(e, t) {
            r[e] = t;
        }, this.setIdentifierFns = function(n, r) {
            return e = n, t = r, this;
        }, this.$get = [ "$filter", function(i) {
            function a(e, t) {
                var r, o, a;
                switch (typeof e) {
                  case "string":
                    if (e = e.trim(), a = e, !(r = n[a])) {
                        ":" === e.charAt(0) && ":" === e.charAt(1) && (o = !0, e = e.substring(2));
                        r = new wn(new Lo(d), i, d).parse(e), r.constant ? r.$$watchDelegate = f : o ? r.$$watchDelegate = r.literal ? c : l : r.inputs && (r.$$watchDelegate = u), 
                        n[a] = r;
                    }
                    return h(r, t);

                  case "function":
                    return h(e, t);

                  default:
                    return h(m, t);
                }
            }
            function s(e, t, n) {
                return null == e || null == t ? e === t : !("object" == typeof e && "object" == typeof (e = En(e)) && !n) && (e === t || e !== e && t !== t);
            }
            function u(e, t, n, r, i) {
                var o, a = r.inputs;
                if (1 === a.length) {
                    var u = s;
                    return a = a[0], e.$watch(function(e) {
                        var t = a(e);
                        return s(t, u, a.isPure) || (o = r(e, void 0, void 0, [ t ]), u = t && En(t)), o;
                    }, t, n, i);
                }
                for (var l = [], c = [], f = 0, h = a.length; f < h; f++) l[f] = s, c[f] = null;
                return e.$watch(function(e) {
                    for (var t = !1, n = 0, i = a.length; n < i; n++) {
                        var u = a[n](e);
                        (t || (t = !s(u, l[n], a[n].isPure))) && (c[n] = u, l[n] = u && En(u));
                    }
                    return t && (o = r(e, void 0, void 0, c)), o;
                }, t, n, i);
            }
            function l(e, t, n, r, i) {
                function o(e) {
                    return r(e);
                }
                function a(e, n, r) {
                    l = e, _(t) && t(e, n, r), b(e) && r.$$postDigest(function() {
                        b(l) && s();
                    });
                }
                var s, l;
                return s = r.inputs ? u(e, a, n, r, i) : e.$watch(o, a, n);
            }
            function c(e, t, n, r) {
                function i(e) {
                    var t = !0;
                    return o(e, function(e) {
                        b(e) || (t = !1);
                    }), t;
                }
                var a, s;
                return a = e.$watch(function(e) {
                    return r(e);
                }, function(e, n, r) {
                    s = e, _(t) && t(e, n, r), i(e) && r.$$postDigest(function() {
                        i(s) && a();
                    });
                }, n);
            }
            function f(e, t, n, r) {
                var i = e.$watch(function(e) {
                    return i(), r(e);
                }, t, n);
                return i;
            }
            function h(e, t) {
                if (!t) return e;
                var n = e.$$watchDelegate, r = !1, i = n !== c && n !== l, o = i ? function(n, i, o, a) {
                    var s = r && a ? a[0] : e(n, i, o, a);
                    return t(s, n, i);
                } : function(n, r, i, o) {
                    var a = e(n, r, i, o), s = t(a, n, r);
                    return b(a) ? s : a;
                };
                return r = !e.inputs, n && n !== u ? (o.$$watchDelegate = n, o.inputs = e.inputs) : t.$stateful || (o.$$watchDelegate = u, 
                o.inputs = e.inputs ? e.inputs : [ e ]), o.inputs && (o.inputs = o.inputs.map(function(e) {
                    return e.isPure === Ho ? function(t) {
                        return e(t);
                    } : e;
                })), o;
            }
            var p = bi().noUnsafeEval, d = {
                csp: p,
                literals: q(r),
                isIdentifierStart: _(e) && e,
                isIdentifierContinue: _(t) && t
            };
            return a;
        } ];
    }
    function Cn() {
        var e = !0;
        this.$get = [ "$rootScope", "$exceptionHandler", function(t, n) {
            return Tn(function(e) {
                t.$evalAsync(e);
            }, n, e);
        } ], this.errorOnUnhandledRejections = function(t) {
            return b(t) ? (e = t, this) : e;
        };
    }
    function Sn() {
        var e = !0;
        this.$get = [ "$browser", "$exceptionHandler", function(t, n) {
            return Tn(function(e) {
                t.defer(e);
            }, n, e);
        } ], this.errorOnUnhandledRejections = function(t) {
            return b(t) ? (e = t, this) : e;
        };
    }
    function Tn(e, t, n) {
        function i() {
            return new a();
        }
        function a() {
            var e = this.promise = new s();
            this.resolve = function(t) {
                h(e, t);
            }, this.reject = function(t) {
                d(e, t);
            }, this.notify = function(t) {
                g(e, t);
            };
        }
        function s() {
            this.$$state = {
                status: 0
            };
        }
        function u(t) {
            var r, i, o;
            o = t.pending, t.processScheduled = !1, t.pending = void 0;
            try {
                for (var a = 0, s = o.length; a < s; ++a) {
                    An(t), i = o[a][0], r = o[a][t.status];
                    try {
                        _(r) ? h(i, r(t.value)) : 1 === t.status ? h(i, t.value) : d(i, t.value);
                    } catch (e) {
                        d(i, e);
                    }
                }
            } finally {
                --A, n && 0 === A && e(l);
            }
        }
        function l() {
            for (;!A && O.length; ) {
                var e = O.shift();
                if (!_n(e)) {
                    An(e);
                    var n = "Possibly unhandled rejection: " + xe(e.value);
                    T(e.value) ? t(e.value, n) : t(n);
                }
            }
        }
        function c(t) {
            !n || t.pending || 2 !== t.status || _n(t) || (0 === A && 0 === O.length && e(l), 
            O.push(t)), !t.processScheduled && t.pending && (t.processScheduled = !0, ++A, e(function() {
                u(t);
            }));
        }
        function h(e, t) {
            e.$$state.status || (t === e ? m(e, S("qcycle", "Expected promise to be resolved with value other than itself '{0}'", t)) : p(e, t));
        }
        function p(e, t) {
            function n(t) {
                a || (a = !0, p(e, t));
            }
            function r(t) {
                a || (a = !0, m(e, t));
            }
            function i(t) {
                g(e, t);
            }
            var o, a = !1;
            try {
                (w(t) || _(t)) && (o = t.then), _(o) ? (e.$$state.status = -1, o.call(t, n, r, i)) : (e.$$state.value = t, 
                e.$$state.status = 1, c(e.$$state));
            } catch (e) {
                r(e);
            }
        }
        function d(e, t) {
            e.$$state.status || m(e, t);
        }
        function m(e, t) {
            e.$$state.value = t, e.$$state.status = 2, c(e.$$state);
        }
        function g(n, r) {
            var i = n.$$state.pending;
            n.$$state.status <= 0 && i && i.length && e(function() {
                for (var e, n, o = 0, a = i.length; o < a; o++) {
                    n = i[o][0], e = i[o][3];
                    try {
                        g(n, _(e) ? e(r) : r);
                    } catch (e) {
                        t(e);
                    }
                }
            });
        }
        function v(e) {
            var t = new s();
            return d(t, e), t;
        }
        function $(e, t, n) {
            var r = null;
            try {
                _(n) && (r = n());
            } catch (e) {
                return v(e);
            }
            return P(r) ? r.then(function() {
                return t(e);
            }, v) : t(e);
        }
        function b(e, t, n, r) {
            var i = new s();
            return h(i, e), i.then(t, n, r);
        }
        function E(e) {
            var t = new s(), n = 0, r = gi(e) ? [] : {};
            return o(e, function(e, i) {
                n++, b(e).then(function(e) {
                    r[i] = e, --n || h(t, r);
                }, function(e) {
                    d(t, e);
                });
            }), 0 === n && h(t, r), t;
        }
        function x(e) {
            var t = i();
            return o(e, function(e) {
                b(e).then(t.resolve, t.reject);
            }), t.promise;
        }
        function C(e) {
            function t(e) {
                h(r, e);
            }
            function n(e) {
                d(r, e);
            }
            if (!_(e)) throw S("norslvr", "Expected resolverFn, got '{0}'", e);
            var r = new s();
            return e(t, n), r;
        }
        var S = r("$q", TypeError), A = 0, O = [];
        f(s.prototype, {
            then: function(e, t, n) {
                if (y(e) && y(t) && y(n)) return this;
                var r = new s();
                return this.$$state.pending = this.$$state.pending || [], this.$$state.pending.push([ r, e, t, n ]), 
                this.$$state.status > 0 && c(this.$$state), r;
            },
            catch: function(e) {
                return this.then(null, e);
            },
            finally: function(e, t) {
                return this.then(function(t) {
                    return $(t, k, e);
                }, function(t) {
                    return $(t, v, e);
                }, t);
            }
        });
        var k = b;
        return C.prototype = s.prototype, C.defer = i, C.reject = v, C.when = b, C.resolve = k, 
        C.all = E, C.race = x, C;
    }
    function _n(e) {
        return !!e.pur;
    }
    function An(e) {
        e.pur = !0;
    }
    function On(e) {
        An(e.$$state);
    }
    function kn() {
        this.$get = [ "$window", "$timeout", function(e, t) {
            var n = e.requestAnimationFrame || e.webkitRequestAnimationFrame, r = e.cancelAnimationFrame || e.webkitCancelAnimationFrame || e.webkitCancelRequestAnimationFrame, i = !!n, o = i ? function(e) {
                var t = n(e);
                return function() {
                    r(t);
                };
            } : function(e) {
                var n = t(e, 16.66, !1);
                return function() {
                    t.cancel(n);
                };
            };
            return o.supported = i, o;
        } ];
    }
    function In() {
        function e(e) {
            function t() {
                this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null, 
                this.$$listeners = {}, this.$$listenerCount = {}, this.$$watchersCount = 0, this.$id = u(), 
                this.$$ChildScope = null;
            }
            return t.prototype = e, t;
        }
        var t = 10, n = r("$rootScope"), a = null, s = null;
        this.digestTtl = function(e) {
            return arguments.length && (t = e), t;
        }, this.$get = [ "$exceptionHandler", "$parse", "$browser", function(r, l, c) {
            function f(e) {
                e.currentScope.$$destroyed = !0;
            }
            function h(e) {
                9 === ri && (e.$$childHead && h(e.$$childHead), e.$$nextSibling && h(e.$$nextSibling)), 
                e.$parent = e.$$nextSibling = e.$$prevSibling = e.$$childHead = e.$$childTail = e.$root = e.$$watchers = null;
            }
            function p() {
                this.$id = u(), this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null, 
                this.$root = this, this.$$destroyed = !1, this.$$listeners = {}, this.$$listenerCount = {}, 
                this.$$watchersCount = 0, this.$$isolateBindings = null;
            }
            function d(e) {
                if (C.$$phase) throw n("inprog", "{0} already in progress", C.$$phase);
                C.$$phase = e;
            }
            function g() {
                C.$$phase = null;
            }
            function v(e, t) {
                do {
                    e.$$watchersCount += t;
                } while (e = e.$parent);
            }
            function $(e, t, n) {
                do {
                    e.$$listenerCount[n] -= t, 0 === e.$$listenerCount[n] && delete e.$$listenerCount[n];
                } while (e = e.$parent);
            }
            function b() {}
            function E() {
                for (;A.length; ) try {
                    A.shift()();
                } catch (e) {
                    r(e);
                }
                s = null;
            }
            function x() {
                null === s && (s = c.defer(function() {
                    C.$apply(E);
                }));
            }
            p.prototype = {
                constructor: p,
                $new: function(t, n) {
                    var r;
                    return n = n || this, t ? (r = new p(), r.$root = this.$root) : (this.$$ChildScope || (this.$$ChildScope = e(this)), 
                    r = new this.$$ChildScope()), r.$parent = n, r.$$prevSibling = n.$$childTail, n.$$childHead ? (n.$$childTail.$$nextSibling = r, 
                    n.$$childTail = r) : n.$$childHead = n.$$childTail = r, (t || n !== this) && r.$on("$destroy", f), 
                    r;
                },
                $watch: function(e, t, n, r) {
                    var i = l(e);
                    if (i.$$watchDelegate) return i.$$watchDelegate(this, t, n, i, e);
                    var o = this, s = o.$$watchers, u = {
                        fn: t,
                        last: b,
                        get: i,
                        exp: r || e,
                        eq: !!n
                    };
                    return a = null, _(t) || (u.fn = m), s || (s = o.$$watchers = [], s.$$digestWatchIndex = -1), 
                    s.unshift(u), s.$$digestWatchIndex++, v(this, 1), function() {
                        var e = U(s, u);
                        e >= 0 && (v(o, -1), e < s.$$digestWatchIndex && s.$$digestWatchIndex--), a = null;
                    };
                },
                $watchGroup: function(e, t) {
                    function n() {
                        u = !1, l ? (l = !1, t(i, i, s)) : t(i, r, s);
                    }
                    var r = new Array(e.length), i = new Array(e.length), a = [], s = this, u = !1, l = !0;
                    if (!e.length) {
                        var c = !0;
                        return s.$evalAsync(function() {
                            c && t(i, i, s);
                        }), function() {
                            c = !1;
                        };
                    }
                    return 1 === e.length ? this.$watch(e[0], function(e, n, o) {
                        i[0] = e, r[0] = n, t(i, e === n ? i : r, o);
                    }) : (o(e, function(e, t) {
                        var o = s.$watch(e, function(e, o) {
                            i[t] = e, r[t] = o, u || (u = !0, s.$evalAsync(n));
                        });
                        a.push(o);
                    }), function() {
                        for (;a.length; ) a.shift()();
                    });
                },
                $watchCollection: function(e, t) {
                    function n(e) {
                        o = e;
                        var t, n, r, s;
                        if (!y(o)) {
                            if (w(o)) if (i(o)) {
                                a !== p && (a = p, g = a.length = 0, f++), t = o.length, g !== t && (f++, a.length = g = t);
                                for (var u = 0; u < t; u++) s = a[u], r = o[u], s !== s && r !== r || s === r || (f++, 
                                a[u] = r);
                            } else {
                                a !== d && (a = d = {}, g = 0, f++), t = 0;
                                for (n in o) Jr.call(o, n) && (t++, r = o[n], s = a[n], n in a ? s !== s && r !== r || s === r || (f++, 
                                a[n] = r) : (g++, a[n] = r, f++));
                                if (g > t) {
                                    f++;
                                    for (n in a) Jr.call(o, n) || (g--, delete a[n]);
                                }
                            } else a !== o && (a = o, f++);
                            return f;
                        }
                    }
                    function r() {
                        if (m ? (m = !1, t(o, o, u)) : t(o, s, u), c) if (w(o)) if (i(o)) {
                            s = new Array(o.length);
                            for (var e = 0; e < o.length; e++) s[e] = o[e];
                        } else {
                            s = {};
                            for (var n in o) Jr.call(o, n) && (s[n] = o[n]);
                        } else s = o;
                    }
                    n.$stateful = !0;
                    var o, a, s, u = this, c = t.length > 1, f = 0, h = l(e, n), p = [], d = {}, m = !0, g = 0;
                    return this.$watch(h, r);
                },
                $digest: function() {
                    var e, i, o, u, l, f, h, p, m, v, $, y = t, w = this, x = [];
                    d("$digest"), c.$$checkUrlChange(), this === C && null !== s && (c.defer.cancel(s), 
                    E()), a = null;
                    do {
                        h = !1, m = w;
                        for (var A = 0; A < S.length; A++) {
                            try {
                                $ = S[A], u = $.fn, u($.scope, $.locals);
                            } catch (e) {
                                r(e);
                            }
                            a = null;
                        }
                        S.length = 0;
                        e: do {
                            if (f = m.$$watchers) for (f.$$digestWatchIndex = f.length; f.$$digestWatchIndex--; ) try {
                                if (e = f[f.$$digestWatchIndex]) if (l = e.get, (i = l(m)) === (o = e.last) || (e.eq ? W(i, o) : mi(i) && mi(o))) {
                                    if (e === a) {
                                        h = !1;
                                        break e;
                                    }
                                } else h = !0, a = e, e.last = e.eq ? q(i, null) : i, u = e.fn, u(i, o === b ? i : o, m), 
                                y < 5 && (v = 4 - y, x[v] || (x[v] = []), x[v].push({
                                    msg: _(e.exp) ? "fn: " + (e.exp.name || e.exp.toString()) : e.exp,
                                    newVal: i,
                                    oldVal: o
                                }));
                            } catch (e) {
                                r(e);
                            }
                            if (!(p = m.$$watchersCount && m.$$childHead || m !== w && m.$$nextSibling)) for (;m !== w && !(p = m.$$nextSibling); ) m = m.$parent;
                        } while (m = p);
                        if ((h || S.length) && !y--) throw g(), n("infdig", "{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}", t, x);
                    } while (h || S.length);
                    for (g(); O < T.length; ) try {
                        T[O++]();
                    } catch (e) {
                        r(e);
                    }
                    T.length = O = 0, c.$$checkUrlChange();
                },
                $destroy: function() {
                    if (!this.$$destroyed) {
                        var e = this.$parent;
                        this.$broadcast("$destroy"), this.$$destroyed = !0, this === C && c.$$applicationDestroyed(), 
                        v(this, -this.$$watchersCount);
                        for (var t in this.$$listenerCount) $(this, this.$$listenerCount[t], t);
                        e && e.$$childHead === this && (e.$$childHead = this.$$nextSibling), e && e.$$childTail === this && (e.$$childTail = this.$$prevSibling), 
                        this.$$prevSibling && (this.$$prevSibling.$$nextSibling = this.$$nextSibling), this.$$nextSibling && (this.$$nextSibling.$$prevSibling = this.$$prevSibling), 
                        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = m, 
                        this.$on = this.$watch = this.$watchGroup = function() {
                            return m;
                        }, this.$$listeners = {}, this.$$nextSibling = null, h(this);
                    }
                },
                $eval: function(e, t) {
                    return l(e)(this, t);
                },
                $evalAsync: function(e, t) {
                    C.$$phase || S.length || c.defer(function() {
                        S.length && C.$digest();
                    }), S.push({
                        scope: this,
                        fn: l(e),
                        locals: t
                    });
                },
                $$postDigest: function(e) {
                    T.push(e);
                },
                $apply: function(e) {
                    try {
                        d("$apply");
                        try {
                            return this.$eval(e);
                        } finally {
                            g();
                        }
                    } catch (e) {
                        r(e);
                    } finally {
                        try {
                            C.$digest();
                        } catch (e) {
                            throw r(e), e;
                        }
                    }
                },
                $applyAsync: function(e) {
                    function t() {
                        n.$eval(e);
                    }
                    var n = this;
                    e && A.push(t), e = l(e), x();
                },
                $on: function(e, t) {
                    var n = this.$$listeners[e];
                    n || (this.$$listeners[e] = n = []), n.push(t);
                    var r = this;
                    do {
                        r.$$listenerCount[e] || (r.$$listenerCount[e] = 0), r.$$listenerCount[e]++;
                    } while (r = r.$parent);
                    var i = this;
                    return function() {
                        var r = n.indexOf(t);
                        -1 !== r && (n[r] = null, $(i, 1, e));
                    };
                },
                $emit: function(e, t) {
                    var n, i, o, a = [], s = this, u = !1, l = {
                        name: e,
                        targetScope: s,
                        stopPropagation: function() {
                            u = !0;
                        },
                        preventDefault: function() {
                            l.defaultPrevented = !0;
                        },
                        defaultPrevented: !1
                    }, c = G([ l ], arguments, 1);
                    do {
                        for (n = s.$$listeners[e] || a, l.currentScope = s, i = 0, o = n.length; i < o; i++) if (n[i]) try {
                            n[i].apply(null, c);
                        } catch (e) {
                            r(e);
                        } else n.splice(i, 1), i--, o--;
                        if (u) return l.currentScope = null, l;
                        s = s.$parent;
                    } while (s);
                    return l.currentScope = null, l;
                },
                $broadcast: function(e, t) {
                    var n = this, i = n, o = n, a = {
                        name: e,
                        targetScope: n,
                        preventDefault: function() {
                            a.defaultPrevented = !0;
                        },
                        defaultPrevented: !1
                    };
                    if (!n.$$listenerCount[e]) return a;
                    for (var s, u, l, c = G([ a ], arguments, 1); i = o; ) {
                        for (a.currentScope = i, s = i.$$listeners[e] || [], u = 0, l = s.length; u < l; u++) if (s[u]) try {
                            s[u].apply(null, c);
                        } catch (e) {
                            r(e);
                        } else s.splice(u, 1), u--, l--;
                        if (!(o = i.$$listenerCount[e] && i.$$childHead || i !== n && i.$$nextSibling)) for (;i !== n && !(o = i.$$nextSibling); ) i = i.$parent;
                    }
                    return a.currentScope = null, a;
                }
            };
            var C = new p(), S = C.$$asyncQueue = [], T = C.$$postDigestQueue = [], A = C.$$applyAsyncQueue = [], O = 0;
            return C;
        } ];
    }
    function Dn() {
        var e = /^\s*(https?|ftp|mailto|tel|file):/, t = /^\s*((https?|ftp|file|blob):|data:image\/)/;
        this.aHrefSanitizationWhitelist = function(t) {
            return b(t) ? (e = t, this) : e;
        }, this.imgSrcSanitizationWhitelist = function(e) {
            return b(e) ? (t = e, this) : t;
        }, this.$get = function() {
            return function(n, r) {
                var i, o = r ? t : e;
                return i = Un(n).href, "" === i || i.match(o) ? n : "unsafe:" + i;
            };
        };
    }
    function Nn(e) {
        return e.replace(qo, Te);
    }
    function jn(e) {
        if ("self" === e) return e;
        if (x(e)) {
            if (e.indexOf("***") > -1) throw Fo("iwcard", "Illegal sequence *** in string matcher.  String: {0}", e);
            return e = yi(e).replace(/\\\*\\\*/g, ".*").replace(/\\\*/g, "[^:/.?&;]*"), new RegExp("^" + e + "$");
        }
        if (A(e)) return new RegExp("^" + e.source + "$");
        throw Fo("imatcher", 'Matchers may only be "self", string patterns or RegExp objects');
    }
    function Pn(e) {
        var t = [];
        return b(e) && o(e, function(e) {
            t.push(jn(e));
        }), t;
    }
    function Mn() {
        this.SCE_CONTEXTS = Uo;
        var e = [ "self" ], t = [];
        this.resourceUrlWhitelist = function(t) {
            return arguments.length && (e = Pn(t)), e;
        }, this.resourceUrlBlacklist = function(e) {
            return arguments.length && (t = Pn(e)), t;
        }, this.$get = [ "$injector", function(n) {
            function r(e, t) {
                return "self" === e ? qn(t) : !!e.exec(t.href);
            }
            function i(n) {
                var i, o, a = Un(n.toString()), s = !1;
                for (i = 0, o = e.length; i < o; i++) if (r(e[i], a)) {
                    s = !0;
                    break;
                }
                if (s) for (i = 0, o = t.length; i < o; i++) if (r(t[i], a)) {
                    s = !1;
                    break;
                }
                return s;
            }
            function o(e) {
                var t = function(e) {
                    this.$$unwrapTrustedValue = function() {
                        return e;
                    };
                };
                return e && (t.prototype = new e()), t.prototype.valueOf = function() {
                    return this.$$unwrapTrustedValue();
                }, t.prototype.toString = function() {
                    return this.$$unwrapTrustedValue().toString();
                }, t;
            }
            function a(e, t) {
                var n = f.hasOwnProperty(e) ? f[e] : null;
                if (!n) throw Fo("icontext", "Attempted to trust a value in invalid context. Context: {0}; Value: {1}", e, t);
                if (null === t || y(t) || "" === t) return t;
                if ("string" != typeof t) throw Fo("itype", "Attempted to trust a non-string value in a content requiring a string: Context: {0}", e);
                return new n(t);
            }
            function s(e) {
                return e instanceof c ? e.$$unwrapTrustedValue() : e;
            }
            function u(e, t) {
                if (null === t || y(t) || "" === t) return t;
                var n = f.hasOwnProperty(e) ? f[e] : null;
                if (n && t instanceof n) return t.$$unwrapTrustedValue();
                if (e === Uo.RESOURCE_URL) {
                    if (i(t)) return t;
                    throw Fo("insecurl", "Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}", t.toString());
                }
                if (e === Uo.HTML) return l(t);
                throw Fo("unsafe", "Attempting to use an unsafe value in a safe context.");
            }
            var l = function(e) {
                throw Fo("unsafe", "Attempting to use an unsafe value in a safe context.");
            };
            n.has("$sanitize") && (l = n.get("$sanitize"));
            var c = o(), f = {};
            return f[Uo.HTML] = o(c), f[Uo.CSS] = o(c), f[Uo.URL] = o(c), f[Uo.JS] = o(c), f[Uo.RESOURCE_URL] = o(f[Uo.URL]), 
            {
                trustAs: a,
                getTrusted: u,
                valueOf: s
            };
        } ];
    }
    function Ln() {
        var e = !0;
        this.enabled = function(t) {
            return arguments.length && (e = !!t), e;
        }, this.$get = [ "$parse", "$sceDelegate", function(t, n) {
            if (e && ri < 8) throw Fo("iequirks", "Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");
            var r = we(Uo);
            r.isEnabled = function() {
                return e;
            }, r.trustAs = n.trustAs, r.getTrusted = n.getTrusted, r.valueOf = n.valueOf, e || (r.trustAs = r.getTrusted = function(e, t) {
                return t;
            }, r.valueOf = g), r.parseAs = function(e, n) {
                var i = t(n);
                return i.literal && i.constant ? i : t(n, function(t) {
                    return r.getTrusted(e, t);
                });
            };
            var i = r.parseAs, a = r.getTrusted, s = r.trustAs;
            return o(Uo, function(e, t) {
                var n = Zr(t);
                r[Nn("parse_as_" + n)] = function(t) {
                    return i(e, t);
                }, r[Nn("get_trusted_" + n)] = function(t) {
                    return a(e, t);
                }, r[Nn("trust_as_" + n)] = function(t) {
                    return s(e, t);
                };
            }), r;
        } ];
    }
    function Rn() {
        this.$get = [ "$window", "$document", function(e, t) {
            var n = {}, r = e.nw && e.nw.process, i = !r && e.chrome && (e.chrome.app && e.chrome.app.runtime || !e.chrome.app && e.chrome.runtime && e.chrome.runtime.id), o = !i && e.history && e.history.pushState, a = p((/android (\d+)/.exec(Zr((e.navigator || {}).userAgent)) || [])[1]), s = /Boxee/i.test((e.navigator || {}).userAgent), u = t[0] || {}, l = u.body && u.body.style, c = !1, f = !1;
            return l && (c = !!("transition" in l || "webkitTransition" in l), f = !!("animation" in l || "webkitAnimation" in l)), 
            {
                history: !(!o || a < 4 || s),
                hasEvent: function(e) {
                    if ("input" === e && ri) return !1;
                    if (y(n[e])) {
                        var t = u.createElement("div");
                        n[e] = "on" + e in t;
                    }
                    return n[e];
                },
                csp: bi(),
                transitions: c,
                animations: f,
                android: a
            };
        } ];
    }
    function Vn() {
        var e;
        this.httpOptions = function(t) {
            return t ? (e = t, this) : e;
        }, this.$get = [ "$exceptionHandler", "$templateCache", "$http", "$q", "$sce", function(t, n, r, i, o) {
            function a(s, u) {
                function l(e) {
                    return u || (e = Bo("tpload", "Failed to load template: {0} (HTTP status: {1} {2})", s, e.status, e.statusText), 
                    t(e)), i.reject(e);
                }
                a.totalPendingRequests++, x(s) && !y(n.get(s)) || (s = o.getTrustedResourceUrl(s));
                var c = r.defaults && r.defaults.transformResponse;
                return gi(c) ? c = c.filter(function(e) {
                    return e !== Nt;
                }) : c === Nt && (c = null), r.get(s, f({
                    cache: n,
                    transformResponse: c
                }, e)).finally(function() {
                    a.totalPendingRequests--;
                }).then(function(e) {
                    return n.put(s, e.data), e.data;
                }, l);
            }
            return a.totalPendingRequests = 0, a;
        } ];
    }
    function Hn() {
        this.$get = [ "$rootScope", "$browser", "$location", function(e, t, n) {
            var r = {};
            return r.findBindings = function(e, t, n) {
                var r = e.getElementsByClassName("ng-binding"), i = [];
                return o(r, function(e) {
                    var r = pi.element(e).data("$binding");
                    r && o(r, function(r) {
                        if (n) {
                            new RegExp("(^|\\s)" + yi(t) + "(\\s|\\||$)").test(r) && i.push(e);
                        } else -1 !== r.indexOf(t) && i.push(e);
                    });
                }), i;
            }, r.findModels = function(e, t, n) {
                for (var r = [ "ng-", "data-ng-", "ng\\:" ], i = 0; i < r.length; ++i) {
                    var o = n ? "=" : "*=", a = "[" + r[i] + "model" + o + '"' + t + '"]', s = e.querySelectorAll(a);
                    if (s.length) return s;
                }
            }, r.getLocation = function() {
                return n.url();
            }, r.setLocation = function(t) {
                t !== n.url() && (n.url(t), e.$digest());
            }, r.whenStable = function(e) {
                t.notifyWhenNoOutstandingRequests(e);
            }, r;
        } ];
    }
    function Fn() {
        this.$get = [ "$rootScope", "$browser", "$q", "$$q", "$exceptionHandler", function(e, t, n, r, i) {
            function o(o, s, u) {
                _(o) || (u = s, s = o, o = m);
                var l, c = z(arguments, 3), f = b(u) && !u, h = (f ? r : n).defer(), p = h.promise;
                return l = t.defer(function() {
                    try {
                        h.resolve(o.apply(null, c));
                    } catch (e) {
                        h.reject(e), i(e);
                    } finally {
                        delete a[p.$$timeoutId];
                    }
                    f || e.$apply();
                }, s), p.$$timeoutId = l, a[l] = h, p;
            }
            var a = {};
            return o.cancel = function(e) {
                return !!(e && e.$$timeoutId in a) && (On(a[e.$$timeoutId].promise), a[e.$$timeoutId].reject("canceled"), 
                delete a[e.$$timeoutId], t.defer.cancel(e.$$timeoutId));
            }, o;
        } ];
    }
    function Un(e) {
        var t = e;
        return ri && (Wo.setAttribute("href", t), t = Wo.href), Wo.setAttribute("href", t), 
        {
            href: Wo.href,
            protocol: Wo.protocol ? Wo.protocol.replace(/:$/, "") : "",
            host: Wo.host,
            search: Wo.search ? Wo.search.replace(/^\?/, "") : "",
            hash: Wo.hash ? Wo.hash.replace(/^#/, "") : "",
            hostname: Wo.hostname,
            port: Wo.port,
            pathname: "/" === Wo.pathname.charAt(0) ? Wo.pathname : "/" + Wo.pathname
        };
    }
    function qn(e) {
        var t = x(e) ? Un(e) : e;
        return t.protocol === Go.protocol && t.host === Go.host;
    }
    function Bn() {
        this.$get = v(e);
    }
    function Wn(e) {
        function t(e) {
            try {
                return e.cookie || "";
            } catch (e) {
                return "";
            }
        }
        function n(e) {
            try {
                return decodeURIComponent(e);
            } catch (t) {
                return e;
            }
        }
        var r = e[0] || {}, i = {}, o = "";
        return function() {
            var e, a, s, u, l, c = t(r);
            if (c !== o) for (o = c, e = o.split("; "), i = {}, s = 0; s < e.length; s++) a = e[s], 
            (u = a.indexOf("=")) > 0 && (l = n(a.substring(0, u)), y(i[l]) && (i[l] = n(a.substring(u + 1))));
            return i;
        };
    }
    function Gn() {
        this.$get = Wn;
    }
    function zn(e) {
        function t(r, i) {
            if (w(r)) {
                var a = {};
                return o(r, function(e, n) {
                    a[n] = t(n, e);
                }), a;
            }
            return e.factory(r + n, i);
        }
        var n = "Filter";
        this.register = t, this.$get = [ "$injector", function(e) {
            return function(t) {
                return e.get(t + n);
            };
        } ], t("currency", Jn), t("date", pr), t("filter", Kn), t("json", dr), t("limitTo", mr), 
        t("lowercase", Zo), t("number", Zn), t("orderBy", vr), t("uppercase", ea);
    }
    function Kn() {
        return function(e, t, n, o) {
            if (!i(e)) {
                if (null == e) return e;
                throw r("filter")("notarray", "Expected array but received: {0}", e);
            }
            o = o || "$";
            var a, s, u = Xn(t);
            switch (u) {
              case "function":
                a = t;
                break;

              case "boolean":
              case "null":
              case "number":
              case "string":
                s = !0;

              case "object":
                a = Qn(t, n, o, s);
                break;

              default:
                return e;
            }
            return Array.prototype.filter.call(e, a);
        };
    }
    function Qn(e, t, n, r) {
        var i = w(e) && n in e;
        return !0 === t ? t = W : _(t) || (t = function(e, t) {
            return !y(e) && (null === e || null === t ? e === t : !(w(t) || w(e) && !$(e)) && (e = Zr("" + e), 
            t = Zr("" + t), -1 !== e.indexOf(t)));
        }), function(o) {
            return i && !w(o) ? Yn(o, e[n], t, n, !1) : Yn(o, e, t, n, r);
        };
    }
    function Yn(e, t, n, r, i, o) {
        var a = Xn(e), s = Xn(t);
        if ("string" === s && "!" === t.charAt(0)) return !Yn(e, t.substring(1), n, r, i);
        if (gi(e)) return e.some(function(e) {
            return Yn(e, t, n, r, i);
        });
        switch (a) {
          case "object":
            var u;
            if (i) {
                for (u in e) if (u.charAt && "$" !== u.charAt(0) && Yn(e[u], t, n, r, !0)) return !0;
                return !o && Yn(e, t, n, r, !1);
            }
            if ("object" === s) {
                for (u in t) {
                    var l = t[u];
                    if (!_(l) && !y(l)) {
                        var c = u === r;
                        if (!Yn(c ? e : e[u], l, n, r, c, c)) return !1;
                    }
                }
                return !0;
            }
            return n(e, t);

          case "function":
            return !1;

          default:
            return n(e, t);
        }
    }
    function Xn(e) {
        return null === e ? "null" : typeof e;
    }
    function Jn(e) {
        var t = e.NUMBER_FORMATS;
        return function(e, n, r) {
            return y(n) && (n = t.CURRENCY_SYM), y(r) && (r = t.PATTERNS[1].maxFrac), null == e ? e : nr(e, t.PATTERNS[1], t.GROUP_SEP, t.DECIMAL_SEP, r).replace(/\u00A4/g, n);
        };
    }
    function Zn(e) {
        var t = e.NUMBER_FORMATS;
        return function(e, n) {
            return null == e ? e : nr(e, t.PATTERNS[0], t.GROUP_SEP, t.DECIMAL_SEP, n);
        };
    }
    function er(e) {
        var t, n, r, i, o, a = 0;
        for ((n = e.indexOf(Ko)) > -1 && (e = e.replace(Ko, "")), (r = e.search(/e/i)) > 0 ? (n < 0 && (n = r), 
        n += +e.slice(r + 1), e = e.substring(0, r)) : n < 0 && (n = e.length), r = 0; e.charAt(r) === Qo; r++) ;
        if (r === (o = e.length)) t = [ 0 ], n = 1; else {
            for (o--; e.charAt(o) === Qo; ) o--;
            for (n -= r, t = [], i = 0; r <= o; r++, i++) t[i] = +e.charAt(r);
        }
        return n > zo && (t = t.splice(0, zo - 1), a = n - 1, n = 1), {
            d: t,
            e: a,
            i: n
        };
    }
    function tr(e, t, n, r) {
        var i = e.d, o = i.length - e.i;
        t = y(t) ? Math.min(Math.max(n, o), r) : +t;
        var a = t + e.i, s = i[a];
        if (a > 0) {
            i.splice(Math.max(e.i, a));
            for (var u = a; u < i.length; u++) i[u] = 0;
        } else {
            o = Math.max(0, o), e.i = 1, i.length = Math.max(1, a = t + 1), i[0] = 0;
            for (var l = 1; l < a; l++) i[l] = 0;
        }
        if (s >= 5) if (a - 1 < 0) {
            for (var c = 0; c > a; c--) i.unshift(0), e.i++;
            i.unshift(1), e.i++;
        } else i[a - 1]++;
        for (;o < Math.max(0, t); o++) i.push(0);
        var f = i.reduceRight(function(e, t, n, r) {
            return t += e, r[n] = t % 10, Math.floor(t / 10);
        }, 0);
        f && (i.unshift(f), e.i++);
    }
    function nr(e, t, n, r, i) {
        if (!x(e) && !C(e) || isNaN(e)) return "";
        var o, a = !isFinite(e), s = !1, u = Math.abs(e) + "", l = "";
        if (a) l = "∞"; else {
            o = er(u), tr(o, i, t.minFrac, t.maxFrac);
            var c = o.d, f = o.i, h = o.e, p = [];
            for (s = c.reduce(function(e, t) {
                return e && !t;
            }, !0); f < 0; ) c.unshift(0), f++;
            f > 0 ? p = c.splice(f, c.length) : (p = c, c = [ 0 ]);
            var d = [];
            for (c.length >= t.lgSize && d.unshift(c.splice(-t.lgSize, c.length).join("")); c.length > t.gSize; ) d.unshift(c.splice(-t.gSize, c.length).join(""));
            c.length && d.unshift(c.join("")), l = d.join(n), p.length && (l += r + p.join("")), 
            h && (l += "e+" + h);
        }
        return e < 0 && !s ? t.negPre + l + t.negSuf : t.posPre + l + t.posSuf;
    }
    function rr(e, t, n, r) {
        var i = "";
        for ((e < 0 || r && e <= 0) && (r ? e = 1 - e : (e = -e, i = "-")), e = "" + e; e.length < t; ) e = Qo + e;
        return n && (e = e.substr(e.length - t)), i + e;
    }
    function ir(e, t, n, r, i) {
        return n = n || 0, function(o) {
            var a = o["get" + e]();
            return (n > 0 || a > -n) && (a += n), 0 === a && -12 === n && (a = 12), rr(a, t, r, i);
        };
    }
    function or(e, t, n) {
        return function(r, i) {
            var o = r["get" + e]();
            return i[ei((n ? "STANDALONE" : "") + (t ? "SHORT" : "") + e)][o];
        };
    }
    function ar(e, t, n) {
        var r = -1 * n, i = r >= 0 ? "+" : "";
        return i += rr(Math[r > 0 ? "floor" : "ceil"](r / 60), 2) + rr(Math.abs(r % 60), 2);
    }
    function sr(e) {
        var t = new Date(e, 0, 1).getDay();
        return new Date(e, 0, (t <= 4 ? 5 : 12) - t);
    }
    function ur(e) {
        return new Date(e.getFullYear(), e.getMonth(), e.getDate() + (4 - e.getDay()));
    }
    function lr(e) {
        return function(t) {
            var n = sr(t.getFullYear()), r = ur(t), i = +r - +n;
            return rr(1 + Math.round(i / 6048e5), e);
        };
    }
    function cr(e, t) {
        return e.getHours() < 12 ? t.AMPMS[0] : t.AMPMS[1];
    }
    function fr(e, t) {
        return e.getFullYear() <= 0 ? t.ERAS[0] : t.ERAS[1];
    }
    function hr(e, t) {
        return e.getFullYear() <= 0 ? t.ERANAMES[0] : t.ERANAMES[1];
    }
    function pr(e) {
        function t(e) {
            var t;
            if (t = e.match(n)) {
                var r = new Date(0), i = 0, o = 0, a = t[8] ? r.setUTCFullYear : r.setFullYear, s = t[8] ? r.setUTCHours : r.setHours;
                t[9] && (i = p(t[9] + t[10]), o = p(t[9] + t[11])), a.call(r, p(t[1]), p(t[2]) - 1, p(t[3]));
                var u = p(t[4] || 0) - i, l = p(t[5] || 0) - o, c = p(t[6] || 0), f = Math.round(1e3 * parseFloat("0." + (t[7] || 0)));
                return s.call(r, u, l, c, f), r;
            }
            return e;
        }
        var n = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
        return function(n, r, i) {
            var a, s, u = "", l = [];
            if (r = r || "mediumDate", r = e.DATETIME_FORMATS[r] || r, x(n) && (n = Jo.test(n) ? p(n) : t(n)), 
            C(n) && (n = new Date(n)), !S(n) || !isFinite(n.getTime())) return n;
            for (;r; ) s = Xo.exec(r), s ? (l = G(l, s, 1), r = l.pop()) : (l.push(r), r = null);
            var c = n.getTimezoneOffset();
            return i && (c = J(i, c), n = ee(n, i, !0)), o(l, function(t) {
                a = Yo[t], u += a ? a(n, e.DATETIME_FORMATS, c) : "''" === t ? "'" : t.replace(/(^'|'$)/g, "").replace(/''/g, "'");
            }), u;
        };
    }
    function dr() {
        return function(e, t) {
            return y(t) && (t = 2), Y(e, t);
        };
    }
    function mr() {
        return function(e, t, n) {
            return t = Math.abs(Number(t)) === 1 / 0 ? Number(t) : p(t), mi(t) ? e : (C(e) && (e = e.toString()), 
            i(e) ? (n = !n || isNaN(n) ? 0 : p(n), n = n < 0 ? Math.max(0, e.length + n) : n, 
            t >= 0 ? gr(e, n, n + t) : 0 === n ? gr(e, t, e.length) : gr(e, Math.max(0, n + t), n)) : e);
        };
    }
    function gr(e, t, n) {
        return x(e) ? e.slice(t, n) : si.call(e, t, n);
    }
    function vr(e) {
        function t(t) {
            return t.map(function(t) {
                var n = 1, r = g;
                if (_(t)) r = t; else if (x(t) && ("+" !== t.charAt(0) && "-" !== t.charAt(0) || (n = "-" === t.charAt(0) ? -1 : 1, 
                t = t.substring(1)), "" !== t && (r = e(t), r.constant))) {
                    var i = r();
                    r = function(e) {
                        return e[i];
                    };
                }
                return {
                    get: r,
                    descending: n
                };
            });
        }
        function n(e) {
            switch (typeof e) {
              case "number":
              case "boolean":
              case "string":
                return !0;

              default:
                return !1;
            }
        }
        function o(e) {
            return _(e.valueOf) && (e = e.valueOf(), n(e)) ? e : ($(e) && (e = e.toString(), 
            n(e)), e);
        }
        function a(e, t) {
            var n = typeof e;
            return null === e ? (n = "string", e = "null") : "object" === n && (e = o(e)), {
                value: e,
                type: n,
                index: t
            };
        }
        function s(e, t) {
            var n = 0, r = e.type, i = t.type;
            if (r === i) {
                var o = e.value, a = t.value;
                "string" === r ? (o = o.toLowerCase(), a = a.toLowerCase()) : "object" === r && (w(o) && (o = e.index), 
                w(a) && (a = t.index)), o !== a && (n = o < a ? -1 : 1);
            } else n = r < i ? -1 : 1;
            return n;
        }
        return function(e, n, o, u) {
            function l(e, t) {
                return {
                    value: e,
                    tieBreaker: {
                        value: t,
                        type: "number",
                        index: t
                    },
                    predicateValues: f.map(function(n) {
                        return a(n.get(e), t);
                    })
                };
            }
            function c(e, t) {
                for (var n = 0, r = f.length; n < r; n++) {
                    var i = p(e.predicateValues[n], t.predicateValues[n]);
                    if (i) return i * f[n].descending * h;
                }
                return (p(e.tieBreaker, t.tieBreaker) || s(e.tieBreaker, t.tieBreaker)) * h;
            }
            if (null == e) return e;
            if (!i(e)) throw r("orderBy")("notarray", "Expected array but received: {0}", e);
            gi(n) || (n = [ n ]), 0 === n.length && (n = [ "+" ]);
            var f = t(n), h = o ? -1 : 1, p = _(u) ? u : s, d = Array.prototype.map.call(e, l);
            return d.sort(c), e = d.map(function(e) {
                return e.value;
            });
        };
    }
    function $r(e) {
        return _(e) && (e = {
            link: e
        }), e.restrict = e.restrict || "AC", v(e);
    }
    function yr(e, t) {
        e.$name = t;
    }
    function br(e, t, n, r, i) {
        this.$$controls = [], this.$error = {}, this.$$success = {}, this.$pending = void 0, 
        this.$name = i(t.name || t.ngForm || "")(n), this.$dirty = !1, this.$pristine = !0, 
        this.$valid = !0, this.$invalid = !1, this.$submitted = !1, this.$$parentForm = ra, 
        this.$$element = e, this.$$animate = r, wr(this);
    }
    function wr(e) {
        e.$$classCache = {}, e.$$classCache[Ha] = !(e.$$classCache[Va] = e.$$element.hasClass(Va));
    }
    function Er(e) {
        function t(e, t, n, r) {
            e[t] || (e[t] = {}), a(e[t], n, r);
        }
        function n(e, t, n, r) {
            e[t] && s(e[t], n, r), xr(e[t]) && (e[t] = void 0);
        }
        function r(e, t, n) {
            n && !e.$$classCache[t] ? (e.$$animate.addClass(e.$$element, t), e.$$classCache[t] = !0) : !n && e.$$classCache[t] && (e.$$animate.removeClass(e.$$element, t), 
            e.$$classCache[t] = !1);
        }
        function i(e, t, n) {
            t = t ? "-" + he(t, "-") : "", r(e, Va + t, !0 === n), r(e, Ha + t, !1 === n);
        }
        var o = e.clazz, a = e.set, s = e.unset;
        o.prototype.$setValidity = function(e, o, u) {
            y(o) ? t(this, "$pending", e, u) : n(this, "$pending", e, u), j(o) ? o ? (s(this.$error, e, u), 
            a(this.$$success, e, u)) : (a(this.$error, e, u), s(this.$$success, e, u)) : (s(this.$error, e, u), 
            s(this.$$success, e, u)), this.$pending ? (r(this, ia, !0), this.$valid = this.$invalid = void 0, 
            i(this, "", null)) : (r(this, ia, !1), this.$valid = xr(this.$error), this.$invalid = !this.$valid, 
            i(this, "", this.$valid));
            var l;
            l = this.$pending && this.$pending[e] ? void 0 : !this.$error[e] && (!!this.$$success[e] || null), 
            i(this, e, l), this.$$parentForm.$setValidity(e, l, this);
        };
    }
    function xr(e) {
        if (e) for (var t in e) if (e.hasOwnProperty(t)) return !1;
        return !0;
    }
    function Cr(e) {
        e.$formatters.push(function(t) {
            return e.$isEmpty(t) ? t : t.toString();
        });
    }
    function Sr(e, t, n, r, i, o) {
        Tr(e, t, n, r, i, o), Cr(r);
    }
    function Tr(e, t, n, r, i, o) {
        var a = Zr(t[0].type);
        if (!i.android) {
            var s = !1;
            t.on("compositionstart", function() {
                s = !0;
            }), t.on("compositionend", function() {
                s = !1, l();
            });
        }
        var u, l = function(e) {
            if (u && (o.defer.cancel(u), u = null), !s) {
                var i = t.val(), l = e && e.type;
                "password" === a || n.ngTrim && "false" === n.ngTrim || (i = $i(i)), (r.$viewValue !== i || "" === i && r.$$hasNativeValidators) && r.$setViewValue(i, l);
            }
        };
        if (i.hasEvent("input")) t.on("input", l); else {
            var c = function(e, t, n) {
                u || (u = o.defer(function() {
                    u = null, t && t.value === n || l(e);
                }));
            };
            t.on("keydown", function(e) {
                var t = e.keyCode;
                91 === t || 15 < t && t < 19 || 37 <= t && t <= 40 || c(e, this, this.value);
            }), i.hasEvent("paste") && t.on("paste cut", c);
        }
        t.on("change", l), $a[a] && r.$$hasNativeValidators && a === n.type && t.on(va, function(e) {
            if (!u) {
                var t = this[Xr], n = t.badInput, r = t.typeMismatch;
                u = o.defer(function() {
                    u = null, t.badInput === n && t.typeMismatch === r || l(e);
                });
            }
        }), r.$render = function() {
            var e = r.$isEmpty(r.$viewValue) ? "" : r.$viewValue;
            t.val() !== e && t.val(e);
        };
    }
    function _r(e, t) {
        if (S(e)) return e;
        if (x(e)) {
            da.lastIndex = 0;
            var n = da.exec(e);
            if (n) {
                var r = +n[1], i = +n[2], o = 0, a = 0, s = 0, u = 0, l = sr(r), c = 7 * (i - 1);
                return t && (o = t.getHours(), a = t.getMinutes(), s = t.getSeconds(), u = t.getMilliseconds()), 
                new Date(r, 0, l.getDate() + c, o, a, s, u);
            }
        }
        return NaN;
    }
    function Ar(e, t) {
        return function(n, r) {
            var i, a;
            if (S(n)) return n;
            if (x(n)) {
                if ('"' === n.charAt(0) && '"' === n.charAt(n.length - 1) && (n = n.substring(1, n.length - 1)), 
                ua.test(n)) return new Date(n);
                if (e.lastIndex = 0, i = e.exec(n)) return i.shift(), a = r ? {
                    yyyy: r.getFullYear(),
                    MM: r.getMonth() + 1,
                    dd: r.getDate(),
                    HH: r.getHours(),
                    mm: r.getMinutes(),
                    ss: r.getSeconds(),
                    sss: r.getMilliseconds() / 1e3
                } : {
                    yyyy: 1970,
                    MM: 1,
                    dd: 1,
                    HH: 0,
                    mm: 0,
                    ss: 0,
                    sss: 0
                }, o(i, function(e, n) {
                    n < t.length && (a[t[n]] = +e);
                }), new Date(a.yyyy, a.MM - 1, a.dd, a.HH, a.mm, a.ss || 0, 1e3 * a.sss || 0);
            }
            return NaN;
        };
    }
    function Or(e, t, n, r) {
        return function(i, o, a, s, u, l, c) {
            function f(e) {
                return e && !(e.getTime && e.getTime() !== e.getTime());
            }
            function h(e) {
                return b(e) && !S(e) ? n(e) || void 0 : e;
            }
            kr(i, o, a, s), Tr(i, o, a, s, u, l);
            var p, d = s && s.$options.getOption("timezone");
            if (s.$$parserName = e, s.$parsers.push(function(e) {
                if (s.$isEmpty(e)) return null;
                if (t.test(e)) {
                    var r = n(e, p);
                    return d && (r = ee(r, d)), r;
                }
            }), s.$formatters.push(function(e) {
                if (e && !S(e)) throw qa("datefmt", "Expected `{0}` to be a date", e);
                return f(e) ? (p = e, p && d && (p = ee(p, d, !0)), c("date")(e, r, d)) : (p = null, 
                "");
            }), b(a.min) || a.ngMin) {
                var m;
                s.$validators.min = function(e) {
                    return !f(e) || y(m) || n(e) >= m;
                }, a.$observe("min", function(e) {
                    m = h(e), s.$validate();
                });
            }
            if (b(a.max) || a.ngMax) {
                var g;
                s.$validators.max = function(e) {
                    return !f(e) || y(g) || n(e) <= g;
                }, a.$observe("max", function(e) {
                    g = h(e), s.$validate();
                });
            }
        };
    }
    function kr(e, t, n, r) {
        var i = t[0];
        (r.$$hasNativeValidators = w(i.validity)) && r.$parsers.push(function(e) {
            var n = t.prop(Xr) || {};
            return n.badInput || n.typeMismatch ? void 0 : e;
        });
    }
    function Ir(e) {
        e.$$parserName = "number", e.$parsers.push(function(t) {
            return e.$isEmpty(t) ? null : fa.test(t) ? parseFloat(t) : void 0;
        }), e.$formatters.push(function(t) {
            if (!e.$isEmpty(t)) {
                if (!C(t)) throw qa("numfmt", "Expected `{0}` to be a number", t);
                t = t.toString();
            }
            return t;
        });
    }
    function Dr(e) {
        return b(e) && !C(e) && (e = parseFloat(e)), mi(e) ? void 0 : e;
    }
    function Nr(e) {
        return (0 | e) === e;
    }
    function jr(e) {
        var t = e.toString(), n = t.indexOf(".");
        if (-1 === n) {
            if (-1 < e && e < 1) {
                var r = /e-(\d+)$/.exec(t);
                if (r) return Number(r[1]);
            }
            return 0;
        }
        return t.length - n - 1;
    }
    function Pr(e, t, n) {
        var r = Number(e), i = !Nr(r), o = !Nr(t), a = !Nr(n);
        if (i || o || a) {
            var s = i ? jr(r) : 0, u = o ? jr(t) : 0, l = a ? jr(n) : 0, c = Math.max(s, u, l), f = Math.pow(10, c);
            r *= f, t *= f, n *= f, i && (r = Math.round(r)), o && (t = Math.round(t)), a && (n = Math.round(n));
        }
        return (r - t) % n == 0;
    }
    function Mr(e, t, n, r, i, o) {
        kr(e, t, n, r), Ir(r), Tr(e, t, n, r, i, o);
        var a, s;
        if ((b(n.min) || n.ngMin) && (r.$validators.min = function(e) {
            return r.$isEmpty(e) || y(a) || e >= a;
        }, n.$observe("min", function(e) {
            a = Dr(e), r.$validate();
        })), (b(n.max) || n.ngMax) && (r.$validators.max = function(e) {
            return r.$isEmpty(e) || y(s) || e <= s;
        }, n.$observe("max", function(e) {
            s = Dr(e), r.$validate();
        })), b(n.step) || n.ngStep) {
            var u;
            r.$validators.step = function(e, t) {
                return r.$isEmpty(t) || y(u) || Pr(t, a || 0, u);
            }, n.$observe("step", function(e) {
                u = Dr(e), r.$validate();
            });
        }
    }
    function Lr(e, t, n, r, i, o) {
        function a(e, r) {
            t.attr(e, n[e]), n.$observe(e, r);
        }
        function s(e) {
            if (f = Dr(e), !mi(r.$modelValue)) if (c) {
                var n = t.val();
                f > n && (n = f, t.val(n)), r.$setViewValue(n);
            } else r.$validate();
        }
        function u(e) {
            if (h = Dr(e), !mi(r.$modelValue)) if (c) {
                var n = t.val();
                h < n && (t.val(h), n = h < f ? f : h), r.$setViewValue(n);
            } else r.$validate();
        }
        function l(e) {
            p = Dr(e), mi(r.$modelValue) || (c && r.$viewValue !== t.val() ? r.$setViewValue(t.val()) : r.$validate());
        }
        kr(e, t, n, r), Ir(r), Tr(e, t, n, r, i, o);
        var c = r.$$hasNativeValidators && "range" === t[0].type, f = c ? 0 : void 0, h = c ? 100 : void 0, p = c ? 1 : void 0, d = t[0].validity, m = b(n.min), g = b(n.max), v = b(n.step), $ = r.$render;
        r.$render = c && b(d.rangeUnderflow) && b(d.rangeOverflow) ? function() {
            $(), r.$setViewValue(t.val());
        } : $, m && (r.$validators.min = c ? function() {
            return !0;
        } : function(e, t) {
            return r.$isEmpty(t) || y(f) || t >= f;
        }, a("min", s)), g && (r.$validators.max = c ? function() {
            return !0;
        } : function(e, t) {
            return r.$isEmpty(t) || y(h) || t <= h;
        }, a("max", u)), v && (r.$validators.step = c ? function() {
            return !d.stepMismatch;
        } : function(e, t) {
            return r.$isEmpty(t) || y(p) || Pr(t, f || 0, p);
        }, a("step", l));
    }
    function Rr(e, t, n, r, i, o) {
        Tr(e, t, n, r, i, o), Cr(r), r.$$parserName = "url", r.$validators.url = function(e, t) {
            var n = e || t;
            return r.$isEmpty(n) || la.test(n);
        };
    }
    function Vr(e, t, n, r, i, o) {
        Tr(e, t, n, r, i, o), Cr(r), r.$$parserName = "email", r.$validators.email = function(e, t) {
            var n = e || t;
            return r.$isEmpty(n) || ca.test(n);
        };
    }
    function Hr(e, t, n, r) {
        var i = !n.ngTrim || "false" !== $i(n.ngTrim);
        y(n.name) && t.attr("name", u());
        var o = function(e) {
            var o;
            t[0].checked && (o = n.value, i && (o = $i(o)), r.$setViewValue(o, e && e.type));
        };
        t.on("click", o), r.$render = function() {
            var e = n.value;
            i && (e = $i(e)), t[0].checked = e === r.$viewValue;
        }, n.$observe("value", r.$render);
    }
    function Fr(e, t, n, r, i) {
        var o;
        if (b(r)) {
            if (o = e(r), !o.constant) throw qa("constexpr", "Expected constant expression for `{0}`, but saw `{1}`.", n, r);
            return o(t);
        }
        return i;
    }
    function Ur(e, t, n, r, i, o, a, s) {
        var u = Fr(s, e, "ngTrueValue", n.ngTrueValue, !0), l = Fr(s, e, "ngFalseValue", n.ngFalseValue, !1), c = function(e) {
            r.$setViewValue(t[0].checked, e && e.type);
        };
        t.on("click", c), r.$render = function() {
            t[0].checked = r.$viewValue;
        }, r.$isEmpty = function(e) {
            return !1 === e;
        }, r.$formatters.push(function(e) {
            return W(e, u);
        }), r.$parsers.push(function(e) {
            return e ? u : l;
        });
    }
    function qr(e, t) {
        function n(e, t) {
            if (!e || !e.length) return [];
            if (!t || !t.length) return e;
            var n = [];
            e: for (var r = 0; r < e.length; r++) {
                for (var i = e[r], o = 0; o < t.length; o++) if (i === t[o]) continue e;
                n.push(i);
            }
            return n;
        }
        function r(e) {
            return e && e.split(" ");
        }
        function i(e) {
            var t = e;
            return gi(e) ? t = e.map(i).join(" ") : w(e) && (t = Object.keys(e).filter(function(t) {
                return e[t];
            }).join(" ")), t;
        }
        function a(e) {
            var t = e;
            if (gi(e)) t = e.map(a); else if (w(e)) {
                var n = !1;
                t = Object.keys(e).filter(function(t) {
                    var r = e[t];
                    return !n && y(r) && (n = !0), r;
                }), n && t.push(void 0);
            }
            return t;
        }
        e = "ngClass" + e;
        var s;
        return [ "$parse", function(u) {
            return {
                restrict: "AC",
                link: function(l, c, f) {
                    function h(e) {
                        e = m(r(e), 1), f.$addClass(e);
                    }
                    function p(e) {
                        e = m(r(e), -1), f.$removeClass(e);
                    }
                    function d(e, t) {
                        var i = r(e), o = r(t), a = n(i, o), s = n(o, i), u = m(a, -1), l = m(s, 1);
                        f.$addClass(l), f.$removeClass(u);
                    }
                    function m(e, t) {
                        var n = [];
                        return o(e, function(e) {
                            (t > 0 || S[e]) && (S[e] = (S[e] || 0) + t, S[e] === +(t > 0) && n.push(e));
                        }), n.join(" ");
                    }
                    function g(e) {
                        e === t ? h(y) : p(y), T = e;
                    }
                    function v(e) {
                        var t = i(e);
                        t !== y && $(t);
                    }
                    function $(e) {
                        T === t && d(y, e), y = e;
                    }
                    var y, b = f[e].trim(), w = ":" === b.charAt(0) && ":" === b.charAt(1), E = w ? a : i, x = u(b, E), C = w ? v : $, S = c.data("$classCounts"), T = !0;
                    S || (S = $e(), c.data("$classCounts", S)), "ngClass" !== e && (s || (s = u("$index", function(e) {
                        return 1 & e;
                    })), l.$watch(s, g)), l.$watch(x, C, w);
                }
            };
        } ];
    }
    function Br(e, t, n, r, i, o, a, s, u) {
        this.$viewValue = Number.NaN, this.$modelValue = Number.NaN, this.$$rawModelValue = void 0, 
        this.$validators = {}, this.$asyncValidators = {}, this.$parsers = [], this.$formatters = [], 
        this.$viewChangeListeners = [], this.$untouched = !0, this.$touched = !1, this.$pristine = !0, 
        this.$dirty = !1, this.$valid = !0, this.$invalid = !1, this.$error = {}, this.$$success = {}, 
        this.$pending = void 0, this.$name = u(n.name || "", !1)(e), this.$$parentForm = ra, 
        this.$options = Ba, this.$$parsedNgModel = i(n.ngModel), this.$$parsedNgModelAssign = this.$$parsedNgModel.assign, 
        this.$$ngModelGet = this.$$parsedNgModel, this.$$ngModelSet = this.$$parsedNgModelAssign, 
        this.$$pendingDebounce = null, this.$$parserValid = void 0, this.$$currentValidationRunId = 0, 
        Object.defineProperty(this, "$$scope", {
            value: e
        }), this.$$attr = n, this.$$element = r, this.$$animate = o, this.$$timeout = a, 
        this.$$parse = i, this.$$q = s, this.$$exceptionHandler = t, wr(this), Wr(this);
    }
    function Wr(e) {
        e.$$scope.$watch(function(t) {
            var n = e.$$ngModelGet(t);
            if (n !== e.$modelValue && (e.$modelValue === e.$modelValue || n === n)) {
                e.$modelValue = e.$$rawModelValue = n, e.$$parserValid = void 0;
                for (var r = e.$formatters, i = r.length, o = n; i--; ) o = r[i](o);
                e.$viewValue !== o && (e.$$updateEmptyClasses(o), e.$viewValue = e.$$lastCommittedViewValue = o, 
                e.$render(), e.$$runValidators(e.$modelValue, e.$viewValue, m));
            }
            return n;
        });
    }
    function Gr(e) {
        this.$$options = e;
    }
    function zr(e, t) {
        o(t, function(t, n) {
            b(e[n]) || (e[n] = t);
        });
    }
    function Kr(e, t) {
        e.prop("selected", t), e.attr("selected", t);
    }
    var Qr = {
        objectMaxDepth: 5
    }, Yr = /^\/(.+)\/([a-z]*)$/, Xr = "validity", Jr = Object.prototype.hasOwnProperty, Zr = function(e) {
        return x(e) ? e.toLowerCase() : e;
    }, ei = function(e) {
        return x(e) ? e.toUpperCase() : e;
    }, ti = function(e) {
        return x(e) ? e.replace(/[A-Z]/g, function(e) {
            return String.fromCharCode(32 | e.charCodeAt(0));
        }) : e;
    }, ni = function(e) {
        return x(e) ? e.replace(/[a-z]/g, function(e) {
            return String.fromCharCode(-33 & e.charCodeAt(0));
        }) : e;
    };
    "i" !== "I".toLowerCase() && (Zr = ti, ei = ni);
    var ri, ii, oi, ai, si = [].slice, ui = [].splice, li = [].push, ci = Object.prototype.toString, fi = Object.getPrototypeOf, hi = r("ng"), pi = e.angular || (e.angular = {}), di = 0;
    ri = e.document.documentMode;
    var mi = Number.isNaN || function(e) {
        return e !== e;
    };
    m.$inject = [], g.$inject = [];
    var gi = Array.isArray, vi = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/, $i = function(e) {
        return x(e) ? e.trim() : e;
    }, yi = function(e) {
        return e.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
    }, bi = function() {
        if (!b(bi.rules)) {
            var t = e.document.querySelector("[ng-csp]") || e.document.querySelector("[data-ng-csp]");
            if (t) {
                var n = t.getAttribute("ng-csp") || t.getAttribute("data-ng-csp");
                bi.rules = {
                    noUnsafeEval: !n || -1 !== n.indexOf("no-unsafe-eval"),
                    noInlineStyle: !n || -1 !== n.indexOf("no-inline-style")
                };
            } else bi.rules = {
                noUnsafeEval: function() {
                    try {
                        return new Function(""), !1;
                    } catch (e) {
                        return !0;
                    }
                }(),
                noInlineStyle: !1
            };
        }
        return bi.rules;
    }, wi = function() {
        if (b(wi.name_)) return wi.name_;
        var t, n, r, i, o = xi.length;
        for (n = 0; n < o; ++n) if (r = xi[n], t = e.document.querySelector("[" + r.replace(":", "\\:") + "jq]")) {
            i = t.getAttribute(r + "jq");
            break;
        }
        return wi.name_ = i;
    }, Ei = /:/g, xi = [ "ng-", "data-ng-", "ng:", "x-ng-" ], Ci = function(t) {
        var n = t.currentScript;
        if (!n) return !0;
        if (!(n instanceof e.HTMLScriptElement || n instanceof e.SVGScriptElement)) return !1;
        var r = n.attributes;
        return [ r.getNamedItem("src"), r.getNamedItem("href"), r.getNamedItem("xlink:href") ].every(function(e) {
            if (!e) return !0;
            if (!e.value) return !1;
            var n = t.createElement("a");
            if (n.href = e.value, t.location.origin === n.origin) return !0;
            switch (n.protocol) {
              case "http:":
              case "https:":
              case "ftp:":
              case "blob:":
              case "file:":
              case "data:":
                return !0;

              default:
                return !1;
            }
        });
    }(e.document), Si = /[A-Z]/g, Ti = !1, _i = 1, Ai = 3, Oi = 8, ki = 9, Ii = 11, Di = {
        full: "1.6.6",
        major: 1,
        minor: 6,
        dot: 6,
        codeName: "interdimensional-cable"
    };
    je.expando = "ng339";
    var Ni = je.cache = {}, ji = 1;
    je._data = function(e) {
        return this.cache[e[this.expando]] || {};
    };
    var Pi = /-([a-z])/g, Mi = /^-ms-/, Li = {
        mouseleave: "mouseout",
        mouseenter: "mouseover"
    }, Ri = r("jqLite"), Vi = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/, Hi = /<|&#?\w+;/, Fi = /<([\w:-]+)/, Ui = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi, qi = {
        option: [ 1, '<select multiple="multiple">', "</select>" ],
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: [ 0, "", "" ]
    };
    qi.optgroup = qi.option, qi.tbody = qi.tfoot = qi.colgroup = qi.caption = qi.thead, 
    qi.th = qi.td;
    var Bi = e.Node.prototype.contains || function(e) {
        return !!(16 & this.compareDocumentPosition(e));
    }, Wi = je.prototype = {
        ready: Ye,
        toString: function() {
            var e = [];
            return o(this, function(t) {
                e.push("" + t);
            }), "[" + e.join(", ") + "]";
        },
        eq: function(e) {
            return ii(e >= 0 ? this[e] : this[this.length + e]);
        },
        length: 0,
        push: li,
        sort: [].sort,
        splice: [].splice
    }, Gi = {};
    o("multiple,selected,checked,disabled,readOnly,required,open".split(","), function(e) {
        Gi[Zr(e)] = e;
    });
    var zi = {};
    o("input,select,option,textarea,button,form,details".split(","), function(e) {
        zi[e] = !0;
    });
    var Ki = {
        ngMinlength: "minlength",
        ngMaxlength: "maxlength",
        ngMin: "min",
        ngMax: "max",
        ngPattern: "pattern",
        ngStep: "step"
    };
    o({
        data: He,
        removeData: Re,
        hasData: ke,
        cleanData: function(e) {
            for (var t = 0, n = e.length; t < n; t++) Re(e[t]);
        }
    }, function(e, t) {
        je[t] = e;
    }), o({
        data: He,
        inheritedData: Ge,
        scope: function(e) {
            return ii.data(e, "$scope") || Ge(e.parentNode || e, [ "$isolateScope", "$scope" ]);
        },
        isolateScope: function(e) {
            return ii.data(e, "$isolateScope") || ii.data(e, "$isolateScopeNoTemplate");
        },
        controller: We,
        injector: function(e) {
            return Ge(e, "$injector");
        },
        removeAttr: function(e, t) {
            e.removeAttribute(t);
        },
        hasClass: Fe,
        css: function(e, t, n) {
            if (t = Se(t), !b(n)) return e.style[t];
            e.style[t] = n;
        },
        attr: function(e, t, n) {
            var r, i = e.nodeType;
            if (i !== Ai && 2 !== i && i !== Oi && e.getAttribute) {
                var o = Zr(t), a = Gi[o];
                if (!b(n)) return r = e.getAttribute(t), a && null !== r && (r = o), null === r ? void 0 : r;
                null === n || !1 === n && a ? e.removeAttribute(t) : e.setAttribute(t, a ? o : n);
            }
        },
        prop: function(e, t, n) {
            if (!b(n)) return e[t];
            e[t] = n;
        },
        text: function() {
            function e(e, t) {
                if (y(t)) {
                    var n = e.nodeType;
                    return n === _i || n === Ai ? e.textContent : "";
                }
                e.textContent = t;
            }
            return e.$dv = "", e;
        }(),
        val: function(e, t) {
            if (y(t)) {
                if (e.multiple && "select" === H(e)) {
                    var n = [];
                    return o(e.options, function(e) {
                        e.selected && n.push(e.value || e.text);
                    }), n;
                }
                return e.value;
            }
            e.value = t;
        },
        html: function(e, t) {
            if (y(t)) return e.innerHTML;
            Me(e, !0), e.innerHTML = t;
        },
        empty: ze
    }, function(e, t) {
        je.prototype[t] = function(t, n) {
            var r, i, o = this.length;
            if (e !== ze && y(2 === e.length && e !== Fe && e !== We ? t : n)) {
                if (w(t)) {
                    for (r = 0; r < o; r++) if (e === He) e(this[r], t); else for (i in t) e(this[r], i, t[i]);
                    return this;
                }
                for (var a = e.$dv, s = y(a) ? Math.min(o, 1) : o, u = 0; u < s; u++) {
                    var l = e(this[u], t, n);
                    a = a ? a + l : l;
                }
                return a;
            }
            for (r = 0; r < o; r++) e(this[r], t, n);
            return this;
        };
    }), o({
        removeData: Re,
        on: function(e, t, n, r) {
            if (b(r)) throw Ri("onargs", "jqLite#on() does not support the `selector` or `eventData` parameters");
            if (Oe(e)) {
                var i = Ve(e, !0), o = i.events, a = i.handle;
                a || (a = i.handle = Ze(e, o));
                for (var s = t.indexOf(" ") >= 0 ? t.split(" ") : [ t ], u = s.length, l = function(t, r, i) {
                    var s = o[t];
                    s || (s = o[t] = [], s.specialHandlerWrapper = r, "$destroy" === t || i || e.addEventListener(t, a)), 
                    s.push(n);
                }; u--; ) t = s[u], Li[t] ? (l(Li[t], tt), l(t, void 0, !0)) : l(t);
            }
        },
        off: Le,
        one: function(e, t, n) {
            e = ii(e), e.on(t, function r() {
                e.off(t, n), e.off(t, r);
            }), e.on(t, n);
        },
        replaceWith: function(e, t) {
            var n, r = e.parentNode;
            Me(e), o(new je(t), function(t) {
                n ? r.insertBefore(t, n.nextSibling) : r.replaceChild(t, e), n = t;
            });
        },
        children: function(e) {
            var t = [];
            return o(e.childNodes, function(e) {
                e.nodeType === _i && t.push(e);
            }), t;
        },
        contents: function(e) {
            return e.contentDocument || e.childNodes || [];
        },
        append: function(e, t) {
            var n = e.nodeType;
            if (n === _i || n === Ii) {
                t = new je(t);
                for (var r = 0, i = t.length; r < i; r++) {
                    var o = t[r];
                    e.appendChild(o);
                }
            }
        },
        prepend: function(e, t) {
            if (e.nodeType === _i) {
                var n = e.firstChild;
                o(new je(t), function(t) {
                    e.insertBefore(t, n);
                });
            }
        },
        wrap: function(e, t) {
            Ne(e, ii(t).eq(0).clone()[0]);
        },
        remove: Ke,
        detach: function(e) {
            Ke(e, !0);
        },
        after: function(e, t) {
            var n = e, r = e.parentNode;
            if (r) {
                t = new je(t);
                for (var i = 0, o = t.length; i < o; i++) {
                    var a = t[i];
                    r.insertBefore(a, n.nextSibling), n = a;
                }
            }
        },
        addClass: qe,
        removeClass: Ue,
        toggleClass: function(e, t, n) {
            t && o(t.split(" "), function(t) {
                var r = n;
                y(r) && (r = !Fe(e, t)), (r ? qe : Ue)(e, t);
            });
        },
        parent: function(e) {
            var t = e.parentNode;
            return t && t.nodeType !== Ii ? t : null;
        },
        next: function(e) {
            return e.nextElementSibling;
        },
        find: function(e, t) {
            return e.getElementsByTagName ? e.getElementsByTagName(t) : [];
        },
        clone: Pe,
        triggerHandler: function(e, t, n) {
            var r, i, a, s = t.type || t, u = Ve(e), l = u && u.events, c = l && l[s];
            c && (r = {
                preventDefault: function() {
                    this.defaultPrevented = !0;
                },
                isDefaultPrevented: function() {
                    return !0 === this.defaultPrevented;
                },
                stopImmediatePropagation: function() {
                    this.immediatePropagationStopped = !0;
                },
                isImmediatePropagationStopped: function() {
                    return !0 === this.immediatePropagationStopped;
                },
                stopPropagation: m,
                type: s,
                target: e
            }, t.type && (r = f(r, t)), i = we(c), a = n ? [ r ].concat(n) : [ r ], o(i, function(t) {
                r.isImmediatePropagationStopped() || t.apply(e, a);
            }));
        }
    }, function(e, t) {
        je.prototype[t] = function(t, n, r) {
            for (var i, o = 0, a = this.length; o < a; o++) y(i) ? (i = e(this[o], t, n, r), 
            b(i) && (i = ii(i))) : Be(i, e(this[o], t, n, r));
            return b(i) ? i : this;
        };
    }), je.prototype.bind = je.prototype.on, je.prototype.unbind = je.prototype.off;
    var Qi = Object.create(null);
    it.prototype = {
        _idx: function(e) {
            return e === this._lastKey ? this._lastIndex : (this._lastKey = e, this._lastIndex = this._keys.indexOf(e), 
            this._lastIndex);
        },
        _transformKey: function(e) {
            return mi(e) ? Qi : e;
        },
        get: function(e) {
            e = this._transformKey(e);
            var t = this._idx(e);
            if (-1 !== t) return this._values[t];
        },
        set: function(e, t) {
            e = this._transformKey(e);
            var n = this._idx(e);
            -1 === n && (n = this._lastIndex = this._keys.length), this._keys[n] = e, this._values[n] = t;
        },
        delete: function(e) {
            e = this._transformKey(e);
            var t = this._idx(e);
            return -1 !== t && (this._keys.splice(t, 1), this._values.splice(t, 1), this._lastKey = NaN, 
            this._lastIndex = -1, !0);
        }
    };
    var Yi = it, Xi = [ function() {
        this.$get = [ function() {
            return Yi;
        } ];
    } ], Ji = /^([^(]+?)=>/, Zi = /^[^(]*\(\s*([^)]*)\)/m, eo = /,/, to = /^\s*(_?)(\S+?)\1\s*$/, no = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm, ro = r("$injector");
    lt.$$annotate = ut;
    var io = r("$animate"), oo = 1, ao = function() {
        this.$get = m;
    }, so = function() {
        var e = new Yi(), t = [];
        this.$get = [ "$$AnimateRunner", "$rootScope", function(n, r) {
            function i(e, t, n) {
                var r = !1;
                return t && (t = x(t) ? t.split(" ") : gi(t) ? t : [], o(t, function(t) {
                    t && (r = !0, e[t] = n);
                })), r;
            }
            function a() {
                o(t, function(t) {
                    var n = e.get(t);
                    if (n) {
                        var r = pt(t.attr("class")), i = "", a = "";
                        o(n, function(e, t) {
                            e !== !!r[t] && (e ? i += (i.length ? " " : "") + t : a += (a.length ? " " : "") + t);
                        }), o(t, function(e) {
                            i && qe(e, i), a && Ue(e, a);
                        }), e.delete(t);
                    }
                }), t.length = 0;
            }
            function s(n, o, s) {
                var u = e.get(n) || {}, l = i(u, o, !0), c = i(u, s, !1);
                (l || c) && (e.set(n, u), t.push(n), 1 === t.length && r.$$postDigest(a));
            }
            return {
                enabled: m,
                on: m,
                off: m,
                pin: m,
                push: function(e, t, r, i) {
                    i && i(), r = r || {}, r.from && e.css(r.from), r.to && e.css(r.to), (r.addClass || r.removeClass) && s(e, r.addClass, r.removeClass);
                    var o = new n();
                    return o.complete(), o;
                }
            };
        } ];
    }, uo = [ "$provide", function(e) {
        var t = this, n = null, r = null;
        this.$$registeredAnimations = Object.create(null), this.register = function(n, r) {
            if (n && "." !== n.charAt(0)) throw io("notcsel", "Expecting class selector starting with '.' got '{0}'.", n);
            var i = n + "-animation";
            t.$$registeredAnimations[n.substr(1)] = i, e.factory(i, r);
        }, this.customFilter = function(e) {
            return 1 === arguments.length && (r = _(e) ? e : null), r;
        }, this.classNameFilter = function(e) {
            if (1 === arguments.length && (n = e instanceof RegExp ? e : null)) {
                if (new RegExp("[(\\s|\\/)]ng-animate[(\\s|\\/)]").test(n.toString())) throw n = null, 
                io("nongcls", '$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', "ng-animate");
            }
            return n;
        }, this.$get = [ "$$animateQueue", function(e) {
            function t(e, t, n) {
                if (n) {
                    var r = ht(n);
                    !r || r.parentNode || r.previousElementSibling || (n = null);
                }
                n ? n.after(e) : t.prepend(e);
            }
            return {
                on: e.on,
                off: e.off,
                pin: e.pin,
                enabled: e.enabled,
                cancel: function(e) {
                    e.end && e.end();
                },
                enter: function(n, r, i, o) {
                    return r = r && ii(r), i = i && ii(i), r = r || i.parent(), t(n, r, i), e.push(n, "enter", dt(o));
                },
                move: function(n, r, i, o) {
                    return r = r && ii(r), i = i && ii(i), r = r || i.parent(), t(n, r, i), e.push(n, "move", dt(o));
                },
                leave: function(t, n) {
                    return e.push(t, "leave", dt(n), function() {
                        t.remove();
                    });
                },
                addClass: function(t, n, r) {
                    return r = dt(r), r.addClass = ft(r.addclass, n), e.push(t, "addClass", r);
                },
                removeClass: function(t, n, r) {
                    return r = dt(r), r.removeClass = ft(r.removeClass, n), e.push(t, "removeClass", r);
                },
                setClass: function(t, n, r, i) {
                    return i = dt(i), i.addClass = ft(i.addClass, n), i.removeClass = ft(i.removeClass, r), 
                    e.push(t, "setClass", i);
                },
                animate: function(t, n, r, i, o) {
                    return o = dt(o), o.from = o.from ? f(o.from, n) : n, o.to = o.to ? f(o.to, r) : r, 
                    i = i || "ng-inline-animate", o.tempClasses = ft(o.tempClasses, i), e.push(t, "animate", o);
                }
            };
        } ];
    } ], lo = function() {
        this.$get = [ "$$rAF", function(e) {
            function t(t) {
                n.push(t), n.length > 1 || e(function() {
                    for (var e = 0; e < n.length; e++) n[e]();
                    n = [];
                });
            }
            var n = [];
            return function() {
                var e = !1;
                return t(function() {
                    e = !0;
                }), function(n) {
                    e ? n() : t(n);
                };
            };
        } ];
    }, co = function() {
        this.$get = [ "$q", "$sniffer", "$$animateAsyncRun", "$$isDocumentHidden", "$timeout", function(e, t, n, r, i) {
            function a(e) {
                this.setHost(e);
                var t = n(), o = function(e) {
                    i(e, 0, !1);
                };
                this._doneCallbacks = [], this._tick = function(e) {
                    r() ? o(e) : t(e);
                }, this._state = 0;
            }
            return a.chain = function(e, t) {
                function n() {
                    if (r === e.length) return void t(!0);
                    e[r](function(e) {
                        if (!1 === e) return void t(!1);
                        r++, n();
                    });
                }
                var r = 0;
                n();
            }, a.all = function(e, t) {
                function n(n) {
                    i = i && n, ++r === e.length && t(i);
                }
                var r = 0, i = !0;
                o(e, function(e) {
                    e.done(n);
                });
            }, a.prototype = {
                setHost: function(e) {
                    this.host = e || {};
                },
                done: function(e) {
                    2 === this._state ? e() : this._doneCallbacks.push(e);
                },
                progress: m,
                getPromise: function() {
                    if (!this.promise) {
                        var t = this;
                        this.promise = e(function(e, n) {
                            t.done(function(t) {
                                !1 === t ? n() : e();
                            });
                        });
                    }
                    return this.promise;
                },
                then: function(e, t) {
                    return this.getPromise().then(e, t);
                },
                catch: function(e) {
                    return this.getPromise().catch(e);
                },
                finally: function(e) {
                    return this.getPromise().finally(e);
                },
                pause: function() {
                    this.host.pause && this.host.pause();
                },
                resume: function() {
                    this.host.resume && this.host.resume();
                },
                end: function() {
                    this.host.end && this.host.end(), this._resolve(!0);
                },
                cancel: function() {
                    this.host.cancel && this.host.cancel(), this._resolve(!1);
                },
                complete: function(e) {
                    var t = this;
                    0 === t._state && (t._state = 1, t._tick(function() {
                        t._resolve(e);
                    }));
                },
                _resolve: function(e) {
                    2 !== this._state && (o(this._doneCallbacks, function(t) {
                        t(e);
                    }), this._doneCallbacks.length = 0, this._state = 2);
                }
            }, a;
        } ];
    }, fo = function() {
        this.$get = [ "$$rAF", "$q", "$$AnimateRunner", function(e, t, n) {
            return function(t, r) {
                function i() {
                    return e(function() {
                        o(), s || u.complete(), s = !0;
                    }), u;
                }
                function o() {
                    a.addClass && (t.addClass(a.addClass), a.addClass = null), a.removeClass && (t.removeClass(a.removeClass), 
                    a.removeClass = null), a.to && (t.css(a.to), a.to = null);
                }
                var a = r || {};
                a.$$prepared || (a = q(a)), a.cleanupStyles && (a.from = a.to = null), a.from && (t.css(a.from), 
                a.from = null);
                var s, u = new n();
                return {
                    start: i,
                    end: i
                };
            };
        } ];
    }, ho = r("$compile"), po = new yt();
    bt.$inject = [ "$provide", "$$sanitizeUriProvider" ], wt.prototype.isFirstChange = function() {
        return this.previousValue === po;
    };
    var mo = /^((?:x|data)[:\-_])/i, go = /[:\-_]+(.)/g, vo = r("$controller"), $o = /^(\S+)(\s+as\s+([\w$]+))?$/, yo = function() {
        this.$get = [ "$document", function(e) {
            return function(t) {
                return t ? !t.nodeType && t instanceof ii && (t = t[0]) : t = e[0].body, t.offsetWidth + 1;
            };
        } ];
    }, bo = "application/json", wo = {
        "Content-Type": bo + ";charset=utf-8"
    }, Eo = /^\[|^\{(?!\{)/, xo = {
        "[": /]$/,
        "{": /}$/
    }, Co = /^\)]\}',?\n/, So = r("$http"), To = pi.$interpolateMinErr = r("$interpolate");
    To.throwNoconcat = function(e) {
        throw To("noconcat", "Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce", e);
    }, To.interr = function(e, t) {
        return To("interr", "Can't interpolate: {0}\n{1}", e, t.toString());
    };
    var _o = function() {
        this.$get = function() {
            function e(e) {
                var t = function(e) {
                    t.data = e, t.called = !0;
                };
                return t.id = e, t;
            }
            var t = pi.callbacks, n = {};
            return {
                createCallback: function(r) {
                    var i = "_" + (t.$$counter++).toString(36), o = "angular.callbacks." + i, a = e(i);
                    return n[o] = t[i] = a, o;
                },
                wasCalled: function(e) {
                    return n[e].called;
                },
                getResponse: function(e) {
                    return n[e].data;
                },
                removeCallback: function(e) {
                    var r = n[e];
                    delete t[r.id], delete n[e];
                }
            };
        };
    }, Ao = /^([^?#]*)(\?([^#]*))?(#(.*))?$/, Oo = {
        http: 80,
        https: 443,
        ftp: 21
    }, ko = r("$location"), Io = /^\s*[\\\/]{2,}/, Do = {
        $$absUrl: "",
        $$html5: !1,
        $$replace: !1,
        absUrl: rn("$$absUrl"),
        url: function(e) {
            if (y(e)) return this.$$url;
            var t = Ao.exec(e);
            return (t[1] || "" === e) && this.path(decodeURIComponent(t[1])), (t[2] || t[1] || "" === e) && this.search(t[3] || ""), 
            this.hash(t[5] || ""), this;
        },
        protocol: rn("$$protocol"),
        host: rn("$$host"),
        port: rn("$$port"),
        path: on("$$path", function(e) {
            return e = null !== e ? e.toString() : "", "/" === e.charAt(0) ? e : "/" + e;
        }),
        search: function(e, t) {
            switch (arguments.length) {
              case 0:
                return this.$$search;

              case 1:
                if (x(e) || C(e)) e = e.toString(), this.$$search = re(e); else {
                    if (!w(e)) throw ko("isrcharg", "The first argument of the `$location#search()` call must be a string or an object.");
                    e = q(e, {}), o(e, function(t, n) {
                        null == t && delete e[n];
                    }), this.$$search = e;
                }
                break;

              default:
                y(t) || null === t ? delete this.$$search[e] : this.$$search[e] = t;
            }
            return this.$$compose(), this;
        },
        hash: on("$$hash", function(e) {
            return null !== e ? e.toString() : "";
        }),
        replace: function() {
            return this.$$replace = !0, this;
        }
    };
    o([ nn, tn, en ], function(e) {
        e.prototype = Object.create(Do), e.prototype.state = function(t) {
            if (!arguments.length) return this.$$state;
            if (e !== en || !this.$$html5) throw ko("nostate", "History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");
            return this.$$state = y(t) ? null : t, this.$$urlUpdatedByLocation = !0, this;
        };
    });
    var No = r("$parse"), jo = {}.constructor.prototype.valueOf, Po = $e();
    o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "), function(e) {
        Po[e] = !0;
    });
    var Mo = {
        n: "\n",
        f: "\f",
        r: "\r",
        t: "\t",
        v: "\v",
        "'": "'",
        '"': '"'
    }, Lo = function(e) {
        this.options = e;
    };
    Lo.prototype = {
        constructor: Lo,
        lex: function(e) {
            for (this.text = e, this.index = 0, this.tokens = []; this.index < this.text.length; ) {
                var t = this.text.charAt(this.index);
                if ('"' === t || "'" === t) this.readString(t); else if (this.isNumber(t) || "." === t && this.isNumber(this.peek())) this.readNumber(); else if (this.isIdentifierStart(this.peekMultichar())) this.readIdent(); else if (this.is(t, "(){}[].,;:?")) this.tokens.push({
                    index: this.index,
                    text: t
                }), this.index++; else if (this.isWhitespace(t)) this.index++; else {
                    var n = t + this.peek(), r = n + this.peek(2), i = Po[t], o = Po[n], a = Po[r];
                    if (i || o || a) {
                        var s = a ? r : o ? n : t;
                        this.tokens.push({
                            index: this.index,
                            text: s,
                            operator: !0
                        }), this.index += s.length;
                    } else this.throwError("Unexpected next character ", this.index, this.index + 1);
                }
            }
            return this.tokens;
        },
        is: function(e, t) {
            return -1 !== t.indexOf(e);
        },
        peek: function(e) {
            var t = e || 1;
            return this.index + t < this.text.length && this.text.charAt(this.index + t);
        },
        isNumber: function(e) {
            return "0" <= e && e <= "9" && "string" == typeof e;
        },
        isWhitespace: function(e) {
            return " " === e || "\r" === e || "\t" === e || "\n" === e || "\v" === e || " " === e;
        },
        isIdentifierStart: function(e) {
            return this.options.isIdentifierStart ? this.options.isIdentifierStart(e, this.codePointAt(e)) : this.isValidIdentifierStart(e);
        },
        isValidIdentifierStart: function(e) {
            return "a" <= e && e <= "z" || "A" <= e && e <= "Z" || "_" === e || "$" === e;
        },
        isIdentifierContinue: function(e) {
            return this.options.isIdentifierContinue ? this.options.isIdentifierContinue(e, this.codePointAt(e)) : this.isValidIdentifierContinue(e);
        },
        isValidIdentifierContinue: function(e, t) {
            return this.isValidIdentifierStart(e, t) || this.isNumber(e);
        },
        codePointAt: function(e) {
            return 1 === e.length ? e.charCodeAt(0) : (e.charCodeAt(0) << 10) + e.charCodeAt(1) - 56613888;
        },
        peekMultichar: function() {
            var e = this.text.charAt(this.index), t = this.peek();
            if (!t) return e;
            var n = e.charCodeAt(0), r = t.charCodeAt(0);
            return n >= 55296 && n <= 56319 && r >= 56320 && r <= 57343 ? e + t : e;
        },
        isExpOperator: function(e) {
            return "-" === e || "+" === e || this.isNumber(e);
        },
        throwError: function(e, t, n) {
            n = n || this.index;
            var r = b(t) ? "s " + t + "-" + this.index + " [" + this.text.substring(t, n) + "]" : " " + n;
            throw No("lexerr", "Lexer Error: {0} at column{1} in expression [{2}].", e, r, this.text);
        },
        readNumber: function() {
            for (var e = "", t = this.index; this.index < this.text.length; ) {
                var n = Zr(this.text.charAt(this.index));
                if ("." === n || this.isNumber(n)) e += n; else {
                    var r = this.peek();
                    if ("e" === n && this.isExpOperator(r)) e += n; else if (this.isExpOperator(n) && r && this.isNumber(r) && "e" === e.charAt(e.length - 1)) e += n; else {
                        if (!this.isExpOperator(n) || r && this.isNumber(r) || "e" !== e.charAt(e.length - 1)) break;
                        this.throwError("Invalid exponent");
                    }
                }
                this.index++;
            }
            this.tokens.push({
                index: t,
                text: e,
                constant: !0,
                value: Number(e)
            });
        },
        readIdent: function() {
            var e = this.index;
            for (this.index += this.peekMultichar().length; this.index < this.text.length; ) {
                var t = this.peekMultichar();
                if (!this.isIdentifierContinue(t)) break;
                this.index += t.length;
            }
            this.tokens.push({
                index: e,
                text: this.text.slice(e, this.index),
                identifier: !0
            });
        },
        readString: function(e) {
            var t = this.index;
            this.index++;
            for (var n = "", r = e, i = !1; this.index < this.text.length; ) {
                var o = this.text.charAt(this.index);
                if (r += o, i) {
                    if ("u" === o) {
                        var a = this.text.substring(this.index + 1, this.index + 5);
                        a.match(/[\da-f]{4}/i) || this.throwError("Invalid unicode escape [\\u" + a + "]"), 
                        this.index += 4, n += String.fromCharCode(parseInt(a, 16));
                    } else {
                        n += Mo[o] || o;
                    }
                    i = !1;
                } else if ("\\" === o) i = !0; else {
                    if (o === e) return this.index++, void this.tokens.push({
                        index: t,
                        text: r,
                        constant: !0,
                        value: n
                    });
                    n += o;
                }
                this.index++;
            }
            this.throwError("Unterminated quote", t);
        }
    };
    var Ro = function(e, t) {
        this.lexer = e, this.options = t;
    };
    Ro.Program = "Program", Ro.ExpressionStatement = "ExpressionStatement", Ro.AssignmentExpression = "AssignmentExpression", 
    Ro.ConditionalExpression = "ConditionalExpression", Ro.LogicalExpression = "LogicalExpression", 
    Ro.BinaryExpression = "BinaryExpression", Ro.UnaryExpression = "UnaryExpression", 
    Ro.CallExpression = "CallExpression", Ro.MemberExpression = "MemberExpression", 
    Ro.Identifier = "Identifier", Ro.Literal = "Literal", Ro.ArrayExpression = "ArrayExpression", 
    Ro.Property = "Property", Ro.ObjectExpression = "ObjectExpression", Ro.ThisExpression = "ThisExpression", 
    Ro.LocalsExpression = "LocalsExpression", Ro.NGValueParameter = "NGValueParameter", 
    Ro.prototype = {
        ast: function(e) {
            this.text = e, this.tokens = this.lexer.lex(e);
            var t = this.program();
            return 0 !== this.tokens.length && this.throwError("is an unexpected token", this.tokens[0]), 
            t;
        },
        program: function() {
            for (var e = []; ;) if (this.tokens.length > 0 && !this.peek("}", ")", ";", "]") && e.push(this.expressionStatement()), 
            !this.expect(";")) return {
                type: Ro.Program,
                body: e
            };
        },
        expressionStatement: function() {
            return {
                type: Ro.ExpressionStatement,
                expression: this.filterChain()
            };
        },
        filterChain: function() {
            for (var e = this.expression(); this.expect("|"); ) e = this.filter(e);
            return e;
        },
        expression: function() {
            return this.assignment();
        },
        assignment: function() {
            var e = this.ternary();
            if (this.expect("=")) {
                if (!mn(e)) throw No("lval", "Trying to assign a value to a non l-value");
                e = {
                    type: Ro.AssignmentExpression,
                    left: e,
                    right: this.assignment(),
                    operator: "="
                };
            }
            return e;
        },
        ternary: function() {
            var e, t, n = this.logicalOR();
            return this.expect("?") && (e = this.expression(), this.consume(":")) ? (t = this.expression(), 
            {
                type: Ro.ConditionalExpression,
                test: n,
                alternate: e,
                consequent: t
            }) : n;
        },
        logicalOR: function() {
            for (var e = this.logicalAND(); this.expect("||"); ) e = {
                type: Ro.LogicalExpression,
                operator: "||",
                left: e,
                right: this.logicalAND()
            };
            return e;
        },
        logicalAND: function() {
            for (var e = this.equality(); this.expect("&&"); ) e = {
                type: Ro.LogicalExpression,
                operator: "&&",
                left: e,
                right: this.equality()
            };
            return e;
        },
        equality: function() {
            for (var e, t = this.relational(); e = this.expect("==", "!=", "===", "!=="); ) t = {
                type: Ro.BinaryExpression,
                operator: e.text,
                left: t,
                right: this.relational()
            };
            return t;
        },
        relational: function() {
            for (var e, t = this.additive(); e = this.expect("<", ">", "<=", ">="); ) t = {
                type: Ro.BinaryExpression,
                operator: e.text,
                left: t,
                right: this.additive()
            };
            return t;
        },
        additive: function() {
            for (var e, t = this.multiplicative(); e = this.expect("+", "-"); ) t = {
                type: Ro.BinaryExpression,
                operator: e.text,
                left: t,
                right: this.multiplicative()
            };
            return t;
        },
        multiplicative: function() {
            for (var e, t = this.unary(); e = this.expect("*", "/", "%"); ) t = {
                type: Ro.BinaryExpression,
                operator: e.text,
                left: t,
                right: this.unary()
            };
            return t;
        },
        unary: function() {
            var e;
            return (e = this.expect("+", "-", "!")) ? {
                type: Ro.UnaryExpression,
                operator: e.text,
                prefix: !0,
                argument: this.unary()
            } : this.primary();
        },
        primary: function() {
            var e;
            this.expect("(") ? (e = this.filterChain(), this.consume(")")) : this.expect("[") ? e = this.arrayDeclaration() : this.expect("{") ? e = this.object() : this.selfReferential.hasOwnProperty(this.peek().text) ? e = q(this.selfReferential[this.consume().text]) : this.options.literals.hasOwnProperty(this.peek().text) ? e = {
                type: Ro.Literal,
                value: this.options.literals[this.consume().text]
            } : this.peek().identifier ? e = this.identifier() : this.peek().constant ? e = this.constant() : this.throwError("not a primary expression", this.peek());
            for (var t; t = this.expect("(", "[", "."); ) "(" === t.text ? (e = {
                type: Ro.CallExpression,
                callee: e,
                arguments: this.parseArguments()
            }, this.consume(")")) : "[" === t.text ? (e = {
                type: Ro.MemberExpression,
                object: e,
                property: this.expression(),
                computed: !0
            }, this.consume("]")) : "." === t.text ? e = {
                type: Ro.MemberExpression,
                object: e,
                property: this.identifier(),
                computed: !1
            } : this.throwError("IMPOSSIBLE");
            return e;
        },
        filter: function(e) {
            for (var t = [ e ], n = {
                type: Ro.CallExpression,
                callee: this.identifier(),
                arguments: t,
                filter: !0
            }; this.expect(":"); ) t.push(this.expression());
            return n;
        },
        parseArguments: function() {
            var e = [];
            if (")" !== this.peekToken().text) do {
                e.push(this.filterChain());
            } while (this.expect(","));
            return e;
        },
        identifier: function() {
            var e = this.consume();
            return e.identifier || this.throwError("is not a valid identifier", e), {
                type: Ro.Identifier,
                name: e.text
            };
        },
        constant: function() {
            return {
                type: Ro.Literal,
                value: this.consume().value
            };
        },
        arrayDeclaration: function() {
            var e = [];
            if ("]" !== this.peekToken().text) do {
                if (this.peek("]")) break;
                e.push(this.expression());
            } while (this.expect(","));
            return this.consume("]"), {
                type: Ro.ArrayExpression,
                elements: e
            };
        },
        object: function() {
            var e, t = [];
            if ("}" !== this.peekToken().text) do {
                if (this.peek("}")) break;
                e = {
                    type: Ro.Property,
                    kind: "init"
                }, this.peek().constant ? (e.key = this.constant(), e.computed = !1, this.consume(":"), 
                e.value = this.expression()) : this.peek().identifier ? (e.key = this.identifier(), 
                e.computed = !1, this.peek(":") ? (this.consume(":"), e.value = this.expression()) : e.value = e.key) : this.peek("[") ? (this.consume("["), 
                e.key = this.expression(), this.consume("]"), e.computed = !0, this.consume(":"), 
                e.value = this.expression()) : this.throwError("invalid key", this.peek()), t.push(e);
            } while (this.expect(","));
            return this.consume("}"), {
                type: Ro.ObjectExpression,
                properties: t
            };
        },
        throwError: function(e, t) {
            throw No("syntax", "Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].", t.text, e, t.index + 1, this.text, this.text.substring(t.index));
        },
        consume: function(e) {
            if (0 === this.tokens.length) throw No("ueoe", "Unexpected end of expression: {0}", this.text);
            var t = this.expect(e);
            return t || this.throwError("is unexpected, expecting [" + e + "]", this.peek()), 
            t;
        },
        peekToken: function() {
            if (0 === this.tokens.length) throw No("ueoe", "Unexpected end of expression: {0}", this.text);
            return this.tokens[0];
        },
        peek: function(e, t, n, r) {
            return this.peekAhead(0, e, t, n, r);
        },
        peekAhead: function(e, t, n, r, i) {
            if (this.tokens.length > e) {
                var o = this.tokens[e], a = o.text;
                if (a === t || a === n || a === r || a === i || !t && !n && !r && !i) return o;
            }
            return !1;
        },
        expect: function(e, t, n, r) {
            var i = this.peek(e, t, n, r);
            return !!i && (this.tokens.shift(), i);
        },
        selfReferential: {
            this: {
                type: Ro.ThisExpression
            },
            $locals: {
                type: Ro.LocalsExpression
            }
        }
    };
    var Vo = 1, Ho = 2;
    yn.prototype = {
        compile: function(e) {
            var t = this;
            this.state = {
                nextId: 0,
                filters: {},
                fn: {
                    vars: [],
                    body: [],
                    own: {}
                },
                assign: {
                    vars: [],
                    body: [],
                    own: {}
                },
                inputs: []
            }, pn(e, t.$filter);
            var n, r = "";
            if (this.stage = "assign", n = gn(e)) {
                this.state.computing = "assign";
                var i = this.nextId();
                this.recurse(n, i), this.return_(i), r = "fn.assign=" + this.generateFunction("assign", "s,v,l");
            }
            var a = dn(e.body);
            t.stage = "inputs", o(a, function(e, n) {
                var r = "fn" + n;
                t.state[r] = {
                    vars: [],
                    body: [],
                    own: {}
                }, t.state.computing = r;
                var i = t.nextId();
                t.recurse(e, i), t.return_(i), t.state.inputs.push({
                    name: r,
                    isPure: e.isPure
                }), e.watchId = n;
            }), this.state.computing = "fn", this.stage = "main", this.recurse(e);
            var s = '"' + this.USE + " " + this.STRICT + '";\n' + this.filterPrefix() + "var fn=" + this.generateFunction("fn", "s,l,a,i") + r + this.watchFns() + "return fn;", u = new Function("$filter", "getStringValue", "ifDefined", "plus", s)(this.$filter, un, ln, cn);
            return this.state = this.stage = void 0, u;
        },
        USE: "use",
        STRICT: "strict",
        watchFns: function() {
            var e = [], t = this.state.inputs, n = this;
            return o(t, function(t) {
                e.push("var " + t.name + "=" + n.generateFunction(t.name, "s")), t.isPure && e.push(t.name, ".isPure=" + JSON.stringify(t.isPure) + ";");
            }), t.length && e.push("fn.inputs=[" + t.map(function(e) {
                return e.name;
            }).join(",") + "];"), e.join("");
        },
        generateFunction: function(e, t) {
            return "function(" + t + "){" + this.varsPrefix(e) + this.body(e) + "};";
        },
        filterPrefix: function() {
            var e = [], t = this;
            return o(this.state.filters, function(n, r) {
                e.push(n + "=$filter(" + t.escape(r) + ")");
            }), e.length ? "var " + e.join(",") + ";" : "";
        },
        varsPrefix: function(e) {
            return this.state[e].vars.length ? "var " + this.state[e].vars.join(",") + ";" : "";
        },
        body: function(e) {
            return this.state[e].body.join("");
        },
        recurse: function(e, t, n, r, i, a) {
            var s, u, l, c, f, h = this;
            if (r = r || m, !a && b(e.watchId)) return t = t || this.nextId(), void this.if_("i", this.lazyAssign(t, this.computedMember("i", e.watchId)), this.lazyRecurse(e, t, n, r, i, !0));
            switch (e.type) {
              case Ro.Program:
                o(e.body, function(t, n) {
                    h.recurse(t.expression, void 0, void 0, function(e) {
                        u = e;
                    }), n !== e.body.length - 1 ? h.current().body.push(u, ";") : h.return_(u);
                });
                break;

              case Ro.Literal:
                c = this.escape(e.value), this.assign(t, c), r(t || c);
                break;

              case Ro.UnaryExpression:
                this.recurse(e.argument, void 0, void 0, function(e) {
                    u = e;
                }), c = e.operator + "(" + this.ifDefined(u, 0) + ")", this.assign(t, c), r(c);
                break;

              case Ro.BinaryExpression:
                this.recurse(e.left, void 0, void 0, function(e) {
                    s = e;
                }), this.recurse(e.right, void 0, void 0, function(e) {
                    u = e;
                }), c = "+" === e.operator ? this.plus(s, u) : "-" === e.operator ? this.ifDefined(s, 0) + e.operator + this.ifDefined(u, 0) : "(" + s + ")" + e.operator + "(" + u + ")", 
                this.assign(t, c), r(c);
                break;

              case Ro.LogicalExpression:
                t = t || this.nextId(), h.recurse(e.left, t), h.if_("&&" === e.operator ? t : h.not(t), h.lazyRecurse(e.right, t)), 
                r(t);
                break;

              case Ro.ConditionalExpression:
                t = t || this.nextId(), h.recurse(e.test, t), h.if_(t, h.lazyRecurse(e.alternate, t), h.lazyRecurse(e.consequent, t)), 
                r(t);
                break;

              case Ro.Identifier:
                t = t || this.nextId(), n && (n.context = "inputs" === h.stage ? "s" : this.assign(this.nextId(), this.getHasOwnProperty("l", e.name) + "?l:s"), 
                n.computed = !1, n.name = e.name), h.if_("inputs" === h.stage || h.not(h.getHasOwnProperty("l", e.name)), function() {
                    h.if_("inputs" === h.stage || "s", function() {
                        i && 1 !== i && h.if_(h.isNull(h.nonComputedMember("s", e.name)), h.lazyAssign(h.nonComputedMember("s", e.name), "{}")), 
                        h.assign(t, h.nonComputedMember("s", e.name));
                    });
                }, t && h.lazyAssign(t, h.nonComputedMember("l", e.name))), r(t);
                break;

              case Ro.MemberExpression:
                s = n && (n.context = this.nextId()) || this.nextId(), t = t || this.nextId(), h.recurse(e.object, s, void 0, function() {
                    h.if_(h.notNull(s), function() {
                        e.computed ? (u = h.nextId(), h.recurse(e.property, u), h.getStringValue(u), i && 1 !== i && h.if_(h.not(h.computedMember(s, u)), h.lazyAssign(h.computedMember(s, u), "{}")), 
                        c = h.computedMember(s, u), h.assign(t, c), n && (n.computed = !0, n.name = u)) : (i && 1 !== i && h.if_(h.isNull(h.nonComputedMember(s, e.property.name)), h.lazyAssign(h.nonComputedMember(s, e.property.name), "{}")), 
                        c = h.nonComputedMember(s, e.property.name), h.assign(t, c), n && (n.computed = !1, 
                        n.name = e.property.name));
                    }, function() {
                        h.assign(t, "undefined");
                    }), r(t);
                }, !!i);
                break;

              case Ro.CallExpression:
                t = t || this.nextId(), e.filter ? (u = h.filter(e.callee.name), l = [], o(e.arguments, function(e) {
                    var t = h.nextId();
                    h.recurse(e, t), l.push(t);
                }), c = u + "(" + l.join(",") + ")", h.assign(t, c), r(t)) : (u = h.nextId(), s = {}, 
                l = [], h.recurse(e.callee, u, s, function() {
                    h.if_(h.notNull(u), function() {
                        o(e.arguments, function(t) {
                            h.recurse(t, e.constant ? void 0 : h.nextId(), void 0, function(e) {
                                l.push(e);
                            });
                        }), c = s.name ? h.member(s.context, s.name, s.computed) + "(" + l.join(",") + ")" : u + "(" + l.join(",") + ")", 
                        h.assign(t, c);
                    }, function() {
                        h.assign(t, "undefined");
                    }), r(t);
                }));
                break;

              case Ro.AssignmentExpression:
                u = this.nextId(), s = {}, this.recurse(e.left, void 0, s, function() {
                    h.if_(h.notNull(s.context), function() {
                        h.recurse(e.right, u), c = h.member(s.context, s.name, s.computed) + e.operator + u, 
                        h.assign(t, c), r(t || c);
                    });
                }, 1);
                break;

              case Ro.ArrayExpression:
                l = [], o(e.elements, function(t) {
                    h.recurse(t, e.constant ? void 0 : h.nextId(), void 0, function(e) {
                        l.push(e);
                    });
                }), c = "[" + l.join(",") + "]", this.assign(t, c), r(t || c);
                break;

              case Ro.ObjectExpression:
                l = [], f = !1, o(e.properties, function(e) {
                    e.computed && (f = !0);
                }), f ? (t = t || this.nextId(), this.assign(t, "{}"), o(e.properties, function(e) {
                    e.computed ? (s = h.nextId(), h.recurse(e.key, s)) : s = e.key.type === Ro.Identifier ? e.key.name : "" + e.key.value, 
                    u = h.nextId(), h.recurse(e.value, u), h.assign(h.member(t, s, e.computed), u);
                })) : (o(e.properties, function(t) {
                    h.recurse(t.value, e.constant ? void 0 : h.nextId(), void 0, function(e) {
                        l.push(h.escape(t.key.type === Ro.Identifier ? t.key.name : "" + t.key.value) + ":" + e);
                    });
                }), c = "{" + l.join(",") + "}", this.assign(t, c)), r(t || c);
                break;

              case Ro.ThisExpression:
                this.assign(t, "s"), r(t || "s");
                break;

              case Ro.LocalsExpression:
                this.assign(t, "l"), r(t || "l");
                break;

              case Ro.NGValueParameter:
                this.assign(t, "v"), r(t || "v");
            }
        },
        getHasOwnProperty: function(e, t) {
            var n = e + "." + t, r = this.current().own;
            return r.hasOwnProperty(n) || (r[n] = this.nextId(!1, e + "&&(" + this.escape(t) + " in " + e + ")")), 
            r[n];
        },
        assign: function(e, t) {
            if (e) return this.current().body.push(e, "=", t, ";"), e;
        },
        filter: function(e) {
            return this.state.filters.hasOwnProperty(e) || (this.state.filters[e] = this.nextId(!0)), 
            this.state.filters[e];
        },
        ifDefined: function(e, t) {
            return "ifDefined(" + e + "," + this.escape(t) + ")";
        },
        plus: function(e, t) {
            return "plus(" + e + "," + t + ")";
        },
        return_: function(e) {
            this.current().body.push("return ", e, ";");
        },
        if_: function(e, t, n) {
            if (!0 === e) t(); else {
                var r = this.current().body;
                r.push("if(", e, "){"), t(), r.push("}"), n && (r.push("else{"), n(), r.push("}"));
            }
        },
        not: function(e) {
            return "!(" + e + ")";
        },
        isNull: function(e) {
            return e + "==null";
        },
        notNull: function(e) {
            return e + "!=null";
        },
        nonComputedMember: function(e, t) {
            var n = /^[$_a-zA-Z][$_a-zA-Z0-9]*$/, r = /[^$_a-zA-Z0-9]/g;
            return n.test(t) ? e + "." + t : e + '["' + t.replace(r, this.stringEscapeFn) + '"]';
        },
        computedMember: function(e, t) {
            return e + "[" + t + "]";
        },
        member: function(e, t, n) {
            return n ? this.computedMember(e, t) : this.nonComputedMember(e, t);
        },
        getStringValue: function(e) {
            this.assign(e, "getStringValue(" + e + ")");
        },
        lazyRecurse: function(e, t, n, r, i, o) {
            var a = this;
            return function() {
                a.recurse(e, t, n, r, i, o);
            };
        },
        lazyAssign: function(e, t) {
            var n = this;
            return function() {
                n.assign(e, t);
            };
        },
        stringEscapeRegex: /[^ a-zA-Z0-9]/g,
        stringEscapeFn: function(e) {
            return "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4);
        },
        escape: function(e) {
            if (x(e)) return "'" + e.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
            if (C(e)) return e.toString();
            if (!0 === e) return "true";
            if (!1 === e) return "false";
            if (null === e) return "null";
            if (void 0 === e) return "undefined";
            throw No("esc", "IMPOSSIBLE");
        },
        nextId: function(e, t) {
            var n = "v" + this.state.nextId++;
            return e || this.current().vars.push(n + (t ? "=" + t : "")), n;
        },
        current: function() {
            return this.state[this.state.computing];
        }
    }, bn.prototype = {
        compile: function(e) {
            var t = this;
            pn(e, t.$filter);
            var n, r;
            (n = gn(e)) && (r = this.recurse(n));
            var i, a = dn(e.body);
            a && (i = [], o(a, function(e, n) {
                var r = t.recurse(e);
                r.isPure = e.isPure, e.input = r, i.push(r), e.watchId = n;
            }));
            var s = [];
            o(e.body, function(e) {
                s.push(t.recurse(e.expression));
            });
            var u = 0 === e.body.length ? m : 1 === e.body.length ? s[0] : function(e, t) {
                var n;
                return o(s, function(r) {
                    n = r(e, t);
                }), n;
            };
            return r && (u.assign = function(e, t, n) {
                return r(e, n, t);
            }), i && (u.inputs = i), u;
        },
        recurse: function(e, t, n) {
            var r, i, a, s = this;
            if (e.input) return this.inputs(e.input, e.watchId);
            switch (e.type) {
              case Ro.Literal:
                return this.value(e.value, t);

              case Ro.UnaryExpression:
                return i = this.recurse(e.argument), this["unary" + e.operator](i, t);

              case Ro.BinaryExpression:
              case Ro.LogicalExpression:
                return r = this.recurse(e.left), i = this.recurse(e.right), this["binary" + e.operator](r, i, t);

              case Ro.ConditionalExpression:
                return this["ternary?:"](this.recurse(e.test), this.recurse(e.alternate), this.recurse(e.consequent), t);

              case Ro.Identifier:
                return s.identifier(e.name, t, n);

              case Ro.MemberExpression:
                return r = this.recurse(e.object, !1, !!n), e.computed || (i = e.property.name), 
                e.computed && (i = this.recurse(e.property)), e.computed ? this.computedMember(r, i, t, n) : this.nonComputedMember(r, i, t, n);

              case Ro.CallExpression:
                return a = [], o(e.arguments, function(e) {
                    a.push(s.recurse(e));
                }), e.filter && (i = this.$filter(e.callee.name)), e.filter || (i = this.recurse(e.callee, !0)), 
                e.filter ? function(e, n, r, o) {
                    for (var s = [], u = 0; u < a.length; ++u) s.push(a[u](e, n, r, o));
                    var l = i.apply(void 0, s, o);
                    return t ? {
                        context: void 0,
                        name: void 0,
                        value: l
                    } : l;
                } : function(e, n, r, o) {
                    var s, u = i(e, n, r, o);
                    if (null != u.value) {
                        for (var l = [], c = 0; c < a.length; ++c) l.push(a[c](e, n, r, o));
                        s = u.value.apply(u.context, l);
                    }
                    return t ? {
                        value: s
                    } : s;
                };

              case Ro.AssignmentExpression:
                return r = this.recurse(e.left, !0, 1), i = this.recurse(e.right), function(e, n, o, a) {
                    var s = r(e, n, o, a), u = i(e, n, o, a);
                    return s.context[s.name] = u, t ? {
                        value: u
                    } : u;
                };

              case Ro.ArrayExpression:
                return a = [], o(e.elements, function(e) {
                    a.push(s.recurse(e));
                }), function(e, n, r, i) {
                    for (var o = [], s = 0; s < a.length; ++s) o.push(a[s](e, n, r, i));
                    return t ? {
                        value: o
                    } : o;
                };

              case Ro.ObjectExpression:
                return a = [], o(e.properties, function(e) {
                    e.computed ? a.push({
                        key: s.recurse(e.key),
                        computed: !0,
                        value: s.recurse(e.value)
                    }) : a.push({
                        key: e.key.type === Ro.Identifier ? e.key.name : "" + e.key.value,
                        computed: !1,
                        value: s.recurse(e.value)
                    });
                }), function(e, n, r, i) {
                    for (var o = {}, s = 0; s < a.length; ++s) a[s].computed ? o[a[s].key(e, n, r, i)] = a[s].value(e, n, r, i) : o[a[s].key] = a[s].value(e, n, r, i);
                    return t ? {
                        value: o
                    } : o;
                };

              case Ro.ThisExpression:
                return function(e) {
                    return t ? {
                        value: e
                    } : e;
                };

              case Ro.LocalsExpression:
                return function(e, n) {
                    return t ? {
                        value: n
                    } : n;
                };

              case Ro.NGValueParameter:
                return function(e, n, r) {
                    return t ? {
                        value: r
                    } : r;
                };
            }
        },
        "unary+": function(e, t) {
            return function(n, r, i, o) {
                var a = e(n, r, i, o);
                return a = b(a) ? +a : 0, t ? {
                    value: a
                } : a;
            };
        },
        "unary-": function(e, t) {
            return function(n, r, i, o) {
                var a = e(n, r, i, o);
                return a = b(a) ? -a : -0, t ? {
                    value: a
                } : a;
            };
        },
        "unary!": function(e, t) {
            return function(n, r, i, o) {
                var a = !e(n, r, i, o);
                return t ? {
                    value: a
                } : a;
            };
        },
        "binary+": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a), u = t(r, i, o, a), l = cn(s, u);
                return n ? {
                    value: l
                } : l;
            };
        },
        "binary-": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a), u = t(r, i, o, a), l = (b(s) ? s : 0) - (b(u) ? u : 0);
                return n ? {
                    value: l
                } : l;
            };
        },
        "binary*": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a) * t(r, i, o, a);
                return n ? {
                    value: s
                } : s;
            };
        },
        "binary/": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a) / t(r, i, o, a);
                return n ? {
                    value: s
                } : s;
            };
        },
        "binary%": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a) % t(r, i, o, a);
                return n ? {
                    value: s
                } : s;
            };
        },
        "binary===": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a) === t(r, i, o, a);
                return n ? {
                    value: s
                } : s;
            };
        },
        "binary!==": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a) !== t(r, i, o, a);
                return n ? {
                    value: s
                } : s;
            };
        },
        "binary==": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a) == t(r, i, o, a);
                return n ? {
                    value: s
                } : s;
            };
        },
        "binary!=": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a) != t(r, i, o, a);
                return n ? {
                    value: s
                } : s;
            };
        },
        "binary<": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a) < t(r, i, o, a);
                return n ? {
                    value: s
                } : s;
            };
        },
        "binary>": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a) > t(r, i, o, a);
                return n ? {
                    value: s
                } : s;
            };
        },
        "binary<=": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a) <= t(r, i, o, a);
                return n ? {
                    value: s
                } : s;
            };
        },
        "binary>=": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a) >= t(r, i, o, a);
                return n ? {
                    value: s
                } : s;
            };
        },
        "binary&&": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a) && t(r, i, o, a);
                return n ? {
                    value: s
                } : s;
            };
        },
        "binary||": function(e, t, n) {
            return function(r, i, o, a) {
                var s = e(r, i, o, a) || t(r, i, o, a);
                return n ? {
                    value: s
                } : s;
            };
        },
        "ternary?:": function(e, t, n, r) {
            return function(i, o, a, s) {
                var u = e(i, o, a, s) ? t(i, o, a, s) : n(i, o, a, s);
                return r ? {
                    value: u
                } : u;
            };
        },
        value: function(e, t) {
            return function() {
                return t ? {
                    context: void 0,
                    name: void 0,
                    value: e
                } : e;
            };
        },
        identifier: function(e, t, n) {
            return function(r, i, o, a) {
                var s = i && e in i ? i : r;
                n && 1 !== n && s && null == s[e] && (s[e] = {});
                var u = s ? s[e] : void 0;
                return t ? {
                    context: s,
                    name: e,
                    value: u
                } : u;
            };
        },
        computedMember: function(e, t, n, r) {
            return function(i, o, a, s) {
                var u, l, c = e(i, o, a, s);
                return null != c && (u = t(i, o, a, s), u = un(u), r && 1 !== r && c && !c[u] && (c[u] = {}), 
                l = c[u]), n ? {
                    context: c,
                    name: u,
                    value: l
                } : l;
            };
        },
        nonComputedMember: function(e, t, n, r) {
            return function(i, o, a, s) {
                var u = e(i, o, a, s);
                r && 1 !== r && u && null == u[t] && (u[t] = {});
                var l = null != u ? u[t] : void 0;
                return n ? {
                    context: u,
                    name: t,
                    value: l
                } : l;
            };
        },
        inputs: function(e, t) {
            return function(n, r, i, o) {
                return o ? o[t] : e(n, r, i);
            };
        }
    }, wn.prototype = {
        constructor: wn,
        parse: function(e) {
            var t = this.ast.ast(e), n = this.astCompiler.compile(t);
            return n.literal = vn(t), n.constant = $n(t), n;
        }
    };
    var Fo = r("$sce"), Uo = {
        HTML: "html",
        CSS: "css",
        URL: "url",
        RESOURCE_URL: "resourceUrl",
        JS: "js"
    }, qo = /_([a-z])/g, Bo = r("$compile"), Wo = e.document.createElement("a"), Go = Un(e.location.href);
    Wn.$inject = [ "$document" ], zn.$inject = [ "$provide" ];
    var zo = 22, Ko = ".", Qo = "0";
    Jn.$inject = [ "$locale" ], Zn.$inject = [ "$locale" ];
    var Yo = {
        yyyy: ir("FullYear", 4, 0, !1, !0),
        yy: ir("FullYear", 2, 0, !0, !0),
        y: ir("FullYear", 1, 0, !1, !0),
        MMMM: or("Month"),
        MMM: or("Month", !0),
        MM: ir("Month", 2, 1),
        M: ir("Month", 1, 1),
        LLLL: or("Month", !1, !0),
        dd: ir("Date", 2),
        d: ir("Date", 1),
        HH: ir("Hours", 2),
        H: ir("Hours", 1),
        hh: ir("Hours", 2, -12),
        h: ir("Hours", 1, -12),
        mm: ir("Minutes", 2),
        m: ir("Minutes", 1),
        ss: ir("Seconds", 2),
        s: ir("Seconds", 1),
        sss: ir("Milliseconds", 3),
        EEEE: or("Day"),
        EEE: or("Day", !0),
        a: cr,
        Z: ar,
        ww: lr(2),
        w: lr(1),
        G: fr,
        GG: fr,
        GGG: fr,
        GGGG: hr
    }, Xo = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/, Jo = /^-?\d+$/;
    pr.$inject = [ "$locale" ];
    var Zo = v(Zr), ea = v(ei);
    vr.$inject = [ "$parse" ];
    var ta = v({
        restrict: "E",
        compile: function(e, t) {
            if (!t.href && !t.xlinkHref) return function(e, t) {
                if ("a" === t[0].nodeName.toLowerCase()) {
                    var n = "[object SVGAnimatedString]" === ci.call(t.prop("href")) ? "xlink:href" : "href";
                    t.on("click", function(e) {
                        t.attr(n) || e.preventDefault();
                    });
                }
            };
        }
    }), na = {};
    o(Gi, function(e, t) {
        function n(e, n, i) {
            e.$watch(i[r], function(e) {
                i.$set(t, !!e);
            });
        }
        if ("multiple" !== e) {
            var r = Et("ng-" + t), i = n;
            "checked" === e && (i = function(e, t, i) {
                i.ngModel !== i[r] && n(e, t, i);
            }), na[r] = function() {
                return {
                    restrict: "A",
                    priority: 100,
                    link: i
                };
            };
        }
    }), o(Ki, function(e, t) {
        na[t] = function() {
            return {
                priority: 100,
                link: function(e, n, r) {
                    if ("ngPattern" === t && "/" === r.ngPattern.charAt(0)) {
                        var i = r.ngPattern.match(Yr);
                        if (i) return void r.$set("ngPattern", new RegExp(i[1], i[2]));
                    }
                    e.$watch(r[t], function(e) {
                        r.$set(t, e);
                    });
                }
            };
        };
    }), o([ "src", "srcset", "href" ], function(e) {
        var t = Et("ng-" + e);
        na[t] = function() {
            return {
                priority: 99,
                link: function(n, r, i) {
                    var o = e, a = e;
                    "href" === e && "[object SVGAnimatedString]" === ci.call(r.prop("href")) && (a = "xlinkHref", 
                    i.$attr[a] = "xlink:href", o = null), i.$observe(t, function(t) {
                        if (!t) return void ("href" === e && i.$set(a, null));
                        i.$set(a, t), ri && o && r.prop(o, i[a]);
                    });
                }
            };
        };
    });
    var ra = {
        $addControl: m,
        $$renameControl: yr,
        $removeControl: m,
        $setValidity: m,
        $setDirty: m,
        $setPristine: m,
        $setSubmitted: m
    }, ia = "ng-pending";
    br.$inject = [ "$element", "$attrs", "$scope", "$animate", "$interpolate" ], br.prototype = {
        $rollbackViewValue: function() {
            o(this.$$controls, function(e) {
                e.$rollbackViewValue();
            });
        },
        $commitViewValue: function() {
            o(this.$$controls, function(e) {
                e.$commitViewValue();
            });
        },
        $addControl: function(e) {
            me(e.$name, "input"), this.$$controls.push(e), e.$name && (this[e.$name] = e), e.$$parentForm = this;
        },
        $$renameControl: function(e, t) {
            var n = e.$name;
            this[n] === e && delete this[n], this[t] = e, e.$name = t;
        },
        $removeControl: function(e) {
            e.$name && this[e.$name] === e && delete this[e.$name], o(this.$pending, function(t, n) {
                this.$setValidity(n, null, e);
            }, this), o(this.$error, function(t, n) {
                this.$setValidity(n, null, e);
            }, this), o(this.$$success, function(t, n) {
                this.$setValidity(n, null, e);
            }, this), U(this.$$controls, e), e.$$parentForm = ra;
        },
        $setDirty: function() {
            this.$$animate.removeClass(this.$$element, Fa), this.$$animate.addClass(this.$$element, Ua), 
            this.$dirty = !0, this.$pristine = !1, this.$$parentForm.$setDirty();
        },
        $setPristine: function() {
            this.$$animate.setClass(this.$$element, Fa, Ua + " ng-submitted"), this.$dirty = !1, 
            this.$pristine = !0, this.$submitted = !1, o(this.$$controls, function(e) {
                e.$setPristine();
            });
        },
        $setUntouched: function() {
            o(this.$$controls, function(e) {
                e.$setUntouched();
            });
        },
        $setSubmitted: function() {
            this.$$animate.addClass(this.$$element, "ng-submitted"), this.$submitted = !0, this.$$parentForm.$setSubmitted();
        }
    }, Er({
        clazz: br,
        set: function(e, t, n) {
            var r = e[t];
            if (r) {
                -1 === r.indexOf(n) && r.push(n);
            } else e[t] = [ n ];
        },
        unset: function(e, t, n) {
            var r = e[t];
            r && (U(r, n), 0 === r.length && delete e[t]);
        }
    });
    var oa = function(e) {
        return [ "$timeout", "$parse", function(t, n) {
            function r(e) {
                return "" === e ? n('this[""]').assign : n(e).assign || m;
            }
            return {
                name: "form",
                restrict: e ? "EAC" : "E",
                require: [ "form", "^^?form" ],
                controller: br,
                compile: function(n, i) {
                    n.addClass(Fa).addClass(Va);
                    var o = i.name ? "name" : !(!e || !i.ngForm) && "ngForm";
                    return {
                        pre: function(e, n, i, a) {
                            var s = a[0];
                            if (!("action" in i)) {
                                var u = function(t) {
                                    e.$apply(function() {
                                        s.$commitViewValue(), s.$setSubmitted();
                                    }), t.preventDefault();
                                };
                                n[0].addEventListener("submit", u), n.on("$destroy", function() {
                                    t(function() {
                                        n[0].removeEventListener("submit", u);
                                    }, 0, !1);
                                });
                            }
                            (a[1] || s.$$parentForm).$addControl(s);
                            var l = o ? r(s.$name) : m;
                            o && (l(e, s), i.$observe(o, function(t) {
                                s.$name !== t && (l(e, void 0), s.$$parentForm.$$renameControl(s, t), (l = r(s.$name))(e, s));
                            })), n.on("$destroy", function() {
                                s.$$parentForm.$removeControl(s), l(e, void 0), f(s, ra);
                            });
                        }
                    };
                }
            };
        } ];
    }, aa = oa(), sa = oa(!0), ua = /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/, la = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i, ca = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/, fa = /^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/, ha = /^(\d{4,})-(\d{2})-(\d{2})$/, pa = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, da = /^(\d{4,})-W(\d\d)$/, ma = /^(\d{4,})-(\d\d)$/, ga = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/, va = "keydown wheel mousedown", $a = $e();
    o("date,datetime-local,month,time,week".split(","), function(e) {
        $a[e] = !0;
    });
    var ya = {
        text: Sr,
        date: Or("date", ha, Ar(ha, [ "yyyy", "MM", "dd" ]), "yyyy-MM-dd"),
        "datetime-local": Or("datetimelocal", pa, Ar(pa, [ "yyyy", "MM", "dd", "HH", "mm", "ss", "sss" ]), "yyyy-MM-ddTHH:mm:ss.sss"),
        time: Or("time", ga, Ar(ga, [ "HH", "mm", "ss", "sss" ]), "HH:mm:ss.sss"),
        week: Or("week", da, _r, "yyyy-Www"),
        month: Or("month", ma, Ar(ma, [ "yyyy", "MM" ]), "yyyy-MM"),
        number: Mr,
        url: Rr,
        email: Vr,
        radio: Hr,
        range: Lr,
        checkbox: Ur,
        hidden: m,
        button: m,
        submit: m,
        reset: m,
        file: m
    }, ba = [ "$browser", "$sniffer", "$filter", "$parse", function(e, t, n, r) {
        return {
            restrict: "E",
            require: [ "?ngModel" ],
            link: {
                pre: function(i, o, a, s) {
                    s[0] && (ya[Zr(a.type)] || ya.text)(i, o, a, s[0], t, e, n, r);
                }
            }
        };
    } ], wa = /^(true|false|\d+)$/, Ea = function() {
        function e(e, t, n) {
            var r = b(n) ? n : 9 === ri ? "" : null;
            e.prop("value", r), t.$set("value", n);
        }
        return {
            restrict: "A",
            priority: 100,
            compile: function(t, n) {
                return wa.test(n.ngValue) ? function(t, n, r) {
                    e(n, r, t.$eval(r.ngValue));
                } : function(t, n, r) {
                    t.$watch(r.ngValue, function(t) {
                        e(n, r, t);
                    });
                };
            }
        };
    }, xa = [ "$compile", function(e) {
        return {
            restrict: "AC",
            compile: function(t) {
                return e.$$addBindingClass(t), function(t, n, r) {
                    e.$$addBindingInfo(n, r.ngBind), n = n[0], t.$watch(r.ngBind, function(e) {
                        n.textContent = ye(e);
                    });
                };
            }
        };
    } ], Ca = [ "$interpolate", "$compile", function(e, t) {
        return {
            compile: function(n) {
                return t.$$addBindingClass(n), function(n, r, i) {
                    var o = e(r.attr(i.$attr.ngBindTemplate));
                    t.$$addBindingInfo(r, o.expressions), r = r[0], i.$observe("ngBindTemplate", function(e) {
                        r.textContent = y(e) ? "" : e;
                    });
                };
            }
        };
    } ], Sa = [ "$sce", "$parse", "$compile", function(e, t, n) {
        return {
            restrict: "A",
            compile: function(r, i) {
                var o = t(i.ngBindHtml), a = t(i.ngBindHtml, function(t) {
                    return e.valueOf(t);
                });
                return n.$$addBindingClass(r), function(t, r, i) {
                    n.$$addBindingInfo(r, i.ngBindHtml), t.$watch(a, function() {
                        var n = o(t);
                        r.html(e.getTrustedHtml(n) || "");
                    });
                };
            }
        };
    } ], Ta = v({
        restrict: "A",
        require: "ngModel",
        link: function(e, t, n, r) {
            r.$viewChangeListeners.push(function() {
                e.$eval(n.ngChange);
            });
        }
    }), _a = qr("", !0), Aa = qr("Odd", 0), Oa = qr("Even", 1), ka = $r({
        compile: function(e, t) {
            t.$set("ngCloak", void 0), e.removeClass("ng-cloak");
        }
    }), Ia = [ function() {
        return {
            restrict: "A",
            scope: !0,
            controller: "@",
            priority: 500
        };
    } ], Da = {}, Na = {
        blur: !0,
        focus: !0
    };
    o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "), function(e) {
        var t = Et("ng-" + e);
        Da[t] = [ "$parse", "$rootScope", function(n, r) {
            return {
                restrict: "A",
                compile: function(i, o) {
                    var a = n(o[t]);
                    return function(t, n) {
                        n.on(e, function(n) {
                            var i = function() {
                                a(t, {
                                    $event: n
                                });
                            };
                            Na[e] && r.$$phase ? t.$evalAsync(i) : t.$apply(i);
                        });
                    };
                }
            };
        } ];
    });
    var ja = [ "$animate", "$compile", function(e, t) {
        return {
            multiElement: !0,
            transclude: "element",
            priority: 600,
            terminal: !0,
            restrict: "A",
            $$tlb: !0,
            link: function(n, r, i, o, a) {
                var s, u, l;
                n.$watch(i.ngIf, function(n) {
                    n ? u || a(function(n, o) {
                        u = o, n[n.length++] = t.$$createComment("end ngIf", i.ngIf), s = {
                            clone: n
                        }, e.enter(n, r.parent(), r);
                    }) : (l && (l.remove(), l = null), u && (u.$destroy(), u = null), s && (l = ve(s.clone), 
                    e.leave(l).done(function(e) {
                        !1 !== e && (l = null);
                    }), s = null));
                });
            }
        };
    } ], Pa = [ "$templateRequest", "$anchorScroll", "$animate", function(e, t, n) {
        return {
            restrict: "ECA",
            priority: 400,
            terminal: !0,
            transclude: "element",
            controller: pi.noop,
            compile: function(r, i) {
                var o = i.ngInclude || i.src, a = i.onload || "", s = i.autoscroll;
                return function(r, i, u, l, c) {
                    var f, h, p, d = 0, m = function() {
                        h && (h.remove(), h = null), f && (f.$destroy(), f = null), p && (n.leave(p).done(function(e) {
                            !1 !== e && (h = null);
                        }), h = p, p = null);
                    };
                    r.$watch(o, function(o) {
                        var u = function(e) {
                            !1 === e || !b(s) || s && !r.$eval(s) || t();
                        }, h = ++d;
                        o ? (e(o, !0).then(function(e) {
                            if (!r.$$destroyed && h === d) {
                                var t = r.$new();
                                l.template = e;
                                var s = c(t, function(e) {
                                    m(), n.enter(e, null, i).done(u);
                                });
                                f = t, p = s, f.$emit("$includeContentLoaded", o), r.$eval(a);
                            }
                        }, function() {
                            r.$$destroyed || h === d && (m(), r.$emit("$includeContentError", o));
                        }), r.$emit("$includeContentRequested", o)) : (m(), l.template = null);
                    });
                };
            }
        };
    } ], Ma = [ "$compile", function(t) {
        return {
            restrict: "ECA",
            priority: -400,
            require: "ngInclude",
            link: function(n, r, i, o) {
                if (ci.call(r[0]).match(/SVG/)) return r.empty(), void t(Ie(o.template, e.document).childNodes)(n, function(e) {
                    r.append(e);
                }, {
                    futureParentElement: r
                });
                r.html(o.template), t(r.contents())(n);
            }
        };
    } ], La = $r({
        priority: 450,
        compile: function() {
            return {
                pre: function(e, t, n) {
                    e.$eval(n.ngInit);
                }
            };
        }
    }), Ra = function() {
        return {
            restrict: "A",
            priority: 100,
            require: "ngModel",
            link: function(e, t, n, r) {
                var i = n.ngList || ", ", a = "false" !== n.ngTrim, s = a ? $i(i) : i, u = function(e) {
                    if (!y(e)) {
                        var t = [];
                        return e && o(e.split(s), function(e) {
                            e && t.push(a ? $i(e) : e);
                        }), t;
                    }
                };
                r.$parsers.push(u), r.$formatters.push(function(e) {
                    if (gi(e)) return e.join(i);
                }), r.$isEmpty = function(e) {
                    return !e || !e.length;
                };
            }
        };
    }, Va = "ng-valid", Ha = "ng-invalid", Fa = "ng-pristine", Ua = "ng-dirty", qa = r("ngModel");
    Br.$inject = [ "$scope", "$exceptionHandler", "$attrs", "$element", "$parse", "$animate", "$timeout", "$q", "$interpolate" ], 
    Br.prototype = {
        $$initGetterSetters: function() {
            if (this.$options.getOption("getterSetter")) {
                var e = this.$$parse(this.$$attr.ngModel + "()"), t = this.$$parse(this.$$attr.ngModel + "($$$p)");
                this.$$ngModelGet = function(t) {
                    var n = this.$$parsedNgModel(t);
                    return _(n) && (n = e(t)), n;
                }, this.$$ngModelSet = function(e, n) {
                    _(this.$$parsedNgModel(e)) ? t(e, {
                        $$$p: n
                    }) : this.$$parsedNgModelAssign(e, n);
                };
            } else if (!this.$$parsedNgModel.assign) throw qa("nonassign", "Expression '{0}' is non-assignable. Element: {1}", this.$$attr.ngModel, te(this.$$element));
        },
        $render: m,
        $isEmpty: function(e) {
            return y(e) || "" === e || null === e || e !== e;
        },
        $$updateEmptyClasses: function(e) {
            this.$isEmpty(e) ? (this.$$animate.removeClass(this.$$element, "ng-not-empty"), 
            this.$$animate.addClass(this.$$element, "ng-empty")) : (this.$$animate.removeClass(this.$$element, "ng-empty"), 
            this.$$animate.addClass(this.$$element, "ng-not-empty"));
        },
        $setPristine: function() {
            this.$dirty = !1, this.$pristine = !0, this.$$animate.removeClass(this.$$element, Ua), 
            this.$$animate.addClass(this.$$element, Fa);
        },
        $setDirty: function() {
            this.$dirty = !0, this.$pristine = !1, this.$$animate.removeClass(this.$$element, Fa), 
            this.$$animate.addClass(this.$$element, Ua), this.$$parentForm.$setDirty();
        },
        $setUntouched: function() {
            this.$touched = !1, this.$untouched = !0, this.$$animate.setClass(this.$$element, "ng-untouched", "ng-touched");
        },
        $setTouched: function() {
            this.$touched = !0, this.$untouched = !1, this.$$animate.setClass(this.$$element, "ng-touched", "ng-untouched");
        },
        $rollbackViewValue: function() {
            this.$$timeout.cancel(this.$$pendingDebounce), this.$viewValue = this.$$lastCommittedViewValue, 
            this.$render();
        },
        $validate: function() {
            if (!mi(this.$modelValue)) {
                var e = this.$$lastCommittedViewValue, t = this.$$rawModelValue, n = this.$valid, r = this.$modelValue, i = this.$options.getOption("allowInvalid"), o = this;
                this.$$runValidators(t, e, function(e) {
                    i || n === e || (o.$modelValue = e ? t : void 0, o.$modelValue !== r && o.$$writeModelToScope());
                });
            }
        },
        $$runValidators: function(e, t, n) {
            function r(e, t) {
                a === s.$$currentValidationRunId && s.$setValidity(e, t);
            }
            function i(e) {
                a === s.$$currentValidationRunId && n(e);
            }
            this.$$currentValidationRunId++;
            var a = this.$$currentValidationRunId, s = this;
            return function() {
                var e = s.$$parserName || "parse";
                return y(s.$$parserValid) ? (r(e, null), !0) : (s.$$parserValid || (o(s.$validators, function(e, t) {
                    r(t, null);
                }), o(s.$asyncValidators, function(e, t) {
                    r(t, null);
                })), r(e, s.$$parserValid), s.$$parserValid);
            }() && function() {
                var n = !0;
                return o(s.$validators, function(i, o) {
                    var a = Boolean(i(e, t));
                    n = n && a, r(o, a);
                }), !!n || (o(s.$asyncValidators, function(e, t) {
                    r(t, null);
                }), !1);
            }() ? void function() {
                var n = [], a = !0;
                o(s.$asyncValidators, function(i, o) {
                    var s = i(e, t);
                    if (!P(s)) throw qa("nopromise", "Expected asynchronous validator to return a promise but got '{0}' instead.", s);
                    r(o, void 0), n.push(s.then(function() {
                        r(o, !0);
                    }, function() {
                        a = !1, r(o, !1);
                    }));
                }), n.length ? s.$$q.all(n).then(function() {
                    i(a);
                }, m) : i(!0);
            }() : void i(!1);
        },
        $commitViewValue: function() {
            var e = this.$viewValue;
            this.$$timeout.cancel(this.$$pendingDebounce), (this.$$lastCommittedViewValue !== e || "" === e && this.$$hasNativeValidators) && (this.$$updateEmptyClasses(e), 
            this.$$lastCommittedViewValue = e, this.$pristine && this.$setDirty(), this.$$parseAndValidate());
        },
        $$parseAndValidate: function() {
            function e() {
                r.$modelValue !== o && r.$$writeModelToScope();
            }
            var t = this.$$lastCommittedViewValue, n = t, r = this;
            if (this.$$parserValid = !y(n) || void 0, this.$$parserValid) for (var i = 0; i < this.$parsers.length; i++) if (n = this.$parsers[i](n), 
            y(n)) {
                this.$$parserValid = !1;
                break;
            }
            mi(this.$modelValue) && (this.$modelValue = this.$$ngModelGet(this.$$scope));
            var o = this.$modelValue, a = this.$options.getOption("allowInvalid");
            this.$$rawModelValue = n, a && (this.$modelValue = n, e()), this.$$runValidators(n, this.$$lastCommittedViewValue, function(t) {
                a || (r.$modelValue = t ? n : void 0, e());
            });
        },
        $$writeModelToScope: function() {
            this.$$ngModelSet(this.$$scope, this.$modelValue), o(this.$viewChangeListeners, function(e) {
                try {
                    e();
                } catch (e) {
                    this.$$exceptionHandler(e);
                }
            }, this);
        },
        $setViewValue: function(e, t) {
            this.$viewValue = e, this.$options.getOption("updateOnDefault") && this.$$debounceViewValueCommit(t);
        },
        $$debounceViewValueCommit: function(e) {
            var t = this.$options.getOption("debounce");
            C(t[e]) ? t = t[e] : C(t.default) && (t = t.default), this.$$timeout.cancel(this.$$pendingDebounce);
            var n = this;
            t > 0 ? this.$$pendingDebounce = this.$$timeout(function() {
                n.$commitViewValue();
            }, t) : this.$$scope.$root.$$phase ? this.$commitViewValue() : this.$$scope.$apply(function() {
                n.$commitViewValue();
            });
        },
        $overrideModelOptions: function(e) {
            this.$options = this.$options.createChild(e);
        }
    }, Er({
        clazz: Br,
        set: function(e, t) {
            e[t] = !0;
        },
        unset: function(e, t) {
            delete e[t];
        }
    });
    var Ba, Wa = [ "$rootScope", function(e) {
        return {
            restrict: "A",
            require: [ "ngModel", "^?form", "^?ngModelOptions" ],
            controller: Br,
            priority: 1,
            compile: function(t) {
                return t.addClass(Fa).addClass("ng-untouched").addClass(Va), {
                    pre: function(e, t, n, r) {
                        var i = r[0], o = r[1] || i.$$parentForm, a = r[2];
                        a && (i.$options = a.$options), i.$$initGetterSetters(), o.$addControl(i), n.$observe("name", function(e) {
                            i.$name !== e && i.$$parentForm.$$renameControl(i, e);
                        }), e.$on("$destroy", function() {
                            i.$$parentForm.$removeControl(i);
                        });
                    },
                    post: function(t, n, r, i) {
                        function o() {
                            a.$setTouched();
                        }
                        var a = i[0];
                        a.$options.getOption("updateOn") && n.on(a.$options.getOption("updateOn"), function(e) {
                            a.$$debounceViewValueCommit(e && e.type);
                        }), n.on("blur", function() {
                            a.$touched || (e.$$phase ? t.$evalAsync(o) : t.$apply(o));
                        });
                    }
                };
            }
        };
    } ], Ga = /(\s+|^)default(\s+|$)/;
    Gr.prototype = {
        getOption: function(e) {
            return this.$$options[e];
        },
        createChild: function(e) {
            var t = !1;
            return e = f({}, e), o(e, function(n, r) {
                "$inherit" === n ? "*" === r ? t = !0 : (e[r] = this.$$options[r], "updateOn" === r && (e.updateOnDefault = this.$$options.updateOnDefault)) : "updateOn" === r && (e.updateOnDefault = !1, 
                e[r] = $i(n.replace(Ga, function() {
                    return e.updateOnDefault = !0, " ";
                })));
            }, this), t && (delete e["*"], zr(e, this.$$options)), zr(e, Ba.$$options), new Gr(e);
        }
    }, Ba = new Gr({
        updateOn: "",
        updateOnDefault: !0,
        debounce: 0,
        getterSetter: !1,
        allowInvalid: !1,
        timezone: null
    });
    var za = function() {
        function e(e, t) {
            this.$$attrs = e, this.$$scope = t;
        }
        return e.$inject = [ "$attrs", "$scope" ], e.prototype = {
            $onInit: function() {
                var e = this.parentCtrl ? this.parentCtrl.$options : Ba, t = this.$$scope.$eval(this.$$attrs.ngModelOptions);
                this.$options = e.createChild(t);
            }
        }, {
            restrict: "A",
            priority: 10,
            require: {
                parentCtrl: "?^^ngModelOptions"
            },
            bindToController: !0,
            controller: e
        };
    }, Ka = $r({
        terminal: !0,
        priority: 1e3
    }), Qa = r("ngOptions"), Ya = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/, Xa = [ "$compile", "$document", "$parse", function(t, n, r) {
        function a(e, t, n) {
            function o(e, t, n, r, i) {
                this.selectValue = e, this.viewValue = t, this.label = n, this.group = r, this.disabled = i;
            }
            function a(e) {
                var t;
                if (!l && i(e)) t = e; else {
                    t = [];
                    for (var n in e) e.hasOwnProperty(n) && "$" !== n.charAt(0) && t.push(n);
                }
                return t;
            }
            var s = e.match(Ya);
            if (!s) throw Qa("iexp", "Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}", e, te(t));
            var u = s[5] || s[7], l = s[6], c = / as /.test(s[0]) && s[1], f = s[9], h = r(s[2] ? s[1] : u), p = c && r(c), d = p || h, m = f && r(f), g = f ? function(e, t) {
                return m(n, t);
            } : function(e) {
                return rt(e);
            }, v = function(e, t) {
                return g(e, x(e, t));
            }, $ = r(s[2] || s[1]), y = r(s[3] || ""), b = r(s[4] || ""), w = r(s[8]), E = {}, x = l ? function(e, t) {
                return E[l] = t, E[u] = e, E;
            } : function(e) {
                return E[u] = e, E;
            };
            return {
                trackBy: f,
                getTrackByValue: v,
                getWatchables: r(w, function(e) {
                    var t = [];
                    e = e || [];
                    for (var r = a(e), i = r.length, o = 0; o < i; o++) {
                        var u = e === r ? o : r[o], l = e[u], c = x(l, u), f = g(l, c);
                        if (t.push(f), s[2] || s[1]) {
                            var h = $(n, c);
                            t.push(h);
                        }
                        if (s[4]) {
                            var p = b(n, c);
                            t.push(p);
                        }
                    }
                    return t;
                }),
                getOptions: function() {
                    for (var e = [], t = {}, r = w(n) || [], i = a(r), s = i.length, u = 0; u < s; u++) {
                        var l = r === i ? u : i[u], c = r[l], h = x(c, l), p = d(n, h), m = g(p, h), E = $(n, h), C = y(n, h), S = b(n, h), T = new o(m, p, E, C, S);
                        e.push(T), t[m] = T;
                    }
                    return {
                        items: e,
                        selectValueMap: t,
                        getOptionFromViewValue: function(e) {
                            return t[v(e)];
                        },
                        getViewValueFromOption: function(e) {
                            return f ? q(e.viewValue) : e.viewValue;
                        }
                    };
                }
            };
        }
        function s(e, r, i, s) {
            function c(e, t) {
                var n = u.cloneNode(!1);
                t.appendChild(n), h(e, n);
            }
            function f(e) {
                var t = E.getOptionFromViewValue(e), n = t && t.element;
                return n && !n.selected && (n.selected = !0), t;
            }
            function h(e, t) {
                e.element = t, t.disabled = e.disabled, e.label !== t.label && (t.label = e.label, 
                t.textContent = e.label), t.value = e.selectValue;
            }
            function p() {
                var e = E && d.readValue();
                if (E) for (var t = E.items.length - 1; t >= 0; t--) {
                    var n = E.items[t];
                    Ke(b(n.group) ? n.element.parentNode : n.element);
                }
                E = x.getOptions();
                var i = {};
                if (E.items.forEach(function(e) {
                    var t;
                    b(e.group) ? (t = i[e.group], t || (t = l.cloneNode(!1), C.appendChild(t), t.label = null === e.group ? "null" : e.group, 
                    i[e.group] = t), c(e, t)) : c(e, C);
                }), r[0].appendChild(C), m.$render(), !m.$isEmpty(e)) {
                    var o = d.readValue();
                    (x.trackBy || g ? W(e, o) : e === o) || (m.$setViewValue(o), m.$render());
                }
            }
            for (var d = s[0], m = s[1], g = i.multiple, v = 0, $ = r.children(), y = $.length; v < y; v++) if ("" === $[v].value) {
                d.hasEmptyOption = !0, d.emptyOption = $.eq(v);
                break;
            }
            r.empty();
            var w = !!d.emptyOption;
            ii(u.cloneNode(!1)).val("?");
            var E, x = a(i.ngOptions, r, e), C = n[0].createDocumentFragment();
            d.generateUnknownOptionValue = function(e) {
                return "?";
            }, g ? (d.writeValue = function(e) {
                if (E) {
                    var t = e && e.map(f) || [];
                    E.items.forEach(function(e) {
                        e.element.selected && !F(t, e) && (e.element.selected = !1);
                    });
                }
            }, d.readValue = function() {
                var e = r.val() || [], t = [];
                return o(e, function(e) {
                    var n = E.selectValueMap[e];
                    n && !n.disabled && t.push(E.getViewValueFromOption(n));
                }), t;
            }, x.trackBy && e.$watchCollection(function() {
                if (gi(m.$viewValue)) return m.$viewValue.map(function(e) {
                    return x.getTrackByValue(e);
                });
            }, function() {
                m.$render();
            })) : (d.writeValue = function(e) {
                if (E) {
                    var t = r[0].options[r[0].selectedIndex], n = E.getOptionFromViewValue(e);
                    t && t.removeAttribute("selected"), n ? (r[0].value !== n.selectValue && (d.removeUnknownOption(), 
                    r[0].value = n.selectValue, n.element.selected = !0), n.element.setAttribute("selected", "selected")) : d.selectUnknownOrEmptyOption(e);
                }
            }, d.readValue = function() {
                var e = E.selectValueMap[r.val()];
                return e && !e.disabled ? (d.unselectEmptyOption(), d.removeUnknownOption(), E.getViewValueFromOption(e)) : null;
            }, x.trackBy && e.$watch(function() {
                return x.getTrackByValue(m.$viewValue);
            }, function() {
                m.$render();
            })), w && (t(d.emptyOption)(e), r.prepend(d.emptyOption), d.emptyOption[0].nodeType === Oi ? (d.hasEmptyOption = !1, 
            d.registerOption = function(e, t) {
                "" === t.val() && (d.hasEmptyOption = !0, d.emptyOption = t, d.emptyOption.removeClass("ng-scope"), 
                m.$render(), t.on("$destroy", function() {
                    var e = d.$isEmptyOptionSelected();
                    d.hasEmptyOption = !1, d.emptyOption = void 0, e && m.$render();
                }));
            }) : d.emptyOption.removeClass("ng-scope")), e.$watchCollection(x.getWatchables, p);
        }
        var u = e.document.createElement("option"), l = e.document.createElement("optgroup");
        return {
            restrict: "A",
            terminal: !0,
            require: [ "select", "ngModel" ],
            link: {
                pre: function(e, t, n, r) {
                    r[0].registerOption = m;
                },
                post: s
            }
        };
    } ], Ja = [ "$locale", "$interpolate", "$log", function(e, t, n) {
        var r = /{}/g, i = /^when(Minus)?(.+)$/;
        return {
            link: function(a, s, u) {
                function l(e) {
                    s.text(e || "");
                }
                var c, f = u.count, h = u.$attr.when && s.attr(u.$attr.when), p = u.offset || 0, d = a.$eval(h) || {}, g = {}, v = t.startSymbol(), $ = t.endSymbol(), b = v + f + "-" + p + $, w = pi.noop;
                o(u, function(e, t) {
                    var n = i.exec(t);
                    if (n) {
                        var r = (n[1] ? "-" : "") + Zr(n[2]);
                        d[r] = s.attr(u.$attr[t]);
                    }
                }), o(d, function(e, n) {
                    g[n] = t(e.replace(r, b));
                }), a.$watch(f, function(t) {
                    var r = parseFloat(t), i = mi(r);
                    if (i || r in d || (r = e.pluralCat(r - p)), !(r === c || i && mi(c))) {
                        w();
                        var o = g[r];
                        y(o) ? (null != t && n.debug("ngPluralize: no rule defined for '" + r + "' in " + h), 
                        w = m, l()) : w = a.$watch(o, l), c = r;
                    }
                });
            }
        };
    } ], Za = [ "$parse", "$animate", "$compile", function(e, t, n) {
        var a = r("ngRepeat"), s = function(e, t, n, r, i, o, a) {
            e[n] = r, i && (e[i] = o), e.$index = t, e.$first = 0 === t, e.$last = t === a - 1, 
            e.$middle = !(e.$first || e.$last), e.$odd = !(e.$even = 0 == (1 & t));
        }, u = function(e) {
            return e.clone[0];
        }, l = function(e) {
            return e.clone[e.clone.length - 1];
        };
        return {
            restrict: "A",
            multiElement: !0,
            transclude: "element",
            priority: 1e3,
            terminal: !0,
            $$tlb: !0,
            compile: function(r, c) {
                var f = c.ngRepeat, h = n.$$createComment("end ngRepeat", f), p = f.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                if (!p) throw a("iexp", "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.", f);
                var d = p[1], m = p[2], g = p[3], v = p[4];
                if (!(p = d.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/))) throw a("iidexp", "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.", d);
                var $ = p[3] || p[1], y = p[2];
                if (g && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(g) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(g))) throw a("badident", "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.", g);
                var b, w, E, x, C = {
                    $id: rt
                };
                return v ? b = e(v) : (E = function(e, t) {
                    return rt(t);
                }, x = function(e) {
                    return e;
                }), function(e, n, r, c, p) {
                    b && (w = function(t, n, r) {
                        return y && (C[y] = t), C[$] = n, C.$index = r, b(e, C);
                    });
                    var d = $e();
                    e.$watchCollection(m, function(r) {
                        var c, m, v, b, C, S, T, _, A, O, k, I, D = n[0], N = $e();
                        if (g && (e[g] = r), i(r)) A = r, _ = w || E; else {
                            _ = w || x, A = [];
                            for (var j in r) Jr.call(r, j) && "$" !== j.charAt(0) && A.push(j);
                        }
                        for (b = A.length, k = new Array(b), c = 0; c < b; c++) if (C = r === A ? c : A[c], 
                        S = r[C], T = _(C, S, c), d[T]) O = d[T], delete d[T], N[T] = O, k[c] = O; else {
                            if (N[T]) throw o(k, function(e) {
                                e && e.scope && (d[e.id] = e);
                            }), a("dupes", "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}", f, T, S);
                            k[c] = {
                                id: T,
                                scope: void 0,
                                clone: void 0
                            }, N[T] = !0;
                        }
                        for (var P in d) {
                            if (O = d[P], I = ve(O.clone), t.leave(I), I[0].parentNode) for (c = 0, m = I.length; c < m; c++) I[c].$$NG_REMOVED = !0;
                            O.scope.$destroy();
                        }
                        for (c = 0; c < b; c++) if (C = r === A ? c : A[c], S = r[C], O = k[c], O.scope) {
                            v = D;
                            do {
                                v = v.nextSibling;
                            } while (v && v.$$NG_REMOVED);
                            u(O) !== v && t.move(ve(O.clone), null, D), D = l(O), s(O.scope, c, $, S, y, C, b);
                        } else p(function(e, n) {
                            O.scope = n;
                            var r = h.cloneNode(!1);
                            e[e.length++] = r, t.enter(e, null, D), D = r, O.clone = e, N[O.id] = O, s(O.scope, c, $, S, y, C, b);
                        });
                        d = N;
                    });
                };
            }
        };
    } ], es = [ "$animate", function(e) {
        return {
            restrict: "A",
            multiElement: !0,
            link: function(t, n, r) {
                t.$watch(r.ngShow, function(t) {
                    e[t ? "removeClass" : "addClass"](n, "ng-hide", {
                        tempClasses: "ng-hide-animate"
                    });
                });
            }
        };
    } ], ts = [ "$animate", function(e) {
        return {
            restrict: "A",
            multiElement: !0,
            link: function(t, n, r) {
                t.$watch(r.ngHide, function(t) {
                    e[t ? "addClass" : "removeClass"](n, "ng-hide", {
                        tempClasses: "ng-hide-animate"
                    });
                });
            }
        };
    } ], ns = $r(function(e, t, n) {
        e.$watch(n.ngStyle, function(e, n) {
            n && e !== n && o(n, function(e, n) {
                t.css(n, "");
            }), e && t.css(e);
        }, !0);
    }), rs = [ "$animate", "$compile", function(e, t) {
        return {
            require: "ngSwitch",
            controller: [ "$scope", function() {
                this.cases = {};
            } ],
            link: function(n, r, i, a) {
                var s = i.ngSwitch || i.on, u = [], l = [], c = [], f = [], h = function(e, t) {
                    return function(n) {
                        !1 !== n && e.splice(t, 1);
                    };
                };
                n.$watch(s, function(n) {
                    for (var r, i; c.length; ) e.cancel(c.pop());
                    for (r = 0, i = f.length; r < i; ++r) {
                        var s = ve(l[r].clone);
                        f[r].$destroy();
                        (c[r] = e.leave(s)).done(h(c, r));
                    }
                    l.length = 0, f.length = 0, (u = a.cases["!" + n] || a.cases["?"]) && o(u, function(n) {
                        n.transclude(function(r, i) {
                            f.push(i);
                            var o = n.element;
                            r[r.length++] = t.$$createComment("end ngSwitchWhen");
                            var a = {
                                clone: r
                            };
                            l.push(a), e.enter(r, o.parent(), o);
                        });
                    });
                });
            }
        };
    } ], is = $r({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: !0,
        link: function(e, t, n, r, i) {
            o(n.ngSwitchWhen.split(n.ngSwitchWhenSeparator).sort().filter(function(e, t, n) {
                return n[t - 1] !== e;
            }), function(e) {
                r.cases["!" + e] = r.cases["!" + e] || [], r.cases["!" + e].push({
                    transclude: i,
                    element: t
                });
            });
        }
    }), os = $r({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: !0,
        link: function(e, t, n, r, i) {
            r.cases["?"] = r.cases["?"] || [], r.cases["?"].push({
                transclude: i,
                element: t
            });
        }
    }), as = r("ngTransclude"), ss = [ "$compile", function(e) {
        return {
            restrict: "EAC",
            terminal: !0,
            compile: function(t) {
                var n = e(t.contents());
                return t.empty(), function(e, t, r, i, o) {
                    function a(e, n) {
                        e.length && u(e) ? t.append(e) : (s(), n.$destroy());
                    }
                    function s() {
                        n(e, function(e) {
                            t.append(e);
                        });
                    }
                    function u(e) {
                        for (var t = 0, n = e.length; t < n; t++) {
                            var r = e[t];
                            if (r.nodeType !== Ai || r.nodeValue.trim()) return !0;
                        }
                    }
                    if (!o) throw as("orphan", "Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}", te(t));
                    r.ngTransclude === r.$attr.ngTransclude && (r.ngTransclude = "");
                    var l = r.ngTransclude || r.ngTranscludeSlot;
                    o(a, null, l), l && !o.isSlotFilled(l) && s();
                };
            }
        };
    } ], us = [ "$templateCache", function(e) {
        return {
            restrict: "E",
            terminal: !0,
            compile: function(t, n) {
                if ("text/ng-template" === n.type) {
                    var r = n.id, i = t[0].text;
                    e.put(r, i);
                }
            }
        };
    } ], ls = {
        $setViewValue: m,
        $render: m
    }, cs = [ "$element", "$scope", function(t, n) {
        function r() {
            s || (s = !0, n.$$postDigest(function() {
                s = !1, o.ngModelCtrl.$render();
            }));
        }
        function i(e) {
            u || (u = !0, n.$$postDigest(function() {
                n.$$destroyed || (u = !1, o.ngModelCtrl.$setViewValue(o.readValue()), e && o.ngModelCtrl.$render());
            }));
        }
        var o = this, a = new Yi();
        o.selectValueMap = {}, o.ngModelCtrl = ls, o.multiple = !1, o.unknownOption = ii(e.document.createElement("option")), 
        o.hasEmptyOption = !1, o.emptyOption = void 0, o.renderUnknownOption = function(e) {
            var n = o.generateUnknownOptionValue(e);
            o.unknownOption.val(n), t.prepend(o.unknownOption), Kr(o.unknownOption, !0), t.val(n);
        }, o.updateUnknownOption = function(e) {
            var n = o.generateUnknownOptionValue(e);
            o.unknownOption.val(n), Kr(o.unknownOption, !0), t.val(n);
        }, o.generateUnknownOptionValue = function(e) {
            return "? " + rt(e) + " ?";
        }, o.removeUnknownOption = function() {
            o.unknownOption.parent() && o.unknownOption.remove();
        }, o.selectEmptyOption = function() {
            o.emptyOption && (t.val(""), Kr(o.emptyOption, !0));
        }, o.unselectEmptyOption = function() {
            o.hasEmptyOption && Kr(o.emptyOption, !1);
        }, n.$on("$destroy", function() {
            o.renderUnknownOption = m;
        }), o.readValue = function() {
            var e = t.val(), n = e in o.selectValueMap ? o.selectValueMap[e] : e;
            return o.hasOption(n) ? n : null;
        }, o.writeValue = function(e) {
            var n = t[0].options[t[0].selectedIndex];
            if (n && Kr(ii(n), !1), o.hasOption(e)) {
                o.removeUnknownOption();
                var r = rt(e);
                t.val(r in o.selectValueMap ? r : e);
                var i = t[0].options[t[0].selectedIndex];
                Kr(ii(i), !0);
            } else o.selectUnknownOrEmptyOption(e);
        }, o.addOption = function(e, t) {
            if (t[0].nodeType !== Oi) {
                me(e, '"option value"'), "" === e && (o.hasEmptyOption = !0, o.emptyOption = t);
                var n = a.get(e) || 0;
                a.set(e, n + 1), r();
            }
        }, o.removeOption = function(e) {
            var t = a.get(e);
            t && (1 === t ? (a.delete(e), "" === e && (o.hasEmptyOption = !1, o.emptyOption = void 0)) : a.set(e, t - 1));
        }, o.hasOption = function(e) {
            return !!a.get(e);
        }, o.$hasEmptyOption = function() {
            return o.hasEmptyOption;
        }, o.$isUnknownOptionSelected = function() {
            return t[0].options[0] === o.unknownOption[0];
        }, o.$isEmptyOptionSelected = function() {
            return o.hasEmptyOption && t[0].options[t[0].selectedIndex] === o.emptyOption[0];
        }, o.selectUnknownOrEmptyOption = function(e) {
            null == e && o.emptyOption ? (o.removeUnknownOption(), o.selectEmptyOption()) : o.unknownOption.parent().length ? o.updateUnknownOption(e) : o.renderUnknownOption(e);
        };
        var s = !1, u = !1;
        o.registerOption = function(e, t, n, a, s) {
            if (n.$attr.ngValue) {
                var u, l = NaN;
                n.$observe("value", function(e) {
                    var n, r = t.prop("selected");
                    b(l) && (o.removeOption(u), delete o.selectValueMap[l], n = !0), l = rt(e), u = e, 
                    o.selectValueMap[l] = e, o.addOption(e, t), t.attr("value", l), n && r && i();
                });
            } else a ? n.$observe("value", function(e) {
                o.readValue();
                var n, r = t.prop("selected");
                b(u) && (o.removeOption(u), n = !0), u = e, o.addOption(e, t), n && r && i();
            }) : s ? e.$watch(s, function(e, r) {
                n.$set("value", e);
                var a = t.prop("selected");
                r !== e && o.removeOption(r), o.addOption(e, t), r && a && i();
            }) : o.addOption(n.value, t);
            n.$observe("disabled", function(e) {
                ("true" === e || e && t.prop("selected")) && (o.multiple ? i(!0) : (o.ngModelCtrl.$setViewValue(null), 
                o.ngModelCtrl.$render()));
            }), t.on("$destroy", function() {
                var e = o.readValue(), t = n.value;
                o.removeOption(t), r(), (o.multiple && e && -1 !== e.indexOf(t) || e === t) && i(!0);
            });
        };
    } ], fs = function() {
        function e(e, t, n, r) {
            var i = r[0], a = r[1];
            if (!a) return void (i.registerOption = m);
            if (i.ngModelCtrl = a, t.on("change", function() {
                i.removeUnknownOption(), e.$apply(function() {
                    a.$setViewValue(i.readValue());
                });
            }), n.multiple) {
                i.multiple = !0, i.readValue = function() {
                    var e = [];
                    return o(t.find("option"), function(t) {
                        if (t.selected && !t.disabled) {
                            var n = t.value;
                            e.push(n in i.selectValueMap ? i.selectValueMap[n] : n);
                        }
                    }), e;
                }, i.writeValue = function(e) {
                    o(t.find("option"), function(t) {
                        var n = !!e && (F(e, t.value) || F(e, i.selectValueMap[t.value]));
                        n !== t.selected && Kr(ii(t), n);
                    });
                };
                var s, u = NaN;
                e.$watch(function() {
                    u !== a.$viewValue || W(s, a.$viewValue) || (s = we(a.$viewValue), a.$render()), 
                    u = a.$viewValue;
                }), a.$isEmpty = function(e) {
                    return !e || 0 === e.length;
                };
            }
        }
        function t(e, t, n, r) {
            var i = r[1];
            if (i) {
                var o = r[0];
                i.$render = function() {
                    o.writeValue(i.$viewValue);
                };
            }
        }
        return {
            restrict: "E",
            require: [ "select", "?ngModel" ],
            controller: cs,
            priority: 1,
            link: {
                pre: e,
                post: t
            }
        };
    }, hs = [ "$interpolate", function(e) {
        return {
            restrict: "E",
            priority: 100,
            compile: function(t, n) {
                var r, i;
                return b(n.ngValue) || (b(n.value) ? r = e(n.value, !0) : (i = e(t.text(), !0)) || n.$set("value", t.text())), 
                function(e, t, n) {
                    var o = t.parent(), a = o.data("$selectController") || o.parent().data("$selectController");
                    a && a.registerOption(e, t, n, r, i);
                };
            }
        };
    } ], ps = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(e, t, n, r) {
                r && (n.required = !0, r.$validators.required = function(e, t) {
                    return !n.required || !r.$isEmpty(t);
                }, n.$observe("required", function() {
                    r.$validate();
                }));
            }
        };
    }, ds = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(e, t, n, i) {
                if (i) {
                    var o, a = n.ngPattern || n.pattern;
                    n.$observe("pattern", function(e) {
                        if (x(e) && e.length > 0 && (e = new RegExp("^" + e + "$")), e && !e.test) throw r("ngPattern")("noregexp", "Expected {0} to be a RegExp but was {1}. Element: {2}", a, e, te(t));
                        o = e || void 0, i.$validate();
                    }), i.$validators.pattern = function(e, t) {
                        return i.$isEmpty(t) || y(o) || o.test(t);
                    };
                }
            }
        };
    }, ms = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(e, t, n, r) {
                if (r) {
                    var i = -1;
                    n.$observe("maxlength", function(e) {
                        var t = p(e);
                        i = mi(t) ? -1 : t, r.$validate();
                    }), r.$validators.maxlength = function(e, t) {
                        return i < 0 || r.$isEmpty(t) || t.length <= i;
                    };
                }
            }
        };
    }, gs = function() {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(e, t, n, r) {
                if (r) {
                    var i = 0;
                    n.$observe("minlength", function(e) {
                        i = p(e) || 0, r.$validate();
                    }), r.$validators.minlength = function(e, t) {
                        return r.$isEmpty(t) || t.length >= i;
                    };
                }
            }
        };
    };
    if (e.angular.bootstrap) return void (e.console && console.log("WARNING: Tried to load angular more than once."));
    !function() {
        var t;
        if (!Ti) {
            var n = wi();
            oi = y(n) ? e.jQuery : n ? e[n] : void 0, oi && oi.fn.on ? (ii = oi, f(oi.fn, {
                scope: Wi.scope,
                isolateScope: Wi.isolateScope,
                controller: Wi.controller,
                injector: Wi.injector,
                inheritedData: Wi.inheritedData
            }), t = oi.cleanData, oi.cleanData = function(e) {
                for (var n, r, i = 0; null != (r = e[i]); i++) (n = oi._data(r, "events")) && n.$destroy && oi(r).triggerHandler("$destroy");
                t(e);
            }) : ii = je, pi.element = ii, Ti = !0;
        }
    }(), function(n) {
        f(n, {
            errorHandlingConfig: t,
            bootstrap: le,
            copy: q,
            extend: f,
            merge: h,
            equals: W,
            element: ii,
            forEach: o,
            injector: lt,
            noop: m,
            bind: K,
            toJson: Y,
            fromJson: X,
            identity: g,
            isUndefined: y,
            isDefined: b,
            isString: x,
            isFunction: _,
            isObject: w,
            isNumber: C,
            isElement: R,
            isArray: gi,
            version: Di,
            isDate: S,
            lowercase: Zr,
            uppercase: ei,
            callbacks: {
                $$counter: 0
            },
            getTestability: fe,
            reloadWithDebugInfo: ce,
            $$minErr: r,
            $$csp: bi,
            $$encodeUriSegment: oe,
            $$encodeUriQuery: ae,
            $$stringify: ye
        }), ai = be(e), ai("ng", [ "ngLocale" ], [ "$provide", function(e) {
            e.provider({
                $$sanitizeUri: Dn
            }), e.provider("$compile", bt).directive({
                a: ta,
                input: ba,
                textarea: ba,
                form: aa,
                script: us,
                select: fs,
                option: hs,
                ngBind: xa,
                ngBindHtml: Sa,
                ngBindTemplate: Ca,
                ngClass: _a,
                ngClassEven: Oa,
                ngClassOdd: Aa,
                ngCloak: ka,
                ngController: Ia,
                ngForm: sa,
                ngHide: ts,
                ngIf: ja,
                ngInclude: Pa,
                ngInit: La,
                ngNonBindable: Ka,
                ngPluralize: Ja,
                ngRepeat: Za,
                ngShow: es,
                ngStyle: ns,
                ngSwitch: rs,
                ngSwitchWhen: is,
                ngSwitchDefault: os,
                ngOptions: Xa,
                ngTransclude: ss,
                ngModel: Wa,
                ngList: Ra,
                ngChange: Ta,
                pattern: ds,
                ngPattern: ds,
                required: ps,
                ngRequired: ps,
                minlength: gs,
                ngMinlength: gs,
                maxlength: ms,
                ngMaxlength: ms,
                ngValue: Ea,
                ngModelOptions: za
            }).directive({
                ngInclude: Ma
            }).directive(na).directive(Da), e.provider({
                $anchorScroll: ct,
                $animate: uo,
                $animateCss: fo,
                $$animateJs: ao,
                $$animateQueue: so,
                $$AnimateRunner: co,
                $$animateAsyncRun: lo,
                $browser: gt,
                $cacheFactory: vt,
                $controller: Tt,
                $document: _t,
                $$isDocumentHidden: At,
                $exceptionHandler: Ot,
                $filter: zn,
                $$forceReflow: yo,
                $interpolate: qt,
                $interval: Bt,
                $http: Vt,
                $httpParamSerializer: It,
                $httpParamSerializerJQLike: Dt,
                $httpBackend: Ft,
                $xhrFactory: Ht,
                $jsonpCallbacks: _o,
                $location: an,
                $log: sn,
                $parse: xn,
                $rootScope: In,
                $q: Cn,
                $$q: Sn,
                $sce: Ln,
                $sceDelegate: Mn,
                $sniffer: Rn,
                $templateCache: $t,
                $templateRequest: Vn,
                $$testability: Hn,
                $timeout: Fn,
                $window: Bn,
                $$rAF: kn,
                $$jqLite: nt,
                $$Map: Xi,
                $$cookieReader: Gn
            });
        } ]).info({
            angularVersion: "1.6.6"
        });
    }(pi), pi.module("ngLocale", [], [ "$provide", function(e) {
        function t(e) {
            e += "";
            var t = e.indexOf(".");
            return -1 == t ? 0 : e.length - t - 1;
        }
        function n(e, n) {
            var r = n;
            void 0 === r && (r = Math.min(t(e), 3));
            var i = Math.pow(10, r);
            return {
                v: r,
                f: (e * i | 0) % i
            };
        }
        var r = {
            ZERO: "zero",
            ONE: "one",
            TWO: "two",
            FEW: "few",
            MANY: "many",
            OTHER: "other"
        };
        e.value("$locale", {
            DATETIME_FORMATS: {
                AMPMS: [ "AM", "PM" ],
                DAY: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
                ERANAMES: [ "Before Christ", "Anno Domini" ],
                ERAS: [ "BC", "AD" ],
                FIRSTDAYOFWEEK: 6,
                MONTH: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                SHORTDAY: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
                SHORTMONTH: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
                STANDALONEMONTH: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                WEEKENDRANGE: [ 5, 6 ],
                fullDate: "EEEE, MMMM d, y",
                longDate: "MMMM d, y",
                medium: "MMM d, y h:mm:ss a",
                mediumDate: "MMM d, y",
                mediumTime: "h:mm:ss a",
                short: "M/d/yy h:mm a",
                shortDate: "M/d/yy",
                shortTime: "h:mm a"
            },
            NUMBER_FORMATS: {
                CURRENCY_SYM: "$",
                DECIMAL_SEP: ".",
                GROUP_SEP: ",",
                PATTERNS: [ {
                    gSize: 3,
                    lgSize: 3,
                    maxFrac: 3,
                    minFrac: 0,
                    minInt: 1,
                    negPre: "-",
                    negSuf: "",
                    posPre: "",
                    posSuf: ""
                }, {
                    gSize: 3,
                    lgSize: 3,
                    maxFrac: 2,
                    minFrac: 2,
                    minInt: 1,
                    negPre: "-¤",
                    negSuf: "",
                    posPre: "¤",
                    posSuf: ""
                } ]
            },
            id: "en-us",
            localeID: "en_US",
            pluralCat: function(e, t) {
                var i = 0 | e, o = n(e, t);
                return 1 == i && 0 == o.v ? r.ONE : r.OTHER;
            }
        });
    } ]), ii(function() {
        ue(e.document, le);
    });
}(window), !window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'), 
function() {
    angular.module("angular-jwt", [ "angular-jwt.options", "angular-jwt.interceptor", "angular-jwt.jwt", "angular-jwt.authManager" ]), 
    angular.module("angular-jwt.authManager", []).provider("authManager", function() {
        this.$get = [ "$rootScope", "$injector", "$location", "jwtHelper", "jwtInterceptor", "jwtOptions", function(e, t, n, r, i, o) {
            function a(e) {
                return Array.isArray(e) ? t.invoke(e, this, {
                    options: null
                }) : e();
            }
            function s(e) {
                if (Array.isArray(e) || angular.isFunction(e)) return t.invoke(e, d, {});
                throw new Error("unauthenticatedRedirector must be a function");
            }
            function u() {
                var e = a(d.tokenGetter);
                if (e) return !r.isTokenExpired(e);
            }
            function l() {
                e.isAuthenticated = !0;
            }
            function c() {
                e.isAuthenticated = !1;
            }
            function f() {
                e.$on("$locationChangeStart", function() {
                    var t = a(d.tokenGetter);
                    t && (r.isTokenExpired(t) ? e.$broadcast("tokenHasExpired", t) : l());
                });
            }
            function h() {
                e.$on("unauthenticated", function() {
                    s(d.unauthenticatedRedirector), c();
                });
            }
            function p(e, t) {
                if (!t) return !1;
                var n = t.$$route ? t.$$route : t.data;
                if (n && !0 === n.requiresLogin) {
                    var i = a(d.tokenGetter);
                    i && !r.isTokenExpired(i) || (e.preventDefault(), s(d.unauthenticatedRedirector));
                }
            }
            var d = o.getConfig();
            e.isAuthenticated = !1;
            var m = t.has("$state") ? "$stateChangeStart" : "$routeChangeStart";
            return e.$on(m, p), {
                authenticate: l,
                unauthenticate: c,
                getToken: function() {
                    return a(d.tokenGetter);
                },
                redirect: function() {
                    return s(d.unauthenticatedRedirector);
                },
                checkAuthOnRefresh: f,
                redirectWhenUnauthenticated: h,
                isAuthenticated: u
            };
        } ];
    }), angular.module("angular-jwt.interceptor", []).provider("jwtInterceptor", function() {
        this.urlParam, this.authHeader, this.authPrefix, this.whiteListedDomains, this.tokenGetter;
        var e = this;
        this.$get = [ "$q", "$injector", "$rootScope", "urlUtils", "jwtOptions", function(t, n, r, i, o) {
            function a(e) {
                if (!i.isSameOrigin(e) && !s.whiteListedDomains.length) throw new Error("As of v0.1.0, requests to domains other than the application's origin must be white listed. Use jwtOptionsProvider.config({ whiteListedDomains: [<domain>] }); to whitelist.");
                for (var t = i.urlResolve(e).hostname.toLowerCase(), n = 0; n < s.whiteListedDomains.length; n++) {
                    var r = s.whiteListedDomains[n], o = r instanceof RegExp ? r : new RegExp(r, "i");
                    if (t.match(o)) return !0;
                }
                return !!i.isSameOrigin(e);
            }
            var s = angular.extend({}, o.getConfig(), e);
            return {
                request: function(e) {
                    if (e.skipAuthorization || !a(e.url)) return e;
                    if (s.urlParam) {
                        if (e.params = e.params || {}, e.params[s.urlParam]) return e;
                    } else if (e.headers = e.headers || {}, e.headers[s.authHeader]) return e;
                    return t.when(n.invoke(s.tokenGetter, this, {
                        options: e
                    })).then(function(t) {
                        return t && (s.urlParam ? e.params[s.urlParam] = t : e.headers[s.authHeader] = s.authPrefix + t), 
                        e;
                    });
                },
                responseError: function(e) {
                    return 401 === e.status && r.$broadcast("unauthenticated", e), t.reject(e);
                }
            };
        } ];
    }), angular.module("angular-jwt.jwt", []).service("jwtHelper", [ "$window", function(e) {
        this.urlBase64Decode = function(t) {
            var n = t.replace(/-/g, "+").replace(/_/g, "/");
            switch (n.length % 4) {
              case 0:
                break;

              case 2:
                n += "==";
                break;

              case 3:
                n += "=";
                break;

              default:
                throw "Illegal base64url string!";
            }
            return e.decodeURIComponent(escape(e.atob(n)));
        }, this.decodeToken = function(e) {
            var t = e.split(".");
            if (3 !== t.length) throw new Error("JWT must have 3 parts");
            var n = this.urlBase64Decode(t[1]);
            if (!n) throw new Error("Cannot decode the token");
            return angular.fromJson(n);
        }, this.getTokenExpirationDate = function(e) {
            var t = this.decodeToken(e);
            if (void 0 === t.exp) return null;
            var n = new Date(0);
            return n.setUTCSeconds(t.exp), n;
        }, this.isTokenExpired = function(e, t) {
            var n = this.getTokenExpirationDate(e);
            return t = t || 0, null !== n && !(n.valueOf() > new Date().valueOf() + 1e3 * t);
        };
    } ]), angular.module("angular-jwt.options", []).provider("jwtOptions", function() {
        var e = {};
        this.config = function(t) {
            e = t;
        }, this.$get = function() {
            function t() {
                this.config = angular.extend({}, n, e);
            }
            var n = {
                urlParam: null,
                authHeader: "Authorization",
                authPrefix: "Bearer ",
                whiteListedDomains: [],
                tokenGetter: function() {
                    return null;
                },
                loginPath: "/",
                unauthenticatedRedirectPath: "/",
                unauthenticatedRedirector: [ "$location", function(e) {
                    e.path(this.unauthenticatedRedirectPath);
                } ]
            };
            return t.prototype.getConfig = function() {
                return this.config;
            }, new t();
        };
    }), angular.module("angular-jwt.interceptor").service("urlUtils", function() {
        function e(e) {
            var t = e;
            return n.setAttribute("href", t), t = n.href, n.setAttribute("href", t), {
                href: n.href,
                protocol: n.protocol ? n.protocol.replace(/:$/, "") : "",
                host: n.host,
                search: n.search ? n.search.replace(/^\?/, "") : "",
                hash: n.hash ? n.hash.replace(/^#/, "") : "",
                hostname: n.hostname,
                port: n.port,
                pathname: "/" === n.pathname.charAt(0) ? n.pathname : "/" + n.pathname
            };
        }
        function t(t) {
            var n = angular.isString(t) ? e(t) : t;
            return n.protocol === r.protocol && n.host === r.host;
        }
        var n = document.createElement("a"), r = e(window.location.href);
        return {
            urlResolve: e,
            isSameOrigin: t
        };
    });
}(), "undefined" != typeof module && "undefined" != typeof exports && module.exports === exports && (module.exports = "ui.router"), 
function(e, t, n) {
    "use strict";
    function r(e, t) {
        return B(new (B(function() {}, {
            prototype: e
        }))(), t);
    }
    function i(e) {
        return q(arguments, function(t) {
            t !== e && q(t, function(t, n) {
                e.hasOwnProperty(n) || (e[n] = t);
            });
        }), e;
    }
    function o(e, t) {
        var n = [];
        for (var r in e.path) {
            if (e.path[r] !== t.path[r]) break;
            n.push(e.path[r]);
        }
        return n;
    }
    function a(e) {
        if (Object.keys) return Object.keys(e);
        var t = [];
        return q(e, function(e, n) {
            t.push(n);
        }), t;
    }
    function s(e, t) {
        if (Array.prototype.indexOf) return e.indexOf(t, Number(arguments[2]) || 0);
        var n = e.length >>> 0, r = Number(arguments[2]) || 0;
        for (r = r < 0 ? Math.ceil(r) : Math.floor(r), r < 0 && (r += n); r < n; r++) if (r in e && e[r] === t) return r;
        return -1;
    }
    function u(e, t, n, r) {
        var i, u = o(n, r), l = {}, c = [];
        for (var f in u) if (u[f] && u[f].params && (i = a(u[f].params), i.length)) for (var h in i) s(c, i[h]) >= 0 || (c.push(i[h]), 
        l[i[h]] = e[i[h]]);
        return B({}, l, t);
    }
    function l(e, t, n) {
        if (!n) {
            n = [];
            for (var r in e) n.push(r);
        }
        for (var i = 0; i < n.length; i++) {
            var o = n[i];
            if (e[o] != t[o]) return !1;
        }
        return !0;
    }
    function c(e, t) {
        var n = {};
        return q(e, function(e) {
            n[e] = t[e];
        }), n;
    }
    function f(e) {
        var t = {}, n = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
        return q(n, function(n) {
            n in e && (t[n] = e[n]);
        }), t;
    }
    function h(e) {
        var t = {}, n = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
        for (var r in e) -1 == s(n, r) && (t[r] = e[r]);
        return t;
    }
    function p(e, t) {
        var n = U(e), r = n ? [] : {};
        return q(e, function(e, i) {
            t(e, i) && (r[n ? r.length : i] = e);
        }), r;
    }
    function d(e, t) {
        var n = U(e) ? [] : {};
        return q(e, function(e, r) {
            n[r] = t(e, r);
        }), n;
    }
    function m(e) {
        return e.then(n, function() {}) && e;
    }
    function g(e, t) {
        var r = 1, o = 2, u = {}, l = [], c = u, f = B(e.when(u), {
            $$promises: u,
            $$values: u
        });
        this.study = function(u) {
            function p(e, n) {
                if ($[n] !== o) {
                    if (v.push(n), $[n] === r) throw v.splice(0, s(v, n)), new Error("Cyclic dependency: " + v.join(" -> "));
                    if ($[n] = r, H(e)) g.push(n, [ function() {
                        return t.get(e);
                    } ], l); else {
                        var i = t.annotate(e);
                        q(i, function(e) {
                            e !== n && u.hasOwnProperty(e) && p(u[e], e);
                        }), g.push(n, e, i);
                    }
                    v.pop(), $[n] = o;
                }
            }
            function d(e) {
                return F(e) && e.then && e.$$promises;
            }
            if (!F(u)) throw new Error("'invocables' must be an object");
            var m = a(u || {}), g = [], v = [], $ = {};
            return q(u, p), u = v = $ = null, function(r, o, a) {
                function s() {
                    --y || (b || i($, o.$$values), p.$$values = $, p.$$promises = p.$$promises || !0, 
                    delete p.$$inheritedValues, l.resolve($));
                }
                function u(e) {
                    p.$$failure = e, l.reject(e);
                }
                if (d(r) && a === n && (a = o, o = r, r = null), r) {
                    if (!F(r)) throw new Error("'locals' must be an object");
                } else r = c;
                if (o) {
                    if (!d(o)) throw new Error("'parent' must be a promise returned by $resolve.resolve()");
                } else o = f;
                var l = e.defer(), p = l.promise, v = p.$$promises = {}, $ = B({}, r), y = 1 + g.length / 3, b = !1;
                if (R(o.$$failure)) return u(o.$$failure), p;
                o.$$inheritedValues && i($, h(o.$$inheritedValues, m)), B(v, o.$$promises), o.$$values ? (b = i($, h(o.$$values, m)), 
                p.$$inheritedValues = h(o.$$values, m), s()) : (o.$$inheritedValues && (p.$$inheritedValues = h(o.$$inheritedValues, m)), 
                o.then(s, u));
                for (var w = 0, E = g.length; w < E; w += 3) r.hasOwnProperty(g[w]) ? s() : function(n, i, o) {
                    function l(e) {
                        f.reject(e), u(e);
                    }
                    function c() {
                        if (!R(p.$$failure)) try {
                            f.resolve(t.invoke(i, a, $)), f.promise.then(function(e) {
                                $[n] = e, s();
                            }, l);
                        } catch (e) {
                            l(e);
                        }
                    }
                    var f = e.defer(), h = 0;
                    q(o, function(e) {
                        v.hasOwnProperty(e) && !r.hasOwnProperty(e) && (h++, v[e].then(function(t) {
                            $[e] = t, --h || c();
                        }, l));
                    }), h || c(), v[n] = f.promise;
                }(g[w], g[w + 1], g[w + 2]);
                return p;
            };
        }, this.resolve = function(e, t, n, r) {
            return this.study(e)(t, n, r);
        };
    }
    function v(e, t, n) {
        this.fromConfig = function(e, t, n) {
            return R(e.template) ? this.fromString(e.template, t) : R(e.templateUrl) ? this.fromUrl(e.templateUrl, t) : R(e.templateProvider) ? this.fromProvider(e.templateProvider, t, n) : null;
        }, this.fromString = function(e, t) {
            return V(e) ? e(t) : e;
        }, this.fromUrl = function(n, r) {
            return V(n) && (n = n(r)), null == n ? null : e.get(n, {
                cache: t,
                headers: {
                    Accept: "text/html"
                }
            }).then(function(e) {
                return e.data;
            });
        }, this.fromProvider = function(e, t, r) {
            return n.invoke(e, null, r || {
                params: t
            });
        };
    }
    function $(e, t, i) {
        function o(t, n, r, i) {
            if (g.push(t), d[t]) return d[t];
            if (!/^\w+([-.]+\w+)*(?:\[\])?$/.test(t)) throw new Error("Invalid parameter name '" + t + "' in pattern '" + e + "'");
            if (m[t]) throw new Error("Duplicate parameter name '" + t + "' in pattern '" + e + "'");
            return m[t] = new z.Param(t, n, r, i), m[t];
        }
        function a(e, t, n, r) {
            var i = [ "", "" ], o = e.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
            if (!t) return o;
            switch (n) {
              case !1:
                i = [ "(", ")" + (r ? "?" : "") ];
                break;

              case !0:
                o = o.replace(/\/$/, ""), i = [ "(?:/(", ")|/)?" ];
                break;

              default:
                i = [ "(" + n + "|", ")?" ];
            }
            return o + i[0] + t + i[1];
        }
        function s(i, o) {
            var a, s, u, l, c;
            return a = i[2] || i[3], c = t.params[a], u = e.substring(h, i.index), s = o ? i[4] : i[4] || ("*" == i[1] ? ".*" : null), 
            s && (l = z.type(s) || r(z.type("string"), {
                pattern: new RegExp(s, t.caseInsensitive ? "i" : n)
            })), {
                id: a,
                regexp: s,
                segment: u,
                type: l,
                cfg: c
            };
        }
        t = B({
            params: {}
        }, F(t) ? t : {});
        var u, l = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, c = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, f = "^", h = 0, p = this.segments = [], d = i ? i.params : {}, m = this.params = i ? i.params.$$new() : new z.ParamSet(), g = [];
        this.source = e;
        for (var v, $, y; (u = l.exec(e)) && (v = s(u, !1), !(v.segment.indexOf("?") >= 0)); ) $ = o(v.id, v.type, v.cfg, "path"), 
        f += a(v.segment, $.type.pattern.source, $.squash, $.isOptional), p.push(v.segment), 
        h = l.lastIndex;
        y = e.substring(h);
        var b = y.indexOf("?");
        if (b >= 0) {
            var w = this.sourceSearch = y.substring(b);
            if (y = y.substring(0, b), this.sourcePath = e.substring(0, h + b), w.length > 0) for (h = 0; u = c.exec(w); ) v = s(u, !0), 
            $ = o(v.id, v.type, v.cfg, "search"), h = l.lastIndex;
        } else this.sourcePath = e, this.sourceSearch = "";
        f += a(y) + (!1 === t.strict ? "/?" : "") + "$", p.push(y), this.regexp = new RegExp(f, t.caseInsensitive ? "i" : n), 
        this.prefix = p[0], this.$$paramNames = g;
    }
    function y(e) {
        B(this, e);
    }
    function b() {
        function e(e) {
            return null != e ? e.toString().replace(/(~|\/)/g, function(e) {
                return {
                    "~": "~~",
                    "/": "~2F"
                }[e];
            }) : e;
        }
        function i(e) {
            return null != e ? e.toString().replace(/(~~|~2F)/g, function(e) {
                return {
                    "~~": "~",
                    "~2F": "/"
                }[e];
            }) : e;
        }
        function o() {
            return {
                strict: m,
                caseInsensitive: h
            };
        }
        function u(e) {
            return V(e) || U(e) && V(e[e.length - 1]);
        }
        function l() {
            for (;E.length; ) {
                var e = E.shift();
                if (e.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
                t.extend(v[e.name], f.invoke(e.def));
            }
        }
        function c(e) {
            B(this, e || {});
        }
        z = this;
        var f, h = !1, m = !0, g = !1, v = {}, w = !0, E = [], x = {
            string: {
                encode: e,
                decode: i,
                is: function(e) {
                    return null == e || !R(e) || "string" == typeof e;
                },
                pattern: /[^\/]*/
            },
            int: {
                encode: e,
                decode: function(e) {
                    return parseInt(e, 10);
                },
                is: function(e) {
                    return R(e) && this.decode(e.toString()) === e;
                },
                pattern: /\d+/
            },
            bool: {
                encode: function(e) {
                    return e ? 1 : 0;
                },
                decode: function(e) {
                    return 0 !== parseInt(e, 10);
                },
                is: function(e) {
                    return !0 === e || !1 === e;
                },
                pattern: /0|1/
            },
            date: {
                encode: function(e) {
                    return this.is(e) ? [ e.getFullYear(), ("0" + (e.getMonth() + 1)).slice(-2), ("0" + e.getDate()).slice(-2) ].join("-") : n;
                },
                decode: function(e) {
                    if (this.is(e)) return e;
                    var t = this.capture.exec(e);
                    return t ? new Date(t[1], t[2] - 1, t[3]) : n;
                },
                is: function(e) {
                    return e instanceof Date && !isNaN(e.valueOf());
                },
                equals: function(e, t) {
                    return this.is(e) && this.is(t) && e.toISOString() === t.toISOString();
                },
                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
            },
            json: {
                encode: t.toJson,
                decode: t.fromJson,
                is: t.isObject,
                equals: t.equals,
                pattern: /[^\/]*/
            },
            any: {
                encode: t.identity,
                decode: t.identity,
                equals: t.equals,
                pattern: /.*/
            }
        };
        b.$$getDefaultValue = function(e) {
            if (!u(e.value)) return e.value;
            if (!f) throw new Error("Injectable functions cannot be called at configuration time");
            return f.invoke(e.value);
        }, this.caseInsensitive = function(e) {
            return R(e) && (h = e), h;
        }, this.strictMode = function(e) {
            return R(e) && (m = e), m;
        }, this.defaultSquashPolicy = function(e) {
            if (!R(e)) return g;
            if (!0 !== e && !1 !== e && !H(e)) throw new Error("Invalid squash policy: " + e + ". Valid policies: false, true, arbitrary-string");
            return g = e, e;
        }, this.compile = function(e, t) {
            return new $(e, B(o(), t));
        }, this.isMatcher = function(e) {
            if (!F(e)) return !1;
            var t = !0;
            return q($.prototype, function(n, r) {
                V(n) && (t = t && R(e[r]) && V(e[r]));
            }), t;
        }, this.type = function(e, t, n) {
            if (!R(t)) return v[e];
            if (v.hasOwnProperty(e)) throw new Error("A type named '" + e + "' has already been defined.");
            return v[e] = new y(B({
                name: e
            }, t)), n && (E.push({
                name: e,
                def: n
            }), w || l()), this;
        }, q(x, function(e, t) {
            v[t] = new y(B({
                name: t
            }, e));
        }), v = r(v, {}), this.$get = [ "$injector", function(e) {
            return f = e, w = !1, l(), q(x, function(e, t) {
                v[t] || (v[t] = new y(e));
            }), this;
        } ], this.Param = function(e, r, i, o) {
            function l() {
                if (!f) throw new Error("Injectable functions cannot be called at configuration time");
                var e = f.invoke(i.$$fn);
                if (null !== e && e !== n && !m.type.is(e)) throw new Error("Default value (" + e + ") for parameter '" + m.id + "' is not an instance of Type (" + m.type.name + ")");
                return e;
            }
            function c(e) {
                function t(e) {
                    return function(t) {
                        return t.from === e;
                    };
                }
                return e = function(e) {
                    var n = d(p(m.replace, t(e)), function(e) {
                        return e.to;
                    });
                    return n.length ? n[0] : e;
                }(e), R(e) ? m.type.$normalize(e) : l();
            }
            function h() {
                return "{Param:" + e + " " + r + " squash: '" + w + "' optional: " + b + "}";
            }
            var m = this;
            i = function(e) {
                var t = F(e) ? a(e) : [];
                return -1 === s(t, "value") && -1 === s(t, "type") && -1 === s(t, "squash") && -1 === s(t, "array") && (e = {
                    value: e
                }), e.$$fn = u(e.value) ? e.value : function() {
                    return e.value;
                }, e;
            }(i), r = function(n, r, i) {
                if (n.type && r) throw new Error("Param '" + e + "' has two type configurations.");
                return r || (n.type ? t.isString(n.type) ? v[n.type] : n.type instanceof y ? n.type : new y(n.type) : "config" === i ? v.any : v.string);
            }(i, r, o);
            var $ = function() {
                var t = {
                    array: "search" === o && "auto"
                }, n = e.match(/\[\]$/) ? {
                    array: !0
                } : {};
                return B(t, n, i).array;
            }();
            r = $ ? r.$asArray($, "search" === o) : r, "string" !== r.name || $ || "path" !== o || i.value !== n || (i.value = "");
            var b = i.value !== n, w = function(e, t) {
                var n = e.squash;
                if (!t || !1 === n) return !1;
                if (!R(n) || null == n) return g;
                if (!0 === n || H(n)) return n;
                throw new Error("Invalid squash policy: '" + n + "'. Valid policies: false, true, or arbitrary string");
            }(i, b), E = function(e, t, r, i) {
                var o, a, u = [ {
                    from: "",
                    to: r || t ? n : ""
                }, {
                    from: null,
                    to: r || t ? n : ""
                } ];
                return o = U(e.replace) ? e.replace : [], H(i) && o.push({
                    from: i,
                    to: n
                }), a = d(o, function(e) {
                    return e.from;
                }), p(u, function(e) {
                    return -1 === s(a, e.from);
                }).concat(o);
            }(i, $, b, w);
            B(this, {
                id: e,
                type: r,
                location: o,
                array: $,
                squash: w,
                replace: E,
                isOptional: b,
                value: c,
                dynamic: n,
                config: i,
                toString: h
            });
        }, c.prototype = {
            $$new: function() {
                return r(this, B(new c(), {
                    $$parent: this
                }));
            },
            $$keys: function() {
                for (var e = [], t = [], n = this, r = a(c.prototype); n; ) t.push(n), n = n.$$parent;
                return t.reverse(), q(t, function(t) {
                    q(a(t), function(t) {
                        -1 === s(e, t) && -1 === s(r, t) && e.push(t);
                    });
                }), e;
            },
            $$values: function(e) {
                var t = {}, n = this;
                return q(n.$$keys(), function(r) {
                    t[r] = n[r].value(e && e[r]);
                }), t;
            },
            $$equals: function(e, t) {
                var n = !0, r = this;
                return q(r.$$keys(), function(i) {
                    var o = e && e[i], a = t && t[i];
                    r[i].type.equals(o, a) || (n = !1);
                }), n;
            },
            $$validates: function(e) {
                var r, i, o, a, s, u = this.$$keys();
                for (r = 0; r < u.length && (i = this[u[r]], (o = e[u[r]]) !== n && null !== o || !i.isOptional); r++) {
                    if (a = i.type.$normalize(o), !i.type.is(a)) return !1;
                    if (s = i.type.encode(a), t.isString(s) && !i.type.pattern.exec(s)) return !1;
                }
                return !0;
            },
            $$parent: n
        }, this.ParamSet = c;
    }
    function w(e, r) {
        function i(e) {
            var t = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(e.source);
            return null != t ? t[1].replace(/\\(.)/g, "$1") : "";
        }
        function o(e, t) {
            return e.replace(/\$(\$|\d{1,2})/, function(e, n) {
                return t["$" === n ? 0 : Number(n)];
            });
        }
        function a(e, t, n) {
            if (!n) return !1;
            var r = e.invoke(t, t, {
                $match: n
            });
            return !R(r) || r;
        }
        function s(r, i, o, a, s) {
            function h(e, t, n) {
                return "/" === g ? e : t ? g.slice(0, -1) + e : n ? g.slice(1) + e : e;
            }
            function p(e) {
                function t(e) {
                    var t = e(o, r);
                    return !!t && (H(t) && r.replace().url(t), !0);
                }
                if (!e || !e.defaultPrevented) {
                    m && r.url();
                    m = n;
                    var i, a = l.length;
                    for (i = 0; i < a; i++) if (t(l[i])) return;
                    c && t(c);
                }
            }
            function d() {
                return u = u || i.$on("$locationChangeSuccess", p);
            }
            var m, g = a.baseHref(), v = r.url();
            return f || d(), {
                sync: function() {
                    p();
                },
                listen: function() {
                    return d();
                },
                update: function(e) {
                    if (e) return void (v = r.url());
                    r.url() !== v && (r.url(v), r.replace());
                },
                push: function(e, t, i) {
                    var o = e.format(t || {});
                    null !== o && t && t["#"] && (o += "#" + t["#"]), r.url(o), m = i && i.$$avoidResync ? r.url() : n, 
                    i && i.replace && r.replace();
                },
                href: function(n, i, o) {
                    if (!n.validates(i)) return null;
                    var a = e.html5Mode();
                    t.isObject(a) && (a = a.enabled), a = a && s.history;
                    var u = n.format(i);
                    if (o = o || {}, a || null === u || (u = "#" + e.hashPrefix() + u), null !== u && i && i["#"] && (u += "#" + i["#"]), 
                    u = h(u, a, o.absolute), !o.absolute || !u) return u;
                    var l = !a && u ? "/" : "", c = r.port();
                    return c = 80 === c || 443 === c ? "" : ":" + c, [ r.protocol(), "://", r.host(), c, l, u ].join("");
                }
            };
        }
        var u, l = [], c = null, f = !1;
        this.rule = function(e) {
            if (!V(e)) throw new Error("'rule' must be a function");
            return l.push(e), this;
        }, this.otherwise = function(e) {
            if (H(e)) {
                var t = e;
                e = function() {
                    return t;
                };
            } else if (!V(e)) throw new Error("'rule' must be a function");
            return c = e, this;
        }, this.when = function(e, t) {
            var n, s = H(t);
            if (H(e) && (e = r.compile(e)), !s && !V(t) && !U(t)) throw new Error("invalid 'handler' in when()");
            var u = {
                matcher: function(e, t) {
                    return s && (n = r.compile(t), t = [ "$match", function(e) {
                        return n.format(e);
                    } ]), B(function(n, r) {
                        return a(n, t, e.exec(r.path(), r.search()));
                    }, {
                        prefix: H(e.prefix) ? e.prefix : ""
                    });
                },
                regex: function(e, t) {
                    if (e.global || e.sticky) throw new Error("when() RegExp must not be global or sticky");
                    return s && (n = t, t = [ "$match", function(e) {
                        return o(n, e);
                    } ]), B(function(n, r) {
                        return a(n, t, e.exec(r.path()));
                    }, {
                        prefix: i(e)
                    });
                }
            }, l = {
                matcher: r.isMatcher(e),
                regex: e instanceof RegExp
            };
            for (var c in l) if (l[c]) return this.rule(u[c](e, t));
            throw new Error("invalid 'what' in when()");
        }, this.deferIntercept = function(e) {
            e === n && (e = !0), f = e;
        }, this.$get = s, s.$inject = [ "$location", "$rootScope", "$injector", "$browser", "$sniffer" ];
    }
    function E(e, i) {
        function o(e) {
            return 0 === e.indexOf(".") || 0 === e.indexOf("^");
        }
        function h(e, t) {
            if (!e) return n;
            var r = H(e), i = r ? e : e.name;
            if (o(i)) {
                if (!t) throw new Error("No reference point given for path '" + i + "'");
                t = h(t);
                for (var a = i.split("."), s = 0, u = a.length, l = t; s < u; s++) if ("" !== a[s] || 0 !== s) {
                    if ("^" !== a[s]) break;
                    if (!l.parent) throw new Error("Path '" + i + "' not valid for state '" + t.name + "'");
                    l = l.parent;
                } else l = t;
                a = a.slice(s).join("."), i = l.name + (l.name && a ? "." : "") + a;
            }
            var c = T[i];
            return !c || !r && (r || c !== e && c.self !== e) ? n : c;
        }
        function p(e, t) {
            _[e] || (_[e] = []), _[e].push(t);
        }
        function g(e) {
            for (var t = _[e] || []; t.length; ) v(t.shift());
        }
        function v(t) {
            t = r(t, {
                self: t,
                resolve: t.resolve || {},
                toString: function() {
                    return this.name;
                }
            });
            var n = t.name;
            if (!H(n) || n.indexOf("@") >= 0) throw new Error("State must have a valid name");
            if (T.hasOwnProperty(n)) throw new Error("State '" + n + "' is already defined");
            var i = -1 !== n.indexOf(".") ? n.substring(0, n.lastIndexOf(".")) : H(t.parent) ? t.parent : F(t.parent) && H(t.parent.name) ? t.parent.name : "";
            if (i && !T[i]) return p(i, t.self);
            for (var o in O) V(O[o]) && (t[o] = O[o](t, O.$delegates[o]));
            return T[n] = t, !t[A] && t.url && e.when(t.url, [ "$match", "$stateParams", function(e, n) {
                S.$current.navigable == t && l(e, n) || S.transitionTo(t, e, {
                    inherit: !0,
                    location: !1
                });
            } ]), g(n), t;
        }
        function $(e) {
            return e.indexOf("*") > -1;
        }
        function y(e) {
            for (var t = e.split("."), n = S.$current.name.split("."), r = 0, i = t.length; r < i; r++) "*" === t[r] && (n[r] = "*");
            return "**" === t[0] && (n = n.slice(s(n, t[1])), n.unshift("**")), "**" === t[t.length - 1] && (n.splice(s(n, t[t.length - 2]) + 1, Number.MAX_VALUE), 
            n.push("**")), t.length == n.length && n.join("") === t.join("");
        }
        function b(e, t) {
            return H(e) && !R(t) ? O[e] : V(t) && H(e) ? (O[e] && !O.$delegates[e] && (O.$delegates[e] = O[e]), 
            O[e] = t, this) : this;
        }
        function w(e, t) {
            return F(e) ? t = e : t.name = e, v(t), this;
        }
        function E(e, i, o, s, f, p, g, v, b) {
            function w(t, n, r, o) {
                var a = e.$broadcast("$stateNotFound", t, n, r);
                if (a.defaultPrevented) return g.update(), I;
                if (!a.retry) return null;
                if (o.$retry) return g.update(), D;
                var s = S.transition = i.when(a.retry);
                return s.then(function() {
                    return s !== S.transition ? (e.$broadcast("$stateChangeCancel", t.to, t.toParams, n, r), 
                    O) : (t.options.$retry = !0, S.transitionTo(t.to, t.toParams, t.options));
                }, function() {
                    return I;
                }), g.update(), s;
            }
            function E(e, n, r, a, u, l) {
                function h() {
                    var n = [];
                    return q(e.views, function(r, i) {
                        var a = r.resolve && r.resolve !== e.resolve ? r.resolve : {};
                        a.$template = [ function() {
                            return o.load(i, {
                                view: r,
                                locals: u.globals,
                                params: p,
                                notify: l.notify
                            }) || "";
                        } ], n.push(f.resolve(a, u.globals, u.resolve, e).then(function(n) {
                            if (V(r.controllerProvider) || U(r.controllerProvider)) {
                                var o = t.extend({}, a, u.globals);
                                n.$$controller = s.invoke(r.controllerProvider, null, o);
                            } else n.$$controller = r.controller;
                            n.$$state = e, n.$$controllerAs = r.controllerAs, n.$$resolveAs = r.resolveAs, u[i] = n;
                        }));
                    }), i.all(n).then(function() {
                        return u.globals;
                    });
                }
                var p = r ? n : c(e.params.$$keys(), n), d = {
                    $stateParams: p
                };
                u.resolve = f.resolve(e.resolve, d, u.resolve, e);
                var m = [ u.resolve.then(function(e) {
                    u.globals = e;
                }) ];
                return a && m.push(a), i.all(m).then(h).then(function(e) {
                    return u;
                });
            }
            var _ = new Error("transition superseded"), O = m(i.reject(_)), k = m(i.reject(new Error("transition prevented"))), I = m(i.reject(new Error("transition aborted"))), D = m(i.reject(new Error("transition failed")));
            return C.locals = {
                resolve: null,
                globals: {
                    $stateParams: {}
                }
            }, S = {
                params: {},
                current: C.self,
                $current: C,
                transition: null
            }, S.reload = function(e) {
                return S.transitionTo(S.current, p, {
                    reload: e || !0,
                    inherit: !1,
                    notify: !0
                });
            }, S.go = function(e, t, n) {
                return S.transitionTo(e, t, B({
                    inherit: !0,
                    relative: S.$current
                }, n));
            }, S.transitionTo = function(t, n, o) {
                n = n || {}, o = B({
                    location: !0,
                    inherit: !1,
                    relative: null,
                    notify: !0,
                    reload: !1,
                    $retry: !1
                }, o || {});
                var a, l = S.$current, f = S.params, d = l.path, m = h(t, o.relative), v = n["#"];
                if (!R(m)) {
                    var $ = {
                        to: t,
                        toParams: n,
                        options: o
                    }, y = w($, l.self, f, o);
                    if (y) return y;
                    if (t = $.to, n = $.toParams, o = $.options, m = h(t, o.relative), !R(m)) {
                        if (!o.relative) throw new Error("No such state '" + t + "'");
                        throw new Error("Could not resolve '" + t + "' from state '" + o.relative + "'");
                    }
                }
                if (m[A]) throw new Error("Cannot transition to abstract state '" + t + "'");
                if (o.inherit && (n = u(p, n || {}, S.$current, m)), !m.params.$$validates(n)) return D;
                n = m.params.$$values(n), t = m;
                var b = t.path, T = 0, I = b[T], N = C.locals, j = [];
                if (o.reload) {
                    if (H(o.reload) || F(o.reload)) {
                        if (F(o.reload) && !o.reload.name) throw new Error("Invalid reload state object");
                        var P = !0 === o.reload ? d[0] : h(o.reload);
                        if (o.reload && !P) throw new Error("No such reload state '" + (H(o.reload) ? o.reload : o.reload.name) + "'");
                        for (;I && I === d[T] && I !== P; ) N = j[T] = I.locals, T++, I = b[T];
                    }
                } else for (;I && I === d[T] && I.ownParams.$$equals(n, f); ) N = j[T] = I.locals, 
                T++, I = b[T];
                if (x(t, n, l, f, N, o)) return v && (n["#"] = v), S.params = n, W(S.params, p), 
                W(c(t.params.$$keys(), p), t.locals.globals.$stateParams), o.location && t.navigable && t.navigable.url && (g.push(t.navigable.url, n, {
                    $$avoidResync: !0,
                    replace: "replace" === o.location
                }), g.update(!0)), S.transition = null, i.when(S.current);
                if (n = c(t.params.$$keys(), n || {}), v && (n["#"] = v), o.notify && e.$broadcast("$stateChangeStart", t.self, n, l.self, f, o).defaultPrevented) return e.$broadcast("$stateChangeCancel", t.self, n, l.self, f), 
                null == S.transition && g.update(), k;
                for (var M = i.when(N), L = T; L < b.length; L++, I = b[L]) N = j[L] = r(N), M = E(I, n, I === t, M, N, o);
                var V = S.transition = M.then(function() {
                    var r, i, a;
                    if (S.transition !== V) return e.$broadcast("$stateChangeCancel", t.self, n, l.self, f), 
                    O;
                    for (r = d.length - 1; r >= T; r--) a = d[r], a.self.onExit && s.invoke(a.self.onExit, a.self, a.locals.globals), 
                    a.locals = null;
                    for (r = T; r < b.length; r++) i = b[r], i.locals = j[r], i.self.onEnter && s.invoke(i.self.onEnter, i.self, i.locals.globals);
                    return S.transition !== V ? (e.$broadcast("$stateChangeCancel", t.self, n, l.self, f), 
                    O) : (S.$current = t, S.current = t.self, S.params = n, W(S.params, p), S.transition = null, 
                    o.location && t.navigable && g.push(t.navigable.url, t.navigable.locals.globals.$stateParams, {
                        $$avoidResync: !0,
                        replace: "replace" === o.location
                    }), o.notify && e.$broadcast("$stateChangeSuccess", t.self, n, l.self, f), g.update(!0), 
                    S.current);
                }).then(null, function(r) {
                    return r === _ ? O : S.transition !== V ? (e.$broadcast("$stateChangeCancel", t.self, n, l.self, f), 
                    O) : (S.transition = null, a = e.$broadcast("$stateChangeError", t.self, n, l.self, f, r), 
                    a.defaultPrevented || g.update(), i.reject(r));
                });
                return V;
            }, S.is = function(e, t, r) {
                r = B({
                    relative: S.$current
                }, r || {});
                var i = h(e, r.relative);
                return R(i) ? S.$current === i && (!t || l(i.params.$$values(t), p)) : n;
            }, S.includes = function(e, t, r) {
                if (r = B({
                    relative: S.$current
                }, r || {}), H(e) && $(e)) {
                    if (!y(e)) return !1;
                    e = S.$current.name;
                }
                var i = h(e, r.relative);
                if (!R(i)) return n;
                if (!R(S.$current.includes[i.name])) return !1;
                if (!t) return !0;
                for (var o = a(t), s = 0; s < o.length; s++) {
                    var u = o[s], l = i.params[u];
                    if (l && !l.type.equals(p[u], t[u])) return !1;
                }
                return !0;
            }, S.href = function(e, t, r) {
                r = B({
                    lossy: !0,
                    inherit: !0,
                    absolute: !1,
                    relative: S.$current
                }, r || {});
                var i = h(e, r.relative);
                if (!R(i)) return null;
                r.inherit && (t = u(p, t || {}, S.$current, i));
                var o = i && r.lossy ? i.navigable : i;
                return o && o.url !== n && null !== o.url ? g.href(o.url, c(i.params.$$keys().concat("#"), t || {}), {
                    absolute: r.absolute
                }) : null;
            }, S.get = function(e, t) {
                if (0 === arguments.length) return d(a(T), function(e) {
                    return T[e].self;
                });
                var n = h(e, t || S.$current);
                return n && n.self ? n.self : null;
            }, S;
        }
        function x(e, t, n, r, i, o) {
            if (!o.reload && e === n && (i === n.locals || !1 === e.self.reloadOnSearch && function(e, t, n) {
                function r(t) {
                    return "search" != e.params[t].location;
                }
                var i = e.params.$$keys().filter(r), o = f.apply({}, [ e.params ].concat(i));
                return new z.ParamSet(o).$$equals(t, n);
            }(n, r, t))) return !0;
        }
        var C, S, T = {}, _ = {}, A = "abstract", O = {
            parent: function(e) {
                if (R(e.parent) && e.parent) return h(e.parent);
                var t = /^(.+)\.[^.]+$/.exec(e.name);
                return t ? h(t[1]) : C;
            },
            data: function(e) {
                return e.parent && e.parent.data && (e.data = e.self.data = r(e.parent.data, e.data)), 
                e.data;
            },
            url: function(e) {
                var t = e.url, n = {
                    params: e.params || {}
                };
                if (H(t)) return "^" == t.charAt(0) ? i.compile(t.substring(1), n) : (e.parent.navigable || C).url.concat(t, n);
                if (!t || i.isMatcher(t)) return t;
                throw new Error("Invalid url '" + t + "' in state '" + e + "'");
            },
            navigable: function(e) {
                return e.url ? e : e.parent ? e.parent.navigable : null;
            },
            ownParams: function(e) {
                var t = e.url && e.url.params || new z.ParamSet();
                return q(e.params || {}, function(e, n) {
                    t[n] || (t[n] = new z.Param(n, null, e, "config"));
                }), t;
            },
            params: function(e) {
                var t = f(e.ownParams, e.ownParams.$$keys());
                return e.parent && e.parent.params ? B(e.parent.params.$$new(), t) : new z.ParamSet();
            },
            views: function(e) {
                var t = {};
                return q(R(e.views) ? e.views : {
                    "": e
                }, function(n, r) {
                    r.indexOf("@") < 0 && (r += "@" + e.parent.name), n.resolveAs = n.resolveAs || e.resolveAs || "$resolve", 
                    t[r] = n;
                }), t;
            },
            path: function(e) {
                return e.parent ? e.parent.path.concat(e) : [];
            },
            includes: function(e) {
                var t = e.parent ? B({}, e.parent.includes) : {};
                return t[e.name] = !0, t;
            },
            $delegates: {}
        };
        C = v({
            name: "",
            url: "^",
            views: null,
            abstract: !0
        }), C.navigable = null, this.decorator = b, this.state = w, this.$get = E, E.$inject = [ "$rootScope", "$q", "$view", "$injector", "$resolve", "$stateParams", "$urlRouter", "$location", "$urlMatcherFactory" ];
    }
    function x() {
        function e(e, t) {
            return {
                load: function(e, n) {
                    var r;
                    return n = B({
                        template: null,
                        controller: null,
                        view: null,
                        locals: null,
                        notify: !0,
                        async: !0,
                        params: {}
                    }, n), n.view && (r = t.fromConfig(n.view, n.params, n.locals)), r;
                }
            };
        }
        this.$get = e, e.$inject = [ "$rootScope", "$templateFactory" ];
    }
    function C() {
        var e = !1;
        this.useAnchorScroll = function() {
            e = !0;
        }, this.$get = [ "$anchorScroll", "$timeout", function(t, n) {
            return e ? t : function(e) {
                return n(function() {
                    e[0].scrollIntoView();
                }, 0, !1);
            };
        } ];
    }
    function S(e, n, r, i, o) {
        function a(e, n) {
            if (l) return {
                enter: function(e, n, r) {
                    t.version.minor > 2 ? l.enter(e, null, n).then(r) : l.enter(e, null, n, r);
                },
                leave: function(e, n) {
                    t.version.minor > 2 ? l.leave(e).then(n) : l.leave(e, n);
                }
            };
            if (u) {
                var r = u && u(n, e);
                return {
                    enter: function(e, t, n) {
                        r.enter(e, null, t), n();
                    },
                    leave: function(e, t) {
                        r.leave(e), t();
                    }
                };
            }
            return function() {
                return {
                    enter: function(e, t, n) {
                        t.after(e), n();
                    },
                    leave: function(e, t) {
                        e.remove(), t();
                    }
                };
            }();
        }
        var s = function() {
            return n.has ? function(e) {
                return n.has(e) ? n.get(e) : null;
            } : function(e) {
                try {
                    return n.get(e);
                } catch (e) {
                    return null;
                }
            };
        }(), u = s("$animator"), l = s("$animate");
        return {
            restrict: "ECA",
            terminal: !0,
            priority: 400,
            transclude: "element",
            compile: function(n, s, u) {
                return function(n, s, l) {
                    function c() {
                        if (h && (h.remove(), h = null), d && (d.$destroy(), d = null), p) {
                            var e = p.data("$uiViewAnim");
                            $.leave(p, function() {
                                e.$$animLeave.resolve(), h = null;
                            }), h = p, p = null;
                        }
                    }
                    function f(a) {
                        var f, h = _(n, l, s, i), y = h && e.$current && e.$current.locals[h];
                        if (a || y !== m) {
                            f = n.$new(), m = e.$current.locals[h], f.$emit("$viewContentLoading", h);
                            var b = u(f, function(e) {
                                var i = o.defer(), a = o.defer(), u = {
                                    $animEnter: i.promise,
                                    $animLeave: a.promise,
                                    $$animLeave: a
                                };
                                e.data("$uiViewAnim", u), $.enter(e, s, function() {
                                    i.resolve(), d && d.$emit("$viewContentAnimationEnded"), (t.isDefined(v) && !v || n.$eval(v)) && r(e);
                                }), c();
                            });
                            p = b, d = f, d.$emit("$viewContentLoaded", h), d.$eval(g);
                        }
                    }
                    var h, p, d, m, g = l.onload || "", v = l.autoscroll, $ = a(l, n);
                    s.inheritedData("$uiView");
                    n.$on("$stateChangeSuccess", function() {
                        f(!1);
                    }), f(!0);
                };
            }
        };
    }
    function T(e, n, r, i) {
        return {
            restrict: "ECA",
            priority: -400,
            compile: function(o) {
                var a = o.html();
                return function(o, s, u) {
                    var l = r.$current, c = _(o, u, s, i), f = l && l.locals[c];
                    if (f) {
                        s.data("$uiView", {
                            name: c,
                            state: f.$$state
                        }), s.html(f.$template ? f.$template : a);
                        var h = t.extend({}, f);
                        o[f.$$resolveAs] = h;
                        var p = e(s.contents());
                        if (f.$$controller) {
                            f.$scope = o, f.$element = s;
                            var d = n(f.$$controller, f);
                            f.$$controllerAs && (o[f.$$controllerAs] = d, o[f.$$controllerAs][f.$$resolveAs] = h), 
                            V(d.$onInit) && d.$onInit(), s.data("$ngControllerController", d), s.children().data("$ngControllerController", d);
                        }
                        p(o);
                    }
                };
            }
        };
    }
    function _(e, t, n, r) {
        var i = r(t.uiView || t.name || "")(e), o = n.inheritedData("$uiView");
        return i.indexOf("@") >= 0 ? i : i + "@" + (o ? o.state.name : "");
    }
    function A(e, t) {
        var n, r = e.match(/^\s*({[^}]*})\s*$/);
        if (r && (e = t + "(" + r[1] + ")"), !(n = e.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/)) || 4 !== n.length) throw new Error("Invalid state ref '" + e + "'");
        return {
            state: n[1],
            paramExpr: n[3] || null
        };
    }
    function O(e) {
        var t = e.parent().inheritedData("$uiView");
        if (t && t.state && t.state.name) return t.state;
    }
    function k(e) {
        var t = "[object SVGAnimatedString]" === Object.prototype.toString.call(e.prop("href")), n = "FORM" === e[0].nodeName;
        return {
            attr: n ? "action" : t ? "xlink:href" : "href",
            isAnchor: "A" === e.prop("tagName").toUpperCase(),
            clickable: !n
        };
    }
    function I(e, t, n, r, i) {
        return function(o) {
            var a = o.which || o.button, s = i();
            if (!(a > 1 || o.ctrlKey || o.metaKey || o.shiftKey || e.attr("target"))) {
                var u = n(function() {
                    t.go(s.state, s.params, s.options);
                });
                o.preventDefault();
                var l = r.isAnchor && !s.href ? 1 : 0;
                o.preventDefault = function() {
                    l-- <= 0 && n.cancel(u);
                };
            }
        };
    }
    function D(e, t) {
        return {
            relative: O(e) || t.$current,
            inherit: !0
        };
    }
    function N(e, n) {
        return {
            restrict: "A",
            require: [ "?^uiSrefActive", "?^uiSrefActiveEq" ],
            link: function(r, i, o, a) {
                var s, u = A(o.uiSref, e.current.name), l = {
                    state: u.state,
                    href: null,
                    params: null
                }, c = k(i), f = a[1] || a[0], h = null;
                l.options = B(D(i, e), o.uiSrefOpts ? r.$eval(o.uiSrefOpts) : {});
                var p = function(n) {
                    n && (l.params = t.copy(n)), l.href = e.href(u.state, l.params, l.options), h && h(), 
                    f && (h = f.$$addStateInfo(u.state, l.params)), null !== l.href && o.$set(c.attr, l.href);
                };
                u.paramExpr && (r.$watch(u.paramExpr, function(e) {
                    e !== l.params && p(e);
                }, !0), l.params = t.copy(r.$eval(u.paramExpr))), p(), c.clickable && (s = I(i, e, n, c, function() {
                    return l;
                }), i[i.on ? "on" : "bind"]("click", s), r.$on("$destroy", function() {
                    i[i.off ? "off" : "unbind"]("click", s);
                }));
            }
        };
    }
    function j(e, t) {
        return {
            restrict: "A",
            require: [ "?^uiSrefActive", "?^uiSrefActiveEq" ],
            link: function(n, r, i, o) {
                function a(t) {
                    h.state = t[0], h.params = t[1], h.options = t[2], h.href = e.href(h.state, h.params, h.options), 
                    p && p(), l && (p = l.$$addStateInfo(h.state, h.params)), h.href && i.$set(u.attr, h.href);
                }
                var s, u = k(r), l = o[1] || o[0], c = [ i.uiState, i.uiStateParams || null, i.uiStateOpts || null ], f = "[" + c.map(function(e) {
                    return e || "null";
                }).join(", ") + "]", h = {
                    state: null,
                    params: null,
                    options: null,
                    href: null
                }, p = null;
                n.$watch(f, a, !0), a(n.$eval(f)), u.clickable && (s = I(r, e, t, u, function() {
                    return h;
                }), r[r.on ? "on" : "bind"]("click", s), n.$on("$destroy", function() {
                    r[r.off ? "off" : "unbind"]("click", s);
                }));
            }
        };
    }
    function P(e, t, n) {
        return {
            restrict: "A",
            controller: [ "$scope", "$element", "$attrs", "$timeout", function(t, r, i, o) {
                function a(t, n, i) {
                    var o = e.get(t, O(r)), a = s(t, n), u = {
                        state: o || {
                            name: t
                        },
                        params: n,
                        hash: a
                    };
                    return m.push(u), g[a] = i, function() {
                        var e = m.indexOf(u);
                        -1 !== e && m.splice(e, 1);
                    };
                }
                function s(e, n) {
                    if (!H(e)) throw new Error("state should be a string");
                    return F(n) ? e + G(n) : (n = t.$eval(n), F(n) ? e + G(n) : e);
                }
                function u() {
                    for (var e = 0; e < m.length; e++) f(m[e].state, m[e].params) ? l(r, g[m[e].hash]) : c(r, g[m[e].hash]), 
                    h(m[e].state, m[e].params) ? l(r, p) : c(r, p);
                }
                function l(e, t) {
                    o(function() {
                        e.addClass(t);
                    });
                }
                function c(e, t) {
                    e.removeClass(t);
                }
                function f(t, n) {
                    return e.includes(t.name, n);
                }
                function h(t, n) {
                    return e.is(t.name, n);
                }
                var p, d, m = [], g = {};
                p = n(i.uiSrefActiveEq || "", !1)(t);
                try {
                    d = t.$eval(i.uiSrefActive);
                } catch (e) {}
                d = d || n(i.uiSrefActive || "", !1)(t), F(d) && q(d, function(n, r) {
                    if (H(n)) {
                        var i = A(n, e.current.name);
                        a(i.state, t.$eval(i.paramExpr), r);
                    }
                }), this.$$addStateInfo = function(e, t) {
                    if (!(F(d) && m.length > 0)) {
                        var n = a(e, t, d);
                        return u(), n;
                    }
                }, t.$on("$stateChangeSuccess", u), u();
            } ]
        };
    }
    function M(e) {
        var t = function(t, n) {
            return e.is(t, n);
        };
        return t.$stateful = !0, t;
    }
    function L(e) {
        var t = function(t, n, r) {
            return e.includes(t, n, r);
        };
        return t.$stateful = !0, t;
    }
    var R = t.isDefined, V = t.isFunction, H = t.isString, F = t.isObject, U = t.isArray, q = t.forEach, B = t.extend, W = t.copy, G = t.toJson;
    t.module("ui.router.util", [ "ng" ]), t.module("ui.router.router", [ "ui.router.util" ]), 
    t.module("ui.router.state", [ "ui.router.router", "ui.router.util" ]), t.module("ui.router", [ "ui.router.state" ]), 
    t.module("ui.router.compat", [ "ui.router" ]), g.$inject = [ "$q", "$injector" ], 
    t.module("ui.router.util").service("$resolve", g), v.$inject = [ "$http", "$templateCache", "$injector" ], 
    t.module("ui.router.util").service("$templateFactory", v);
    var z;
    $.prototype.concat = function(e, t) {
        var n = {
            caseInsensitive: z.caseInsensitive(),
            strict: z.strictMode(),
            squash: z.defaultSquashPolicy()
        };
        return new $(this.sourcePath + e + this.sourceSearch, B(n, t), this);
    }, $.prototype.toString = function() {
        return this.source;
    }, $.prototype.exec = function(e, t) {
        var n = this.regexp.exec(e);
        if (!n) return null;
        t = t || {};
        var r, i, o, a = this.parameters(), s = a.length, u = this.segments.length - 1, l = {};
        if (u !== n.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");
        var c, f;
        for (r = 0; r < u; r++) {
            for (o = a[r], c = this.params[o], f = n[r + 1], i = 0; i < c.replace.length; i++) c.replace[i].from === f && (f = c.replace[i].to);
            f && !0 === c.array && (f = function(e) {
                function t(e) {
                    return e.split("").reverse().join("");
                }
                function n(e) {
                    return e.replace(/\\-/g, "-");
                }
                return d(d(t(e).split(/-(?!\\)/), t), n).reverse();
            }(f)), R(f) && (f = c.type.decode(f)), l[o] = c.value(f);
        }
        for (;r < s; r++) {
            for (o = a[r], l[o] = this.params[o].value(t[o]), c = this.params[o], f = t[o], 
            i = 0; i < c.replace.length; i++) c.replace[i].from === f && (f = c.replace[i].to);
            R(f) && (f = c.type.decode(f)), l[o] = c.value(f);
        }
        return l;
    }, $.prototype.parameters = function(e) {
        return R(e) ? this.params[e] || null : this.$$paramNames;
    }, $.prototype.validates = function(e) {
        return this.params.$$validates(e);
    }, $.prototype.format = function(e) {
        function t(e) {
            return encodeURIComponent(e).replace(/-/g, function(e) {
                return "%5C%" + e.charCodeAt(0).toString(16).toUpperCase();
            });
        }
        e = e || {};
        var n = this.segments, r = this.parameters(), i = this.params;
        if (!this.validates(e)) return null;
        var o, a = !1, s = n.length - 1, u = r.length, l = n[0];
        for (o = 0; o < u; o++) {
            var c = o < s, f = r[o], h = i[f], p = h.value(e[f]), m = h.isOptional && h.type.equals(h.value(), p), g = !!m && h.squash, v = h.type.encode(p);
            if (c) {
                var $ = n[o + 1], y = o + 1 === s;
                if (!1 === g) null != v && (U(v) ? l += d(v, t).join("-") : l += encodeURIComponent(v)), 
                l += $; else if (!0 === g) {
                    var b = l.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
                    l += $.match(b)[1];
                } else H(g) && (l += g + $);
                y && !0 === h.squash && "/" === l.slice(-1) && (l = l.slice(0, -1));
            } else {
                if (null == v || m && !1 !== g) continue;
                if (U(v) || (v = [ v ]), 0 === v.length) continue;
                v = d(v, encodeURIComponent).join("&" + f + "="), l += (a ? "&" : "?") + f + "=" + v, 
                a = !0;
            }
        }
        return l;
    }, y.prototype.is = function(e, t) {
        return !0;
    }, y.prototype.encode = function(e, t) {
        return e;
    }, y.prototype.decode = function(e, t) {
        return e;
    }, y.prototype.equals = function(e, t) {
        return e == t;
    }, y.prototype.$subPattern = function() {
        var e = this.pattern.toString();
        return e.substr(1, e.length - 2);
    }, y.prototype.pattern = /.*/, y.prototype.toString = function() {
        return "{Type:" + this.name + "}";
    }, y.prototype.$normalize = function(e) {
        return this.is(e) ? e : this.decode(e);
    }, y.prototype.$asArray = function(e, t) {
        function r(e, t) {
            function r(e, t) {
                return function() {
                    return e[t].apply(e, arguments);
                };
            }
            function i(e) {
                return U(e) ? e : R(e) ? [ e ] : [];
            }
            function o(e) {
                switch (e.length) {
                  case 0:
                    return n;

                  case 1:
                    return "auto" === t ? e[0] : e;

                  default:
                    return e;
                }
            }
            function a(e) {
                return !e;
            }
            function s(e, t) {
                return function(n) {
                    if (U(n) && 0 === n.length) return n;
                    n = i(n);
                    var r = d(n, e);
                    return !0 === t ? 0 === p(r, a).length : o(r);
                };
            }
            this.encode = s(r(e, "encode")), this.decode = s(r(e, "decode")), this.is = s(r(e, "is"), !0), 
            this.equals = function(e) {
                return function(t, n) {
                    var r = i(t), o = i(n);
                    if (r.length !== o.length) return !1;
                    for (var a = 0; a < r.length; a++) if (!e(r[a], o[a])) return !1;
                    return !0;
                };
            }(r(e, "equals")), this.pattern = e.pattern, this.$normalize = s(r(e, "$normalize")), 
            this.name = e.name, this.$arrayMode = t;
        }
        if (!e) return this;
        if ("auto" === e && !t) throw new Error("'auto' array mode is for query parameters only");
        return new r(this, e);
    }, t.module("ui.router.util").provider("$urlMatcherFactory", b), t.module("ui.router.util").run([ "$urlMatcherFactory", function(e) {} ]), 
    w.$inject = [ "$locationProvider", "$urlMatcherFactoryProvider" ], t.module("ui.router.router").provider("$urlRouter", w), 
    E.$inject = [ "$urlRouterProvider", "$urlMatcherFactoryProvider" ], t.module("ui.router.state").factory("$stateParams", function() {
        return {};
    }).constant("$state.runtime", {
        autoinject: !0
    }).provider("$state", E).run([ "$injector", function(e) {
        e.get("$state.runtime").autoinject && e.get("$state");
    } ]), x.$inject = [], t.module("ui.router.state").provider("$view", x), t.module("ui.router.state").provider("$uiViewScroll", C), 
    S.$inject = [ "$state", "$injector", "$uiViewScroll", "$interpolate", "$q" ], T.$inject = [ "$compile", "$controller", "$state", "$interpolate" ], 
    t.module("ui.router.state").directive("uiView", S), t.module("ui.router.state").directive("uiView", T), 
    N.$inject = [ "$state", "$timeout" ], j.$inject = [ "$state", "$timeout" ], P.$inject = [ "$state", "$stateParams", "$interpolate" ], 
    t.module("ui.router.state").directive("uiSref", N).directive("uiSrefActive", P).directive("uiSrefActiveEq", P).directive("uiState", j), 
    M.$inject = [ "$state" ], L.$inject = [ "$state" ], t.module("ui.router.state").filter("isState", M).filter("includedByState", L);
}(window, window.angular), function(e, t) {
    "use strict";
    "object" == typeof module && "object" == typeof module.exports ? module.exports = e.document ? t(e, !0) : function(e) {
        if (!e.document) throw new Error("jQuery requires a window with a document");
        return t(e);
    } : t(e);
}("undefined" != typeof window ? window : this, function(e, t) {
    "use strict";
    function n(e, t) {
        t = t || ne;
        var n = t.createElement("script");
        n.text = e, t.head.appendChild(n).parentNode.removeChild(n);
    }
    function r(e) {
        var t = !!e && "length" in e && e.length, n = de.type(e);
        return "function" !== n && !de.isWindow(e) && ("array" === n || 0 === t || "number" == typeof t && t > 0 && t - 1 in e);
    }
    function i(e, t) {
        return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();
    }
    function o(e, t, n) {
        return de.isFunction(t) ? de.grep(e, function(e, r) {
            return !!t.call(e, r, e) !== n;
        }) : t.nodeType ? de.grep(e, function(e) {
            return e === t !== n;
        }) : "string" != typeof t ? de.grep(e, function(e) {
            return se.call(t, e) > -1 !== n;
        }) : Ce.test(t) ? de.filter(t, e, n) : (t = de.filter(t, e), de.grep(e, function(e) {
            return se.call(t, e) > -1 !== n && 1 === e.nodeType;
        }));
    }
    function a(e, t) {
        for (;(e = e[t]) && 1 !== e.nodeType; ) ;
        return e;
    }
    function s(e) {
        var t = {};
        return de.each(e.match(Oe) || [], function(e, n) {
            t[n] = !0;
        }), t;
    }
    function u(e) {
        return e;
    }
    function l(e) {
        throw e;
    }
    function c(e, t, n, r) {
        var i;
        try {
            e && de.isFunction(i = e.promise) ? i.call(e).done(t).fail(n) : e && de.isFunction(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [ e ].slice(r));
        } catch (e) {
            n.apply(void 0, [ e ]);
        }
    }
    function f() {
        ne.removeEventListener("DOMContentLoaded", f), e.removeEventListener("load", f), 
        de.ready();
    }
    function h() {
        this.expando = de.expando + h.uid++;
    }
    function p(e) {
        return "true" === e || "false" !== e && ("null" === e ? null : e === +e + "" ? +e : Me.test(e) ? JSON.parse(e) : e);
    }
    function d(e, t, n) {
        var r;
        if (void 0 === n && 1 === e.nodeType) if (r = "data-" + t.replace(Le, "-$&").toLowerCase(), 
        "string" == typeof (n = e.getAttribute(r))) {
            try {
                n = p(n);
            } catch (e) {}
            Pe.set(e, t, n);
        } else n = void 0;
        return n;
    }
    function m(e, t, n, r) {
        var i, o = 1, a = 20, s = r ? function() {
            return r.cur();
        } : function() {
            return de.css(e, t, "");
        }, u = s(), l = n && n[3] || (de.cssNumber[t] ? "" : "px"), c = (de.cssNumber[t] || "px" !== l && +u) && Ve.exec(de.css(e, t));
        if (c && c[3] !== l) {
            l = l || c[3], n = n || [], c = +u || 1;
            do {
                o = o || ".5", c /= o, de.style(e, t, c + l);
            } while (o !== (o = s() / u) && 1 !== o && --a);
        }
        return n && (c = +c || +u || 0, i = n[1] ? c + (n[1] + 1) * n[2] : +n[2], r && (r.unit = l, 
        r.start = c, r.end = i)), i;
    }
    function g(e) {
        var t, n = e.ownerDocument, r = e.nodeName, i = qe[r];
        return i || (t = n.body.appendChild(n.createElement(r)), i = de.css(t, "display"), 
        t.parentNode.removeChild(t), "none" === i && (i = "block"), qe[r] = i, i);
    }
    function v(e, t) {
        for (var n, r, i = [], o = 0, a = e.length; o < a; o++) r = e[o], r.style && (n = r.style.display, 
        t ? ("none" === n && (i[o] = je.get(r, "display") || null, i[o] || (r.style.display = "")), 
        "" === r.style.display && Fe(r) && (i[o] = g(r))) : "none" !== n && (i[o] = "none", 
        je.set(r, "display", n)));
        for (o = 0; o < a; o++) null != i[o] && (e[o].style.display = i[o]);
        return e;
    }
    function $(e, t) {
        var n;
        return n = void 0 !== e.getElementsByTagName ? e.getElementsByTagName(t || "*") : void 0 !== e.querySelectorAll ? e.querySelectorAll(t || "*") : [], 
        void 0 === t || t && i(e, t) ? de.merge([ e ], n) : n;
    }
    function y(e, t) {
        for (var n = 0, r = e.length; n < r; n++) je.set(e[n], "globalEval", !t || je.get(t[n], "globalEval"));
    }
    function b(e, t, n, r, i) {
        for (var o, a, s, u, l, c, f = t.createDocumentFragment(), h = [], p = 0, d = e.length; p < d; p++) if ((o = e[p]) || 0 === o) if ("object" === de.type(o)) de.merge(h, o.nodeType ? [ o ] : o); else if (Ke.test(o)) {
            for (a = a || f.appendChild(t.createElement("div")), s = (We.exec(o) || [ "", "" ])[1].toLowerCase(), 
            u = ze[s] || ze._default, a.innerHTML = u[1] + de.htmlPrefilter(o) + u[2], c = u[0]; c--; ) a = a.lastChild;
            de.merge(h, a.childNodes), a = f.firstChild, a.textContent = "";
        } else h.push(t.createTextNode(o));
        for (f.textContent = "", p = 0; o = h[p++]; ) if (r && de.inArray(o, r) > -1) i && i.push(o); else if (l = de.contains(o.ownerDocument, o), 
        a = $(f.appendChild(o), "script"), l && y(a), n) for (c = 0; o = a[c++]; ) Ge.test(o.type || "") && n.push(o);
        return f;
    }
    function w() {
        return !0;
    }
    function E() {
        return !1;
    }
    function x() {
        try {
            return ne.activeElement;
        } catch (e) {}
    }
    function C(e, t, n, r, i, o) {
        var a, s;
        if ("object" == typeof t) {
            "string" != typeof n && (r = r || n, n = void 0);
            for (s in t) C(e, s, n, r, t[s], o);
            return e;
        }
        if (null == r && null == i ? (i = n, r = n = void 0) : null == i && ("string" == typeof n ? (i = r, 
        r = void 0) : (i = r, r = n, n = void 0)), !1 === i) i = E; else if (!i) return e;
        return 1 === o && (a = i, i = function(e) {
            return de().off(e), a.apply(this, arguments);
        }, i.guid = a.guid || (a.guid = de.guid++)), e.each(function() {
            de.event.add(this, t, i, r, n);
        });
    }
    function S(e, t) {
        return i(e, "table") && i(11 !== t.nodeType ? t : t.firstChild, "tr") ? de(">tbody", e)[0] || e : e;
    }
    function T(e) {
        return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e;
    }
    function _(e) {
        var t = nt.exec(e.type);
        return t ? e.type = t[1] : e.removeAttribute("type"), e;
    }
    function A(e, t) {
        var n, r, i, o, a, s, u, l;
        if (1 === t.nodeType) {
            if (je.hasData(e) && (o = je.access(e), a = je.set(t, o), l = o.events)) {
                delete a.handle, a.events = {};
                for (i in l) for (n = 0, r = l[i].length; n < r; n++) de.event.add(t, i, l[i][n]);
            }
            Pe.hasData(e) && (s = Pe.access(e), u = de.extend({}, s), Pe.set(t, u));
        }
    }
    function O(e, t) {
        var n = t.nodeName.toLowerCase();
        "input" === n && Be.test(e.type) ? t.checked = e.checked : "input" !== n && "textarea" !== n || (t.defaultValue = e.defaultValue);
    }
    function k(e, t, r, i) {
        t = oe.apply([], t);
        var o, a, s, u, l, c, f = 0, h = e.length, p = h - 1, d = t[0], m = de.isFunction(d);
        if (m || h > 1 && "string" == typeof d && !pe.checkClone && tt.test(d)) return e.each(function(n) {
            var o = e.eq(n);
            m && (t[0] = d.call(this, n, o.html())), k(o, t, r, i);
        });
        if (h && (o = b(t, e[0].ownerDocument, !1, e, i), a = o.firstChild, 1 === o.childNodes.length && (o = a), 
        a || i)) {
            for (s = de.map($(o, "script"), T), u = s.length; f < h; f++) l = o, f !== p && (l = de.clone(l, !0, !0), 
            u && de.merge(s, $(l, "script"))), r.call(e[f], l, f);
            if (u) for (c = s[s.length - 1].ownerDocument, de.map(s, _), f = 0; f < u; f++) l = s[f], 
            Ge.test(l.type || "") && !je.access(l, "globalEval") && de.contains(c, l) && (l.src ? de._evalUrl && de._evalUrl(l.src) : n(l.textContent.replace(rt, ""), c));
        }
        return e;
    }
    function I(e, t, n) {
        for (var r, i = t ? de.filter(t, e) : e, o = 0; null != (r = i[o]); o++) n || 1 !== r.nodeType || de.cleanData($(r)), 
        r.parentNode && (n && de.contains(r.ownerDocument, r) && y($(r, "script")), r.parentNode.removeChild(r));
        return e;
    }
    function D(e, t, n) {
        var r, i, o, a, s = e.style;
        return n = n || at(e), n && (a = n.getPropertyValue(t) || n[t], "" !== a || de.contains(e.ownerDocument, e) || (a = de.style(e, t)), 
        !pe.pixelMarginRight() && ot.test(a) && it.test(t) && (r = s.width, i = s.minWidth, 
        o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, 
        s.minWidth = i, s.maxWidth = o)), void 0 !== a ? a + "" : a;
    }
    function N(e, t) {
        return {
            get: function() {
                return e() ? void delete this.get : (this.get = t).apply(this, arguments);
            }
        };
    }
    function j(e) {
        if (e in ht) return e;
        for (var t = e[0].toUpperCase() + e.slice(1), n = ft.length; n--; ) if ((e = ft[n] + t) in ht) return e;
    }
    function P(e) {
        var t = de.cssProps[e];
        return t || (t = de.cssProps[e] = j(e) || e), t;
    }
    function M(e, t, n) {
        var r = Ve.exec(t);
        return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || "px") : t;
    }
    function L(e, t, n, r, i) {
        var o, a = 0;
        for (o = n === (r ? "border" : "content") ? 4 : "width" === t ? 1 : 0; o < 4; o += 2) "margin" === n && (a += de.css(e, n + He[o], !0, i)), 
        r ? ("content" === n && (a -= de.css(e, "padding" + He[o], !0, i)), "margin" !== n && (a -= de.css(e, "border" + He[o] + "Width", !0, i))) : (a += de.css(e, "padding" + He[o], !0, i), 
        "padding" !== n && (a += de.css(e, "border" + He[o] + "Width", !0, i)));
        return a;
    }
    function R(e, t, n) {
        var r, i = at(e), o = D(e, t, i), a = "border-box" === de.css(e, "boxSizing", !1, i);
        return ot.test(o) ? o : (r = a && (pe.boxSizingReliable() || o === e.style[t]), 
        "auto" === o && (o = e["offset" + t[0].toUpperCase() + t.slice(1)]), (o = parseFloat(o) || 0) + L(e, t, n || (a ? "border" : "content"), r, i) + "px");
    }
    function V(e, t, n, r, i) {
        return new V.prototype.init(e, t, n, r, i);
    }
    function H() {
        dt && (!1 === ne.hidden && e.requestAnimationFrame ? e.requestAnimationFrame(H) : e.setTimeout(H, de.fx.interval), 
        de.fx.tick());
    }
    function F() {
        return e.setTimeout(function() {
            pt = void 0;
        }), pt = de.now();
    }
    function U(e, t) {
        var n, r = 0, i = {
            height: e
        };
        for (t = t ? 1 : 0; r < 4; r += 2 - t) n = He[r], i["margin" + n] = i["padding" + n] = e;
        return t && (i.opacity = i.width = e), i;
    }
    function q(e, t, n) {
        for (var r, i = (G.tweeners[t] || []).concat(G.tweeners["*"]), o = 0, a = i.length; o < a; o++) if (r = i[o].call(n, t, e)) return r;
    }
    function B(e, t, n) {
        var r, i, o, a, s, u, l, c, f = "width" in t || "height" in t, h = this, p = {}, d = e.style, m = e.nodeType && Fe(e), g = je.get(e, "fxshow");
        n.queue || (a = de._queueHooks(e, "fx"), null == a.unqueued && (a.unqueued = 0, 
        s = a.empty.fire, a.empty.fire = function() {
            a.unqueued || s();
        }), a.unqueued++, h.always(function() {
            h.always(function() {
                a.unqueued--, de.queue(e, "fx").length || a.empty.fire();
            });
        }));
        for (r in t) if (i = t[r], mt.test(i)) {
            if (delete t[r], o = o || "toggle" === i, i === (m ? "hide" : "show")) {
                if ("show" !== i || !g || void 0 === g[r]) continue;
                m = !0;
            }
            p[r] = g && g[r] || de.style(e, r);
        }
        if ((u = !de.isEmptyObject(t)) || !de.isEmptyObject(p)) {
            f && 1 === e.nodeType && (n.overflow = [ d.overflow, d.overflowX, d.overflowY ], 
            l = g && g.display, null == l && (l = je.get(e, "display")), c = de.css(e, "display"), 
            "none" === c && (l ? c = l : (v([ e ], !0), l = e.style.display || l, c = de.css(e, "display"), 
            v([ e ]))), ("inline" === c || "inline-block" === c && null != l) && "none" === de.css(e, "float") && (u || (h.done(function() {
                d.display = l;
            }), null == l && (c = d.display, l = "none" === c ? "" : c)), d.display = "inline-block")), 
            n.overflow && (d.overflow = "hidden", h.always(function() {
                d.overflow = n.overflow[0], d.overflowX = n.overflow[1], d.overflowY = n.overflow[2];
            })), u = !1;
            for (r in p) u || (g ? "hidden" in g && (m = g.hidden) : g = je.access(e, "fxshow", {
                display: l
            }), o && (g.hidden = !m), m && v([ e ], !0), h.done(function() {
                m || v([ e ]), je.remove(e, "fxshow");
                for (r in p) de.style(e, r, p[r]);
            })), u = q(m ? g[r] : 0, r, h), r in g || (g[r] = u.start, m && (u.end = u.start, 
            u.start = 0));
        }
    }
    function W(e, t) {
        var n, r, i, o, a;
        for (n in e) if (r = de.camelCase(n), i = t[r], o = e[n], Array.isArray(o) && (i = o[1], 
        o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), (a = de.cssHooks[r]) && "expand" in a) {
            o = a.expand(o), delete e[r];
            for (n in o) n in e || (e[n] = o[n], t[n] = i);
        } else t[r] = i;
    }
    function G(e, t, n) {
        var r, i, o = 0, a = G.prefilters.length, s = de.Deferred().always(function() {
            delete u.elem;
        }), u = function() {
            if (i) return !1;
            for (var t = pt || F(), n = Math.max(0, l.startTime + l.duration - t), r = n / l.duration || 0, o = 1 - r, a = 0, u = l.tweens.length; a < u; a++) l.tweens[a].run(o);
            return s.notifyWith(e, [ l, o, n ]), o < 1 && u ? n : (u || s.notifyWith(e, [ l, 1, 0 ]), 
            s.resolveWith(e, [ l ]), !1);
        }, l = s.promise({
            elem: e,
            props: de.extend({}, t),
            opts: de.extend(!0, {
                specialEasing: {},
                easing: de.easing._default
            }, n),
            originalProperties: t,
            originalOptions: n,
            startTime: pt || F(),
            duration: n.duration,
            tweens: [],
            createTween: function(t, n) {
                var r = de.Tween(e, l.opts, t, n, l.opts.specialEasing[t] || l.opts.easing);
                return l.tweens.push(r), r;
            },
            stop: function(t) {
                var n = 0, r = t ? l.tweens.length : 0;
                if (i) return this;
                for (i = !0; n < r; n++) l.tweens[n].run(1);
                return t ? (s.notifyWith(e, [ l, 1, 0 ]), s.resolveWith(e, [ l, t ])) : s.rejectWith(e, [ l, t ]), 
                this;
            }
        }), c = l.props;
        for (W(c, l.opts.specialEasing); o < a; o++) if (r = G.prefilters[o].call(l, e, c, l.opts)) return de.isFunction(r.stop) && (de._queueHooks(l.elem, l.opts.queue).stop = de.proxy(r.stop, r)), 
        r;
        return de.map(c, q, l), de.isFunction(l.opts.start) && l.opts.start.call(e, l), 
        l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always), 
        de.fx.timer(de.extend(u, {
            elem: e,
            anim: l,
            queue: l.opts.queue
        })), l;
    }
    function z(e) {
        return (e.match(Oe) || []).join(" ");
    }
    function K(e) {
        return e.getAttribute && e.getAttribute("class") || "";
    }
    function Q(e, t, n, r) {
        var i;
        if (Array.isArray(t)) de.each(t, function(t, i) {
            n || Tt.test(e) ? r(e, i) : Q(e + "[" + ("object" == typeof i && null != i ? t : "") + "]", i, n, r);
        }); else if (n || "object" !== de.type(t)) r(e, t); else for (i in t) Q(e + "[" + i + "]", t[i], n, r);
    }
    function Y(e) {
        return function(t, n) {
            "string" != typeof t && (n = t, t = "*");
            var r, i = 0, o = t.toLowerCase().match(Oe) || [];
            if (de.isFunction(n)) for (;r = o[i++]; ) "+" === r[0] ? (r = r.slice(1) || "*", 
            (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n);
        };
    }
    function X(e, t, n, r) {
        function i(s) {
            var u;
            return o[s] = !0, de.each(e[s] || [], function(e, s) {
                var l = s(t, n, r);
                return "string" != typeof l || a || o[l] ? a ? !(u = l) : void 0 : (t.dataTypes.unshift(l), 
                i(l), !1);
            }), u;
        }
        var o = {}, a = e === Rt;
        return i(t.dataTypes[0]) || !o["*"] && i("*");
    }
    function J(e, t) {
        var n, r, i = de.ajaxSettings.flatOptions || {};
        for (n in t) void 0 !== t[n] && ((i[n] ? e : r || (r = {}))[n] = t[n]);
        return r && de.extend(!0, e, r), e;
    }
    function Z(e, t, n) {
        for (var r, i, o, a, s = e.contents, u = e.dataTypes; "*" === u[0]; ) u.shift(), 
        void 0 === r && (r = e.mimeType || t.getResponseHeader("Content-Type"));
        if (r) for (i in s) if (s[i] && s[i].test(r)) {
            u.unshift(i);
            break;
        }
        if (u[0] in n) o = u[0]; else {
            for (i in n) {
                if (!u[0] || e.converters[i + " " + u[0]]) {
                    o = i;
                    break;
                }
                a || (a = i);
            }
            o = o || a;
        }
        if (o) return o !== u[0] && u.unshift(o), n[o];
    }
    function ee(e, t, n, r) {
        var i, o, a, s, u, l = {}, c = e.dataTypes.slice();
        if (c[1]) for (a in e.converters) l[a.toLowerCase()] = e.converters[a];
        for (o = c.shift(); o; ) if (e.responseFields[o] && (n[e.responseFields[o]] = t), 
        !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), u = o, o = c.shift()) if ("*" === o) o = u; else if ("*" !== u && u !== o) {
            if (!(a = l[u + " " + o] || l["* " + o])) for (i in l) if (s = i.split(" "), s[1] === o && (a = l[u + " " + s[0]] || l["* " + s[0]])) {
                !0 === a ? a = l[i] : !0 !== l[i] && (o = s[0], c.unshift(s[1]));
                break;
            }
            if (!0 !== a) if (a && e.throws) t = a(t); else try {
                t = a(t);
            } catch (e) {
                return {
                    state: "parsererror",
                    error: a ? e : "No conversion from " + u + " to " + o
                };
            }
        }
        return {
            state: "success",
            data: t
        };
    }
    var te = [], ne = e.document, re = Object.getPrototypeOf, ie = te.slice, oe = te.concat, ae = te.push, se = te.indexOf, ue = {}, le = ue.toString, ce = ue.hasOwnProperty, fe = ce.toString, he = fe.call(Object), pe = {}, de = function(e, t) {
        return new de.fn.init(e, t);
    }, me = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, ge = /^-ms-/, ve = /-([a-z])/g, $e = function(e, t) {
        return t.toUpperCase();
    };
    de.fn = de.prototype = {
        jquery: "3.2.1",
        constructor: de,
        length: 0,
        toArray: function() {
            return ie.call(this);
        },
        get: function(e) {
            return null == e ? ie.call(this) : e < 0 ? this[e + this.length] : this[e];
        },
        pushStack: function(e) {
            var t = de.merge(this.constructor(), e);
            return t.prevObject = this, t;
        },
        each: function(e) {
            return de.each(this, e);
        },
        map: function(e) {
            return this.pushStack(de.map(this, function(t, n) {
                return e.call(t, n, t);
            }));
        },
        slice: function() {
            return this.pushStack(ie.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        eq: function(e) {
            var t = this.length, n = +e + (e < 0 ? t : 0);
            return this.pushStack(n >= 0 && n < t ? [ this[n] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor();
        },
        push: ae,
        sort: te.sort,
        splice: te.splice
    }, de.extend = de.fn.extend = function() {
        var e, t, n, r, i, o, a = arguments[0] || {}, s = 1, u = arguments.length, l = !1;
        for ("boolean" == typeof a && (l = a, a = arguments[s] || {}, s++), "object" == typeof a || de.isFunction(a) || (a = {}), 
        s === u && (a = this, s--); s < u; s++) if (null != (e = arguments[s])) for (t in e) n = a[t], 
        r = e[t], a !== r && (l && r && (de.isPlainObject(r) || (i = Array.isArray(r))) ? (i ? (i = !1, 
        o = n && Array.isArray(n) ? n : []) : o = n && de.isPlainObject(n) ? n : {}, a[t] = de.extend(l, o, r)) : void 0 !== r && (a[t] = r));
        return a;
    }, de.extend({
        expando: "jQuery" + ("3.2.1" + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(e) {
            throw new Error(e);
        },
        noop: function() {},
        isFunction: function(e) {
            return "function" === de.type(e);
        },
        isWindow: function(e) {
            return null != e && e === e.window;
        },
        isNumeric: function(e) {
            var t = de.type(e);
            return ("number" === t || "string" === t) && !isNaN(e - parseFloat(e));
        },
        isPlainObject: function(e) {
            var t, n;
            return !(!e || "[object Object]" !== le.call(e)) && (!(t = re(e)) || "function" == typeof (n = ce.call(t, "constructor") && t.constructor) && fe.call(n) === he);
        },
        isEmptyObject: function(e) {
            var t;
            for (t in e) return !1;
            return !0;
        },
        type: function(e) {
            return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? ue[le.call(e)] || "object" : typeof e;
        },
        globalEval: function(e) {
            n(e);
        },
        camelCase: function(e) {
            return e.replace(ge, "ms-").replace(ve, $e);
        },
        each: function(e, t) {
            var n, i = 0;
            if (r(e)) for (n = e.length; i < n && !1 !== t.call(e[i], i, e[i]); i++) ; else for (i in e) if (!1 === t.call(e[i], i, e[i])) break;
            return e;
        },
        trim: function(e) {
            return null == e ? "" : (e + "").replace(me, "");
        },
        makeArray: function(e, t) {
            var n = t || [];
            return null != e && (r(Object(e)) ? de.merge(n, "string" == typeof e ? [ e ] : e) : ae.call(n, e)), 
            n;
        },
        inArray: function(e, t, n) {
            return null == t ? -1 : se.call(t, e, n);
        },
        merge: function(e, t) {
            for (var n = +t.length, r = 0, i = e.length; r < n; r++) e[i++] = t[r];
            return e.length = i, e;
        },
        grep: function(e, t, n) {
            for (var r = [], i = 0, o = e.length, a = !n; i < o; i++) !t(e[i], i) !== a && r.push(e[i]);
            return r;
        },
        map: function(e, t, n) {
            var i, o, a = 0, s = [];
            if (r(e)) for (i = e.length; a < i; a++) null != (o = t(e[a], a, n)) && s.push(o); else for (a in e) null != (o = t(e[a], a, n)) && s.push(o);
            return oe.apply([], s);
        },
        guid: 1,
        proxy: function(e, t) {
            var n, r, i;
            if ("string" == typeof t && (n = e[t], t = e, e = n), de.isFunction(e)) return r = ie.call(arguments, 2), 
            i = function() {
                return e.apply(t || this, r.concat(ie.call(arguments)));
            }, i.guid = e.guid = e.guid || de.guid++, i;
        },
        now: Date.now,
        support: pe
    }), "function" == typeof Symbol && (de.fn[Symbol.iterator] = te[Symbol.iterator]), 
    de.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(e, t) {
        ue["[object " + t + "]"] = t.toLowerCase();
    });
    var ye = function(e) {
        function t(e, t, n, r) {
            var i, o, a, s, u, c, h, p = t && t.ownerDocument, d = t ? t.nodeType : 9;
            if (n = n || [], "string" != typeof e || !e || 1 !== d && 9 !== d && 11 !== d) return n;
            if (!r && ((t ? t.ownerDocument || t : V) !== I && k(t), t = t || I, N)) {
                if (11 !== d && (u = me.exec(e))) if (i = u[1]) {
                    if (9 === d) {
                        if (!(a = t.getElementById(i))) return n;
                        if (a.id === i) return n.push(a), n;
                    } else if (p && (a = p.getElementById(i)) && L(t, a) && a.id === i) return n.push(a), 
                    n;
                } else {
                    if (u[2]) return Y.apply(n, t.getElementsByTagName(e)), n;
                    if ((i = u[3]) && b.getElementsByClassName && t.getElementsByClassName) return Y.apply(n, t.getElementsByClassName(i)), 
                    n;
                }
                if (b.qsa && !B[e + " "] && (!j || !j.test(e))) {
                    if (1 !== d) p = t, h = e; else if ("object" !== t.nodeName.toLowerCase()) {
                        for ((s = t.getAttribute("id")) ? s = s.replace(ye, be) : t.setAttribute("id", s = R), 
                        c = C(e), o = c.length; o--; ) c[o] = "#" + s + " " + f(c[o]);
                        h = c.join(","), p = ge.test(e) && l(t.parentNode) || t;
                    }
                    if (h) try {
                        return Y.apply(n, p.querySelectorAll(h)), n;
                    } catch (e) {} finally {
                        s === R && t.removeAttribute("id");
                    }
                }
            }
            return T(e.replace(oe, "$1"), t, n, r);
        }
        function n() {
            function e(n, r) {
                return t.push(n + " ") > w.cacheLength && delete e[t.shift()], e[n + " "] = r;
            }
            var t = [];
            return e;
        }
        function r(e) {
            return e[R] = !0, e;
        }
        function i(e) {
            var t = I.createElement("fieldset");
            try {
                return !!e(t);
            } catch (e) {
                return !1;
            } finally {
                t.parentNode && t.parentNode.removeChild(t), t = null;
            }
        }
        function o(e, t) {
            for (var n = e.split("|"), r = n.length; r--; ) w.attrHandle[n[r]] = t;
        }
        function a(e, t) {
            var n = t && e, r = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;
            if (r) return r;
            if (n) for (;n = n.nextSibling; ) if (n === t) return -1;
            return e ? 1 : -1;
        }
        function s(e) {
            return function(t) {
                return "form" in t ? t.parentNode && !1 === t.disabled ? "label" in t ? "label" in t.parentNode ? t.parentNode.disabled === e : t.disabled === e : t.isDisabled === e || t.isDisabled !== !e && Ee(t) === e : t.disabled === e : "label" in t && t.disabled === e;
            };
        }
        function u(e) {
            return r(function(t) {
                return t = +t, r(function(n, r) {
                    for (var i, o = e([], n.length, t), a = o.length; a--; ) n[i = o[a]] && (n[i] = !(r[i] = n[i]));
                });
            });
        }
        function l(e) {
            return e && void 0 !== e.getElementsByTagName && e;
        }
        function c() {}
        function f(e) {
            for (var t = 0, n = e.length, r = ""; t < n; t++) r += e[t].value;
            return r;
        }
        function h(e, t, n) {
            var r = t.dir, i = t.next, o = i || r, a = n && "parentNode" === o, s = F++;
            return t.first ? function(t, n, i) {
                for (;t = t[r]; ) if (1 === t.nodeType || a) return e(t, n, i);
                return !1;
            } : function(t, n, u) {
                var l, c, f, h = [ H, s ];
                if (u) {
                    for (;t = t[r]; ) if ((1 === t.nodeType || a) && e(t, n, u)) return !0;
                } else for (;t = t[r]; ) if (1 === t.nodeType || a) if (f = t[R] || (t[R] = {}), 
                c = f[t.uniqueID] || (f[t.uniqueID] = {}), i && i === t.nodeName.toLowerCase()) t = t[r] || t; else {
                    if ((l = c[o]) && l[0] === H && l[1] === s) return h[2] = l[2];
                    if (c[o] = h, h[2] = e(t, n, u)) return !0;
                }
                return !1;
            };
        }
        function p(e) {
            return e.length > 1 ? function(t, n, r) {
                for (var i = e.length; i--; ) if (!e[i](t, n, r)) return !1;
                return !0;
            } : e[0];
        }
        function d(e, n, r) {
            for (var i = 0, o = n.length; i < o; i++) t(e, n[i], r);
            return r;
        }
        function m(e, t, n, r, i) {
            for (var o, a = [], s = 0, u = e.length, l = null != t; s < u; s++) (o = e[s]) && (n && !n(o, r, i) || (a.push(o), 
            l && t.push(s)));
            return a;
        }
        function g(e, t, n, i, o, a) {
            return i && !i[R] && (i = g(i)), o && !o[R] && (o = g(o, a)), r(function(r, a, s, u) {
                var l, c, f, h = [], p = [], g = a.length, v = r || d(t || "*", s.nodeType ? [ s ] : s, []), $ = !e || !r && t ? v : m(v, h, e, s, u), y = n ? o || (r ? e : g || i) ? [] : a : $;
                if (n && n($, y, s, u), i) for (l = m(y, p), i(l, [], s, u), c = l.length; c--; ) (f = l[c]) && (y[p[c]] = !($[p[c]] = f));
                if (r) {
                    if (o || e) {
                        if (o) {
                            for (l = [], c = y.length; c--; ) (f = y[c]) && l.push($[c] = f);
                            o(null, y = [], l, u);
                        }
                        for (c = y.length; c--; ) (f = y[c]) && (l = o ? J(r, f) : h[c]) > -1 && (r[l] = !(a[l] = f));
                    }
                } else y = m(y === a ? y.splice(g, y.length) : y), o ? o(null, a, y, u) : Y.apply(a, y);
            });
        }
        function v(e) {
            for (var t, n, r, i = e.length, o = w.relative[e[0].type], a = o || w.relative[" "], s = o ? 1 : 0, u = h(function(e) {
                return e === t;
            }, a, !0), l = h(function(e) {
                return J(t, e) > -1;
            }, a, !0), c = [ function(e, n, r) {
                var i = !o && (r || n !== _) || ((t = n).nodeType ? u(e, n, r) : l(e, n, r));
                return t = null, i;
            } ]; s < i; s++) if (n = w.relative[e[s].type]) c = [ h(p(c), n) ]; else {
                if (n = w.filter[e[s].type].apply(null, e[s].matches), n[R]) {
                    for (r = ++s; r < i && !w.relative[e[r].type]; r++) ;
                    return g(s > 1 && p(c), s > 1 && f(e.slice(0, s - 1).concat({
                        value: " " === e[s - 2].type ? "*" : ""
                    })).replace(oe, "$1"), n, s < r && v(e.slice(s, r)), r < i && v(e = e.slice(r)), r < i && f(e));
                }
                c.push(n);
            }
            return p(c);
        }
        function $(e, n) {
            var i = n.length > 0, o = e.length > 0, a = function(r, a, s, u, l) {
                var c, f, h, p = 0, d = "0", g = r && [], v = [], $ = _, y = r || o && w.find.TAG("*", l), b = H += null == $ ? 1 : Math.random() || .1, E = y.length;
                for (l && (_ = a === I || a || l); d !== E && null != (c = y[d]); d++) {
                    if (o && c) {
                        for (f = 0, a || c.ownerDocument === I || (k(c), s = !N); h = e[f++]; ) if (h(c, a || I, s)) {
                            u.push(c);
                            break;
                        }
                        l && (H = b);
                    }
                    i && ((c = !h && c) && p--, r && g.push(c));
                }
                if (p += d, i && d !== p) {
                    for (f = 0; h = n[f++]; ) h(g, v, a, s);
                    if (r) {
                        if (p > 0) for (;d--; ) g[d] || v[d] || (v[d] = K.call(u));
                        v = m(v);
                    }
                    Y.apply(u, v), l && !r && v.length > 0 && p + n.length > 1 && t.uniqueSort(u);
                }
                return l && (H = b, _ = $), g;
            };
            return i ? r(a) : a;
        }
        var y, b, w, E, x, C, S, T, _, A, O, k, I, D, N, j, P, M, L, R = "sizzle" + 1 * new Date(), V = e.document, H = 0, F = 0, U = n(), q = n(), B = n(), W = function(e, t) {
            return e === t && (O = !0), 0;
        }, G = {}.hasOwnProperty, z = [], K = z.pop, Q = z.push, Y = z.push, X = z.slice, J = function(e, t) {
            for (var n = 0, r = e.length; n < r; n++) if (e[n] === t) return n;
            return -1;
        }, Z = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", ee = "[\\x20\\t\\r\\n\\f]", te = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+", ne = "\\[" + ee + "*(" + te + ")(?:" + ee + "*([*^$|!~]?=)" + ee + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + te + "))|)" + ee + "*\\]", re = ":(" + te + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + ne + ")*)|.*)\\)|)", ie = new RegExp(ee + "+", "g"), oe = new RegExp("^" + ee + "+|((?:^|[^\\\\])(?:\\\\.)*)" + ee + "+$", "g"), ae = new RegExp("^" + ee + "*," + ee + "*"), se = new RegExp("^" + ee + "*([>+~]|" + ee + ")" + ee + "*"), ue = new RegExp("=" + ee + "*([^\\]'\"]*?)" + ee + "*\\]", "g"), le = new RegExp(re), ce = new RegExp("^" + te + "$"), fe = {
            ID: new RegExp("^#(" + te + ")"),
            CLASS: new RegExp("^\\.(" + te + ")"),
            TAG: new RegExp("^(" + te + "|[*])"),
            ATTR: new RegExp("^" + ne),
            PSEUDO: new RegExp("^" + re),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + ee + "*(even|odd|(([+-]|)(\\d*)n|)" + ee + "*(?:([+-]|)" + ee + "*(\\d+)|))" + ee + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + Z + ")$", "i"),
            needsContext: new RegExp("^" + ee + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + ee + "*((?:-\\d)?\\d*)" + ee + "*\\)|)(?=[^-]|$)", "i")
        }, he = /^(?:input|select|textarea|button)$/i, pe = /^h\d$/i, de = /^[^{]+\{\s*\[native \w/, me = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ge = /[+~]/, ve = new RegExp("\\\\([\\da-f]{1,6}" + ee + "?|(" + ee + ")|.)", "ig"), $e = function(e, t, n) {
            var r = "0x" + t - 65536;
            return r !== r || n ? t : r < 0 ? String.fromCharCode(r + 65536) : String.fromCharCode(r >> 10 | 55296, 1023 & r | 56320);
        }, ye = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, be = function(e, t) {
            return t ? "\0" === e ? "�" : e.slice(0, -1) + "\\" + e.charCodeAt(e.length - 1).toString(16) + " " : "\\" + e;
        }, we = function() {
            k();
        }, Ee = h(function(e) {
            return !0 === e.disabled && ("form" in e || "label" in e);
        }, {
            dir: "parentNode",
            next: "legend"
        });
        try {
            Y.apply(z = X.call(V.childNodes), V.childNodes), z[V.childNodes.length].nodeType;
        } catch (e) {
            Y = {
                apply: z.length ? function(e, t) {
                    Q.apply(e, X.call(t));
                } : function(e, t) {
                    for (var n = e.length, r = 0; e[n++] = t[r++]; ) ;
                    e.length = n - 1;
                }
            };
        }
        b = t.support = {}, x = t.isXML = function(e) {
            var t = e && (e.ownerDocument || e).documentElement;
            return !!t && "HTML" !== t.nodeName;
        }, k = t.setDocument = function(e) {
            var t, n, r = e ? e.ownerDocument || e : V;
            return r !== I && 9 === r.nodeType && r.documentElement ? (I = r, D = I.documentElement, 
            N = !x(I), V !== I && (n = I.defaultView) && n.top !== n && (n.addEventListener ? n.addEventListener("unload", we, !1) : n.attachEvent && n.attachEvent("onunload", we)), 
            b.attributes = i(function(e) {
                return e.className = "i", !e.getAttribute("className");
            }), b.getElementsByTagName = i(function(e) {
                return e.appendChild(I.createComment("")), !e.getElementsByTagName("*").length;
            }), b.getElementsByClassName = de.test(I.getElementsByClassName), b.getById = i(function(e) {
                return D.appendChild(e).id = R, !I.getElementsByName || !I.getElementsByName(R).length;
            }), b.getById ? (w.filter.ID = function(e) {
                var t = e.replace(ve, $e);
                return function(e) {
                    return e.getAttribute("id") === t;
                };
            }, w.find.ID = function(e, t) {
                if (void 0 !== t.getElementById && N) {
                    var n = t.getElementById(e);
                    return n ? [ n ] : [];
                }
            }) : (w.filter.ID = function(e) {
                var t = e.replace(ve, $e);
                return function(e) {
                    var n = void 0 !== e.getAttributeNode && e.getAttributeNode("id");
                    return n && n.value === t;
                };
            }, w.find.ID = function(e, t) {
                if (void 0 !== t.getElementById && N) {
                    var n, r, i, o = t.getElementById(e);
                    if (o) {
                        if ((n = o.getAttributeNode("id")) && n.value === e) return [ o ];
                        for (i = t.getElementsByName(e), r = 0; o = i[r++]; ) if ((n = o.getAttributeNode("id")) && n.value === e) return [ o ];
                    }
                    return [];
                }
            }), w.find.TAG = b.getElementsByTagName ? function(e, t) {
                return void 0 !== t.getElementsByTagName ? t.getElementsByTagName(e) : b.qsa ? t.querySelectorAll(e) : void 0;
            } : function(e, t) {
                var n, r = [], i = 0, o = t.getElementsByTagName(e);
                if ("*" === e) {
                    for (;n = o[i++]; ) 1 === n.nodeType && r.push(n);
                    return r;
                }
                return o;
            }, w.find.CLASS = b.getElementsByClassName && function(e, t) {
                if (void 0 !== t.getElementsByClassName && N) return t.getElementsByClassName(e);
            }, P = [], j = [], (b.qsa = de.test(I.querySelectorAll)) && (i(function(e) {
                D.appendChild(e).innerHTML = "<a id='" + R + "'></a><select id='" + R + "-\r\\' msallowcapture=''><option selected=''></option></select>", 
                e.querySelectorAll("[msallowcapture^='']").length && j.push("[*^$]=" + ee + "*(?:''|\"\")"), 
                e.querySelectorAll("[selected]").length || j.push("\\[" + ee + "*(?:value|" + Z + ")"), 
                e.querySelectorAll("[id~=" + R + "-]").length || j.push("~="), e.querySelectorAll(":checked").length || j.push(":checked"), 
                e.querySelectorAll("a#" + R + "+*").length || j.push(".#.+[+~]");
            }), i(function(e) {
                e.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                var t = I.createElement("input");
                t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length && j.push("name" + ee + "*[*^$|!~]?="), 
                2 !== e.querySelectorAll(":enabled").length && j.push(":enabled", ":disabled"), 
                D.appendChild(e).disabled = !0, 2 !== e.querySelectorAll(":disabled").length && j.push(":enabled", ":disabled"), 
                e.querySelectorAll("*,:x"), j.push(",.*:");
            })), (b.matchesSelector = de.test(M = D.matches || D.webkitMatchesSelector || D.mozMatchesSelector || D.oMatchesSelector || D.msMatchesSelector)) && i(function(e) {
                b.disconnectedMatch = M.call(e, "*"), M.call(e, "[s!='']:x"), P.push("!=", re);
            }), j = j.length && new RegExp(j.join("|")), P = P.length && new RegExp(P.join("|")), 
            t = de.test(D.compareDocumentPosition), L = t || de.test(D.contains) ? function(e, t) {
                var n = 9 === e.nodeType ? e.documentElement : e, r = t && t.parentNode;
                return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)));
            } : function(e, t) {
                if (t) for (;t = t.parentNode; ) if (t === e) return !0;
                return !1;
            }, W = t ? function(e, t) {
                if (e === t) return O = !0, 0;
                var n = !e.compareDocumentPosition - !t.compareDocumentPosition;
                return n || (n = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1, 
                1 & n || !b.sortDetached && t.compareDocumentPosition(e) === n ? e === I || e.ownerDocument === V && L(V, e) ? -1 : t === I || t.ownerDocument === V && L(V, t) ? 1 : A ? J(A, e) - J(A, t) : 0 : 4 & n ? -1 : 1);
            } : function(e, t) {
                if (e === t) return O = !0, 0;
                var n, r = 0, i = e.parentNode, o = t.parentNode, s = [ e ], u = [ t ];
                if (!i || !o) return e === I ? -1 : t === I ? 1 : i ? -1 : o ? 1 : A ? J(A, e) - J(A, t) : 0;
                if (i === o) return a(e, t);
                for (n = e; n = n.parentNode; ) s.unshift(n);
                for (n = t; n = n.parentNode; ) u.unshift(n);
                for (;s[r] === u[r]; ) r++;
                return r ? a(s[r], u[r]) : s[r] === V ? -1 : u[r] === V ? 1 : 0;
            }, I) : I;
        }, t.matches = function(e, n) {
            return t(e, null, null, n);
        }, t.matchesSelector = function(e, n) {
            if ((e.ownerDocument || e) !== I && k(e), n = n.replace(ue, "='$1']"), b.matchesSelector && N && !B[n + " "] && (!P || !P.test(n)) && (!j || !j.test(n))) try {
                var r = M.call(e, n);
                if (r || b.disconnectedMatch || e.document && 11 !== e.document.nodeType) return r;
            } catch (e) {}
            return t(n, I, null, [ e ]).length > 0;
        }, t.contains = function(e, t) {
            return (e.ownerDocument || e) !== I && k(e), L(e, t);
        }, t.attr = function(e, t) {
            (e.ownerDocument || e) !== I && k(e);
            var n = w.attrHandle[t.toLowerCase()], r = n && G.call(w.attrHandle, t.toLowerCase()) ? n(e, t, !N) : void 0;
            return void 0 !== r ? r : b.attributes || !N ? e.getAttribute(t) : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;
        }, t.escape = function(e) {
            return (e + "").replace(ye, be);
        }, t.error = function(e) {
            throw new Error("Syntax error, unrecognized expression: " + e);
        }, t.uniqueSort = function(e) {
            var t, n = [], r = 0, i = 0;
            if (O = !b.detectDuplicates, A = !b.sortStable && e.slice(0), e.sort(W), O) {
                for (;t = e[i++]; ) t === e[i] && (r = n.push(i));
                for (;r--; ) e.splice(n[r], 1);
            }
            return A = null, e;
        }, E = t.getText = function(e) {
            var t, n = "", r = 0, i = e.nodeType;
            if (i) {
                if (1 === i || 9 === i || 11 === i) {
                    if ("string" == typeof e.textContent) return e.textContent;
                    for (e = e.firstChild; e; e = e.nextSibling) n += E(e);
                } else if (3 === i || 4 === i) return e.nodeValue;
            } else for (;t = e[r++]; ) n += E(t);
            return n;
        }, w = t.selectors = {
            cacheLength: 50,
            createPseudo: r,
            match: fe,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(e) {
                    return e[1] = e[1].replace(ve, $e), e[3] = (e[3] || e[4] || e[5] || "").replace(ve, $e), 
                    "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4);
                },
                CHILD: function(e) {
                    return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || t.error(e[0]), 
                    e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && t.error(e[0]), 
                    e;
                },
                PSEUDO: function(e) {
                    var t, n = !e[6] && e[2];
                    return fe.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && le.test(n) && (t = C(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), 
                    e[2] = n.slice(0, t)), e.slice(0, 3));
                }
            },
            filter: {
                TAG: function(e) {
                    var t = e.replace(ve, $e).toLowerCase();
                    return "*" === e ? function() {
                        return !0;
                    } : function(e) {
                        return e.nodeName && e.nodeName.toLowerCase() === t;
                    };
                },
                CLASS: function(e) {
                    var t = U[e + " "];
                    return t || (t = new RegExp("(^|" + ee + ")" + e + "(" + ee + "|$)")) && U(e, function(e) {
                        return t.test("string" == typeof e.className && e.className || void 0 !== e.getAttribute && e.getAttribute("class") || "");
                    });
                },
                ATTR: function(e, n, r) {
                    return function(i) {
                        var o = t.attr(i, e);
                        return null == o ? "!=" === n : !n || (o += "", "=" === n ? o === r : "!=" === n ? o !== r : "^=" === n ? r && 0 === o.indexOf(r) : "*=" === n ? r && o.indexOf(r) > -1 : "$=" === n ? r && o.slice(-r.length) === r : "~=" === n ? (" " + o.replace(ie, " ") + " ").indexOf(r) > -1 : "|=" === n && (o === r || o.slice(0, r.length + 1) === r + "-"));
                    };
                },
                CHILD: function(e, t, n, r, i) {
                    var o = "nth" !== e.slice(0, 3), a = "last" !== e.slice(-4), s = "of-type" === t;
                    return 1 === r && 0 === i ? function(e) {
                        return !!e.parentNode;
                    } : function(t, n, u) {
                        var l, c, f, h, p, d, m = o !== a ? "nextSibling" : "previousSibling", g = t.parentNode, v = s && t.nodeName.toLowerCase(), $ = !u && !s, y = !1;
                        if (g) {
                            if (o) {
                                for (;m; ) {
                                    for (h = t; h = h[m]; ) if (s ? h.nodeName.toLowerCase() === v : 1 === h.nodeType) return !1;
                                    d = m = "only" === e && !d && "nextSibling";
                                }
                                return !0;
                            }
                            if (d = [ a ? g.firstChild : g.lastChild ], a && $) {
                                for (h = g, f = h[R] || (h[R] = {}), c = f[h.uniqueID] || (f[h.uniqueID] = {}), 
                                l = c[e] || [], p = l[0] === H && l[1], y = p && l[2], h = p && g.childNodes[p]; h = ++p && h && h[m] || (y = p = 0) || d.pop(); ) if (1 === h.nodeType && ++y && h === t) {
                                    c[e] = [ H, p, y ];
                                    break;
                                }
                            } else if ($ && (h = t, f = h[R] || (h[R] = {}), c = f[h.uniqueID] || (f[h.uniqueID] = {}), 
                            l = c[e] || [], p = l[0] === H && l[1], y = p), !1 === y) for (;(h = ++p && h && h[m] || (y = p = 0) || d.pop()) && ((s ? h.nodeName.toLowerCase() !== v : 1 !== h.nodeType) || !++y || ($ && (f = h[R] || (h[R] = {}), 
                            c = f[h.uniqueID] || (f[h.uniqueID] = {}), c[e] = [ H, y ]), h !== t)); ) ;
                            return (y -= i) === r || y % r == 0 && y / r >= 0;
                        }
                    };
                },
                PSEUDO: function(e, n) {
                    var i, o = w.pseudos[e] || w.setFilters[e.toLowerCase()] || t.error("unsupported pseudo: " + e);
                    return o[R] ? o(n) : o.length > 1 ? (i = [ e, e, "", n ], w.setFilters.hasOwnProperty(e.toLowerCase()) ? r(function(e, t) {
                        for (var r, i = o(e, n), a = i.length; a--; ) r = J(e, i[a]), e[r] = !(t[r] = i[a]);
                    }) : function(e) {
                        return o(e, 0, i);
                    }) : o;
                }
            },
            pseudos: {
                not: r(function(e) {
                    var t = [], n = [], i = S(e.replace(oe, "$1"));
                    return i[R] ? r(function(e, t, n, r) {
                        for (var o, a = i(e, null, r, []), s = e.length; s--; ) (o = a[s]) && (e[s] = !(t[s] = o));
                    }) : function(e, r, o) {
                        return t[0] = e, i(t, null, o, n), t[0] = null, !n.pop();
                    };
                }),
                has: r(function(e) {
                    return function(n) {
                        return t(e, n).length > 0;
                    };
                }),
                contains: r(function(e) {
                    return e = e.replace(ve, $e), function(t) {
                        return (t.textContent || t.innerText || E(t)).indexOf(e) > -1;
                    };
                }),
                lang: r(function(e) {
                    return ce.test(e || "") || t.error("unsupported lang: " + e), e = e.replace(ve, $e).toLowerCase(), 
                    function(t) {
                        var n;
                        do {
                            if (n = N ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang")) return (n = n.toLowerCase()) === e || 0 === n.indexOf(e + "-");
                        } while ((t = t.parentNode) && 1 === t.nodeType);
                        return !1;
                    };
                }),
                target: function(t) {
                    var n = e.location && e.location.hash;
                    return n && n.slice(1) === t.id;
                },
                root: function(e) {
                    return e === D;
                },
                focus: function(e) {
                    return e === I.activeElement && (!I.hasFocus || I.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);
                },
                enabled: s(!1),
                disabled: s(!0),
                checked: function(e) {
                    var t = e.nodeName.toLowerCase();
                    return "input" === t && !!e.checked || "option" === t && !!e.selected;
                },
                selected: function(e) {
                    return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected;
                },
                empty: function(e) {
                    for (e = e.firstChild; e; e = e.nextSibling) if (e.nodeType < 6) return !1;
                    return !0;
                },
                parent: function(e) {
                    return !w.pseudos.empty(e);
                },
                header: function(e) {
                    return pe.test(e.nodeName);
                },
                input: function(e) {
                    return he.test(e.nodeName);
                },
                button: function(e) {
                    var t = e.nodeName.toLowerCase();
                    return "input" === t && "button" === e.type || "button" === t;
                },
                text: function(e) {
                    var t;
                    return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase());
                },
                first: u(function() {
                    return [ 0 ];
                }),
                last: u(function(e, t) {
                    return [ t - 1 ];
                }),
                eq: u(function(e, t, n) {
                    return [ n < 0 ? n + t : n ];
                }),
                even: u(function(e, t) {
                    for (var n = 0; n < t; n += 2) e.push(n);
                    return e;
                }),
                odd: u(function(e, t) {
                    for (var n = 1; n < t; n += 2) e.push(n);
                    return e;
                }),
                lt: u(function(e, t, n) {
                    for (var r = n < 0 ? n + t : n; --r >= 0; ) e.push(r);
                    return e;
                }),
                gt: u(function(e, t, n) {
                    for (var r = n < 0 ? n + t : n; ++r < t; ) e.push(r);
                    return e;
                })
            }
        }, w.pseudos.nth = w.pseudos.eq;
        for (y in {
            radio: !0,
            checkbox: !0,
            file: !0,
            password: !0,
            image: !0
        }) w.pseudos[y] = function(e) {
            return function(t) {
                return "input" === t.nodeName.toLowerCase() && t.type === e;
            };
        }(y);
        for (y in {
            submit: !0,
            reset: !0
        }) w.pseudos[y] = function(e) {
            return function(t) {
                var n = t.nodeName.toLowerCase();
                return ("input" === n || "button" === n) && t.type === e;
            };
        }(y);
        return c.prototype = w.filters = w.pseudos, w.setFilters = new c(), C = t.tokenize = function(e, n) {
            var r, i, o, a, s, u, l, c = q[e + " "];
            if (c) return n ? 0 : c.slice(0);
            for (s = e, u = [], l = w.preFilter; s; ) {
                r && !(i = ae.exec(s)) || (i && (s = s.slice(i[0].length) || s), u.push(o = [])), 
                r = !1, (i = se.exec(s)) && (r = i.shift(), o.push({
                    value: r,
                    type: i[0].replace(oe, " ")
                }), s = s.slice(r.length));
                for (a in w.filter) !(i = fe[a].exec(s)) || l[a] && !(i = l[a](i)) || (r = i.shift(), 
                o.push({
                    value: r,
                    type: a,
                    matches: i
                }), s = s.slice(r.length));
                if (!r) break;
            }
            return n ? s.length : s ? t.error(e) : q(e, u).slice(0);
        }, S = t.compile = function(e, t) {
            var n, r = [], i = [], o = B[e + " "];
            if (!o) {
                for (t || (t = C(e)), n = t.length; n--; ) o = v(t[n]), o[R] ? r.push(o) : i.push(o);
                o = B(e, $(i, r)), o.selector = e;
            }
            return o;
        }, T = t.select = function(e, t, n, r) {
            var i, o, a, s, u, c = "function" == typeof e && e, h = !r && C(e = c.selector || e);
            if (n = n || [], 1 === h.length) {
                if (o = h[0] = h[0].slice(0), o.length > 2 && "ID" === (a = o[0]).type && 9 === t.nodeType && N && w.relative[o[1].type]) {
                    if (!(t = (w.find.ID(a.matches[0].replace(ve, $e), t) || [])[0])) return n;
                    c && (t = t.parentNode), e = e.slice(o.shift().value.length);
                }
                for (i = fe.needsContext.test(e) ? 0 : o.length; i-- && (a = o[i], !w.relative[s = a.type]); ) if ((u = w.find[s]) && (r = u(a.matches[0].replace(ve, $e), ge.test(o[0].type) && l(t.parentNode) || t))) {
                    if (o.splice(i, 1), !(e = r.length && f(o))) return Y.apply(n, r), n;
                    break;
                }
            }
            return (c || S(e, h))(r, t, !N, n, !t || ge.test(e) && l(t.parentNode) || t), n;
        }, b.sortStable = R.split("").sort(W).join("") === R, b.detectDuplicates = !!O, 
        k(), b.sortDetached = i(function(e) {
            return 1 & e.compareDocumentPosition(I.createElement("fieldset"));
        }), i(function(e) {
            return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href");
        }) || o("type|href|height|width", function(e, t, n) {
            if (!n) return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2);
        }), b.attributes && i(function(e) {
            return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value");
        }) || o("value", function(e, t, n) {
            if (!n && "input" === e.nodeName.toLowerCase()) return e.defaultValue;
        }), i(function(e) {
            return null == e.getAttribute("disabled");
        }) || o(Z, function(e, t, n) {
            var r;
            if (!n) return !0 === e[t] ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;
        }), t;
    }(e);
    de.find = ye, de.expr = ye.selectors, de.expr[":"] = de.expr.pseudos, de.uniqueSort = de.unique = ye.uniqueSort, 
    de.text = ye.getText, de.isXMLDoc = ye.isXML, de.contains = ye.contains, de.escapeSelector = ye.escape;
    var be = function(e, t, n) {
        for (var r = [], i = void 0 !== n; (e = e[t]) && 9 !== e.nodeType; ) if (1 === e.nodeType) {
            if (i && de(e).is(n)) break;
            r.push(e);
        }
        return r;
    }, we = function(e, t) {
        for (var n = []; e; e = e.nextSibling) 1 === e.nodeType && e !== t && n.push(e);
        return n;
    }, Ee = de.expr.match.needsContext, xe = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i, Ce = /^.[^:#\[\.,]*$/;
    de.filter = function(e, t, n) {
        var r = t[0];
        return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === r.nodeType ? de.find.matchesSelector(r, e) ? [ r ] : [] : de.find.matches(e, de.grep(t, function(e) {
            return 1 === e.nodeType;
        }));
    }, de.fn.extend({
        find: function(e) {
            var t, n, r = this.length, i = this;
            if ("string" != typeof e) return this.pushStack(de(e).filter(function() {
                for (t = 0; t < r; t++) if (de.contains(i[t], this)) return !0;
            }));
            for (n = this.pushStack([]), t = 0; t < r; t++) de.find(e, i[t], n);
            return r > 1 ? de.uniqueSort(n) : n;
        },
        filter: function(e) {
            return this.pushStack(o(this, e || [], !1));
        },
        not: function(e) {
            return this.pushStack(o(this, e || [], !0));
        },
        is: function(e) {
            return !!o(this, "string" == typeof e && Ee.test(e) ? de(e) : e || [], !1).length;
        }
    });
    var Se, Te = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
    (de.fn.init = function(e, t, n) {
        var r, i;
        if (!e) return this;
        if (n = n || Se, "string" == typeof e) {
            if (!(r = "<" === e[0] && ">" === e[e.length - 1] && e.length >= 3 ? [ null, e, null ] : Te.exec(e)) || !r[1] && t) return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);
            if (r[1]) {
                if (t = t instanceof de ? t[0] : t, de.merge(this, de.parseHTML(r[1], t && t.nodeType ? t.ownerDocument || t : ne, !0)), 
                xe.test(r[1]) && de.isPlainObject(t)) for (r in t) de.isFunction(this[r]) ? this[r](t[r]) : this.attr(r, t[r]);
                return this;
            }
            return i = ne.getElementById(r[2]), i && (this[0] = i, this.length = 1), this;
        }
        return e.nodeType ? (this[0] = e, this.length = 1, this) : de.isFunction(e) ? void 0 !== n.ready ? n.ready(e) : e(de) : de.makeArray(e, this);
    }).prototype = de.fn, Se = de(ne);
    var _e = /^(?:parents|prev(?:Until|All))/, Ae = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
    };
    de.fn.extend({
        has: function(e) {
            var t = de(e, this), n = t.length;
            return this.filter(function() {
                for (var e = 0; e < n; e++) if (de.contains(this, t[e])) return !0;
            });
        },
        closest: function(e, t) {
            var n, r = 0, i = this.length, o = [], a = "string" != typeof e && de(e);
            if (!Ee.test(e)) for (;r < i; r++) for (n = this[r]; n && n !== t; n = n.parentNode) if (n.nodeType < 11 && (a ? a.index(n) > -1 : 1 === n.nodeType && de.find.matchesSelector(n, e))) {
                o.push(n);
                break;
            }
            return this.pushStack(o.length > 1 ? de.uniqueSort(o) : o);
        },
        index: function(e) {
            return e ? "string" == typeof e ? se.call(de(e), this[0]) : se.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add: function(e, t) {
            return this.pushStack(de.uniqueSort(de.merge(this.get(), de(e, t))));
        },
        addBack: function(e) {
            return this.add(null == e ? this.prevObject : this.prevObject.filter(e));
        }
    }), de.each({
        parent: function(e) {
            var t = e.parentNode;
            return t && 11 !== t.nodeType ? t : null;
        },
        parents: function(e) {
            return be(e, "parentNode");
        },
        parentsUntil: function(e, t, n) {
            return be(e, "parentNode", n);
        },
        next: function(e) {
            return a(e, "nextSibling");
        },
        prev: function(e) {
            return a(e, "previousSibling");
        },
        nextAll: function(e) {
            return be(e, "nextSibling");
        },
        prevAll: function(e) {
            return be(e, "previousSibling");
        },
        nextUntil: function(e, t, n) {
            return be(e, "nextSibling", n);
        },
        prevUntil: function(e, t, n) {
            return be(e, "previousSibling", n);
        },
        siblings: function(e) {
            return we((e.parentNode || {}).firstChild, e);
        },
        children: function(e) {
            return we(e.firstChild);
        },
        contents: function(e) {
            return i(e, "iframe") ? e.contentDocument : (i(e, "template") && (e = e.content || e), 
            de.merge([], e.childNodes));
        }
    }, function(e, t) {
        de.fn[e] = function(n, r) {
            var i = de.map(this, t, n);
            return "Until" !== e.slice(-5) && (r = n), r && "string" == typeof r && (i = de.filter(r, i)), 
            this.length > 1 && (Ae[e] || de.uniqueSort(i), _e.test(e) && i.reverse()), this.pushStack(i);
        };
    });
    var Oe = /[^\x20\t\r\n\f]+/g;
    de.Callbacks = function(e) {
        e = "string" == typeof e ? s(e) : de.extend({}, e);
        var t, n, r, i, o = [], a = [], u = -1, l = function() {
            for (i = i || e.once, r = t = !0; a.length; u = -1) for (n = a.shift(); ++u < o.length; ) !1 === o[u].apply(n[0], n[1]) && e.stopOnFalse && (u = o.length, 
            n = !1);
            e.memory || (n = !1), t = !1, i && (o = n ? [] : "");
        }, c = {
            add: function() {
                return o && (n && !t && (u = o.length - 1, a.push(n)), function t(n) {
                    de.each(n, function(n, r) {
                        de.isFunction(r) ? e.unique && c.has(r) || o.push(r) : r && r.length && "string" !== de.type(r) && t(r);
                    });
                }(arguments), n && !t && l()), this;
            },
            remove: function() {
                return de.each(arguments, function(e, t) {
                    for (var n; (n = de.inArray(t, o, n)) > -1; ) o.splice(n, 1), n <= u && u--;
                }), this;
            },
            has: function(e) {
                return e ? de.inArray(e, o) > -1 : o.length > 0;
            },
            empty: function() {
                return o && (o = []), this;
            },
            disable: function() {
                return i = a = [], o = n = "", this;
            },
            disabled: function() {
                return !o;
            },
            lock: function() {
                return i = a = [], n || t || (o = n = ""), this;
            },
            locked: function() {
                return !!i;
            },
            fireWith: function(e, n) {
                return i || (n = n || [], n = [ e, n.slice ? n.slice() : n ], a.push(n), t || l()), 
                this;
            },
            fire: function() {
                return c.fireWith(this, arguments), this;
            },
            fired: function() {
                return !!r;
            }
        };
        return c;
    }, de.extend({
        Deferred: function(t) {
            var n = [ [ "notify", "progress", de.Callbacks("memory"), de.Callbacks("memory"), 2 ], [ "resolve", "done", de.Callbacks("once memory"), de.Callbacks("once memory"), 0, "resolved" ], [ "reject", "fail", de.Callbacks("once memory"), de.Callbacks("once memory"), 1, "rejected" ] ], r = "pending", i = {
                state: function() {
                    return r;
                },
                always: function() {
                    return o.done(arguments).fail(arguments), this;
                },
                catch: function(e) {
                    return i.then(null, e);
                },
                pipe: function() {
                    var e = arguments;
                    return de.Deferred(function(t) {
                        de.each(n, function(n, r) {
                            var i = de.isFunction(e[r[4]]) && e[r[4]];
                            o[r[1]](function() {
                                var e = i && i.apply(this, arguments);
                                e && de.isFunction(e.promise) ? e.promise().progress(t.notify).done(t.resolve).fail(t.reject) : t[r[0] + "With"](this, i ? [ e ] : arguments);
                            });
                        }), e = null;
                    }).promise();
                },
                then: function(t, r, i) {
                    function o(t, n, r, i) {
                        return function() {
                            var s = this, c = arguments, f = function() {
                                var e, f;
                                if (!(t < a)) {
                                    if ((e = r.apply(s, c)) === n.promise()) throw new TypeError("Thenable self-resolution");
                                    f = e && ("object" == typeof e || "function" == typeof e) && e.then, de.isFunction(f) ? i ? f.call(e, o(a, n, u, i), o(a, n, l, i)) : (a++, 
                                    f.call(e, o(a, n, u, i), o(a, n, l, i), o(a, n, u, n.notifyWith))) : (r !== u && (s = void 0, 
                                    c = [ e ]), (i || n.resolveWith)(s, c));
                                }
                            }, h = i ? f : function() {
                                try {
                                    f();
                                } catch (e) {
                                    de.Deferred.exceptionHook && de.Deferred.exceptionHook(e, h.stackTrace), t + 1 >= a && (r !== l && (s = void 0, 
                                    c = [ e ]), n.rejectWith(s, c));
                                }
                            };
                            t ? h() : (de.Deferred.getStackHook && (h.stackTrace = de.Deferred.getStackHook()), 
                            e.setTimeout(h));
                        };
                    }
                    var a = 0;
                    return de.Deferred(function(e) {
                        n[0][3].add(o(0, e, de.isFunction(i) ? i : u, e.notifyWith)), n[1][3].add(o(0, e, de.isFunction(t) ? t : u)), 
                        n[2][3].add(o(0, e, de.isFunction(r) ? r : l));
                    }).promise();
                },
                promise: function(e) {
                    return null != e ? de.extend(e, i) : i;
                }
            }, o = {};
            return de.each(n, function(e, t) {
                var a = t[2], s = t[5];
                i[t[1]] = a.add, s && a.add(function() {
                    r = s;
                }, n[3 - e][2].disable, n[0][2].lock), a.add(t[3].fire), o[t[0]] = function() {
                    return o[t[0] + "With"](this === o ? void 0 : this, arguments), this;
                }, o[t[0] + "With"] = a.fireWith;
            }), i.promise(o), t && t.call(o, o), o;
        },
        when: function(e) {
            var t = arguments.length, n = t, r = Array(n), i = ie.call(arguments), o = de.Deferred(), a = function(e) {
                return function(n) {
                    r[e] = this, i[e] = arguments.length > 1 ? ie.call(arguments) : n, --t || o.resolveWith(r, i);
                };
            };
            if (t <= 1 && (c(e, o.done(a(n)).resolve, o.reject, !t), "pending" === o.state() || de.isFunction(i[n] && i[n].then))) return o.then();
            for (;n--; ) c(i[n], a(n), o.reject);
            return o.promise();
        }
    });
    var ke = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    de.Deferred.exceptionHook = function(t, n) {
        e.console && e.console.warn && t && ke.test(t.name) && e.console.warn("jQuery.Deferred exception: " + t.message, t.stack, n);
    }, de.readyException = function(t) {
        e.setTimeout(function() {
            throw t;
        });
    };
    var Ie = de.Deferred();
    de.fn.ready = function(e) {
        return Ie.then(e).catch(function(e) {
            de.readyException(e);
        }), this;
    }, de.extend({
        isReady: !1,
        readyWait: 1,
        ready: function(e) {
            (!0 === e ? --de.readyWait : de.isReady) || (de.isReady = !0, !0 !== e && --de.readyWait > 0 || Ie.resolveWith(ne, [ de ]));
        }
    }), de.ready.then = Ie.then, "complete" === ne.readyState || "loading" !== ne.readyState && !ne.documentElement.doScroll ? e.setTimeout(de.ready) : (ne.addEventListener("DOMContentLoaded", f), 
    e.addEventListener("load", f));
    var De = function(e, t, n, r, i, o, a) {
        var s = 0, u = e.length, l = null == n;
        if ("object" === de.type(n)) {
            i = !0;
            for (s in n) De(e, t, s, n[s], !0, o, a);
        } else if (void 0 !== r && (i = !0, de.isFunction(r) || (a = !0), l && (a ? (t.call(e, r), 
        t = null) : (l = t, t = function(e, t, n) {
            return l.call(de(e), n);
        })), t)) for (;s < u; s++) t(e[s], n, a ? r : r.call(e[s], s, t(e[s], n)));
        return i ? e : l ? t.call(e) : u ? t(e[0], n) : o;
    }, Ne = function(e) {
        return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType;
    };
    h.uid = 1, h.prototype = {
        cache: function(e) {
            var t = e[this.expando];
            return t || (t = {}, Ne(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {
                value: t,
                configurable: !0
            }))), t;
        },
        set: function(e, t, n) {
            var r, i = this.cache(e);
            if ("string" == typeof t) i[de.camelCase(t)] = n; else for (r in t) i[de.camelCase(r)] = t[r];
            return i;
        },
        get: function(e, t) {
            return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][de.camelCase(t)];
        },
        access: function(e, t, n) {
            return void 0 === t || t && "string" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n), 
            void 0 !== n ? n : t);
        },
        remove: function(e, t) {
            var n, r = e[this.expando];
            if (void 0 !== r) {
                if (void 0 !== t) {
                    Array.isArray(t) ? t = t.map(de.camelCase) : (t = de.camelCase(t), t = t in r ? [ t ] : t.match(Oe) || []), 
                    n = t.length;
                    for (;n--; ) delete r[t[n]];
                }
                (void 0 === t || de.isEmptyObject(r)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);
            }
        },
        hasData: function(e) {
            var t = e[this.expando];
            return void 0 !== t && !de.isEmptyObject(t);
        }
    };
    var je = new h(), Pe = new h(), Me = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, Le = /[A-Z]/g;
    de.extend({
        hasData: function(e) {
            return Pe.hasData(e) || je.hasData(e);
        },
        data: function(e, t, n) {
            return Pe.access(e, t, n);
        },
        removeData: function(e, t) {
            Pe.remove(e, t);
        },
        _data: function(e, t, n) {
            return je.access(e, t, n);
        },
        _removeData: function(e, t) {
            je.remove(e, t);
        }
    }), de.fn.extend({
        data: function(e, t) {
            var n, r, i, o = this[0], a = o && o.attributes;
            if (void 0 === e) {
                if (this.length && (i = Pe.get(o), 1 === o.nodeType && !je.get(o, "hasDataAttrs"))) {
                    for (n = a.length; n--; ) a[n] && (r = a[n].name, 0 === r.indexOf("data-") && (r = de.camelCase(r.slice(5)), 
                    d(o, r, i[r])));
                    je.set(o, "hasDataAttrs", !0);
                }
                return i;
            }
            return "object" == typeof e ? this.each(function() {
                Pe.set(this, e);
            }) : De(this, function(t) {
                var n;
                if (o && void 0 === t) {
                    if (void 0 !== (n = Pe.get(o, e))) return n;
                    if (void 0 !== (n = d(o, e))) return n;
                } else this.each(function() {
                    Pe.set(this, e, t);
                });
            }, null, t, arguments.length > 1, null, !0);
        },
        removeData: function(e) {
            return this.each(function() {
                Pe.remove(this, e);
            });
        }
    }), de.extend({
        queue: function(e, t, n) {
            var r;
            if (e) return t = (t || "fx") + "queue", r = je.get(e, t), n && (!r || Array.isArray(n) ? r = je.access(e, t, de.makeArray(n)) : r.push(n)), 
            r || [];
        },
        dequeue: function(e, t) {
            t = t || "fx";
            var n = de.queue(e, t), r = n.length, i = n.shift(), o = de._queueHooks(e, t), a = function() {
                de.dequeue(e, t);
            };
            "inprogress" === i && (i = n.shift(), r--), i && ("fx" === t && n.unshift("inprogress"), 
            delete o.stop, i.call(e, a, o)), !r && o && o.empty.fire();
        },
        _queueHooks: function(e, t) {
            var n = t + "queueHooks";
            return je.get(e, n) || je.access(e, n, {
                empty: de.Callbacks("once memory").add(function() {
                    je.remove(e, [ t + "queue", n ]);
                })
            });
        }
    }), de.fn.extend({
        queue: function(e, t) {
            var n = 2;
            return "string" != typeof e && (t = e, e = "fx", n--), arguments.length < n ? de.queue(this[0], e) : void 0 === t ? this : this.each(function() {
                var n = de.queue(this, e, t);
                de._queueHooks(this, e), "fx" === e && "inprogress" !== n[0] && de.dequeue(this, e);
            });
        },
        dequeue: function(e) {
            return this.each(function() {
                de.dequeue(this, e);
            });
        },
        clearQueue: function(e) {
            return this.queue(e || "fx", []);
        },
        promise: function(e, t) {
            var n, r = 1, i = de.Deferred(), o = this, a = this.length, s = function() {
                --r || i.resolveWith(o, [ o ]);
            };
            for ("string" != typeof e && (t = e, e = void 0), e = e || "fx"; a--; ) (n = je.get(o[a], e + "queueHooks")) && n.empty && (r++, 
            n.empty.add(s));
            return s(), i.promise(t);
        }
    });
    var Re = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, Ve = new RegExp("^(?:([+-])=|)(" + Re + ")([a-z%]*)$", "i"), He = [ "Top", "Right", "Bottom", "Left" ], Fe = function(e, t) {
        return e = t || e, "none" === e.style.display || "" === e.style.display && de.contains(e.ownerDocument, e) && "none" === de.css(e, "display");
    }, Ue = function(e, t, n, r) {
        var i, o, a = {};
        for (o in t) a[o] = e.style[o], e.style[o] = t[o];
        i = n.apply(e, r || []);
        for (o in t) e.style[o] = a[o];
        return i;
    }, qe = {};
    de.fn.extend({
        show: function() {
            return v(this, !0);
        },
        hide: function() {
            return v(this);
        },
        toggle: function(e) {
            return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function() {
                Fe(this) ? de(this).show() : de(this).hide();
            });
        }
    });
    var Be = /^(?:checkbox|radio)$/i, We = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i, Ge = /^$|\/(?:java|ecma)script/i, ze = {
        option: [ 1, "<select multiple='multiple'>", "</select>" ],
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: [ 0, "", "" ]
    };
    ze.optgroup = ze.option, ze.tbody = ze.tfoot = ze.colgroup = ze.caption = ze.thead, 
    ze.th = ze.td;
    var Ke = /<|&#?\w+;/;
    !function() {
        var e = ne.createDocumentFragment(), t = e.appendChild(ne.createElement("div")), n = ne.createElement("input");
        n.setAttribute("type", "radio"), n.setAttribute("checked", "checked"), n.setAttribute("name", "t"), 
        t.appendChild(n), pe.checkClone = t.cloneNode(!0).cloneNode(!0).lastChild.checked, 
        t.innerHTML = "<textarea>x</textarea>", pe.noCloneChecked = !!t.cloneNode(!0).lastChild.defaultValue;
    }();
    var Qe = ne.documentElement, Ye = /^key/, Xe = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, Je = /^([^.]*)(?:\.(.+)|)/;
    de.event = {
        global: {},
        add: function(e, t, n, r, i) {
            var o, a, s, u, l, c, f, h, p, d, m, g = je.get(e);
            if (g) for (n.handler && (o = n, n = o.handler, i = o.selector), i && de.find.matchesSelector(Qe, i), 
            n.guid || (n.guid = de.guid++), (u = g.events) || (u = g.events = {}), (a = g.handle) || (a = g.handle = function(t) {
                return void 0 !== de && de.event.triggered !== t.type ? de.event.dispatch.apply(e, arguments) : void 0;
            }), t = (t || "").match(Oe) || [ "" ], l = t.length; l--; ) s = Je.exec(t[l]) || [], 
            p = m = s[1], d = (s[2] || "").split(".").sort(), p && (f = de.event.special[p] || {}, 
            p = (i ? f.delegateType : f.bindType) || p, f = de.event.special[p] || {}, c = de.extend({
                type: p,
                origType: m,
                data: r,
                handler: n,
                guid: n.guid,
                selector: i,
                needsContext: i && de.expr.match.needsContext.test(i),
                namespace: d.join(".")
            }, o), (h = u[p]) || (h = u[p] = [], h.delegateCount = 0, f.setup && !1 !== f.setup.call(e, r, d, a) || e.addEventListener && e.addEventListener(p, a)), 
            f.add && (f.add.call(e, c), c.handler.guid || (c.handler.guid = n.guid)), i ? h.splice(h.delegateCount++, 0, c) : h.push(c), 
            de.event.global[p] = !0);
        },
        remove: function(e, t, n, r, i) {
            var o, a, s, u, l, c, f, h, p, d, m, g = je.hasData(e) && je.get(e);
            if (g && (u = g.events)) {
                for (t = (t || "").match(Oe) || [ "" ], l = t.length; l--; ) if (s = Je.exec(t[l]) || [], 
                p = m = s[1], d = (s[2] || "").split(".").sort(), p) {
                    for (f = de.event.special[p] || {}, p = (r ? f.delegateType : f.bindType) || p, 
                    h = u[p] || [], s = s[2] && new RegExp("(^|\\.)" + d.join("\\.(?:.*\\.|)") + "(\\.|$)"), 
                    a = o = h.length; o--; ) c = h[o], !i && m !== c.origType || n && n.guid !== c.guid || s && !s.test(c.namespace) || r && r !== c.selector && ("**" !== r || !c.selector) || (h.splice(o, 1), 
                    c.selector && h.delegateCount--, f.remove && f.remove.call(e, c));
                    a && !h.length && (f.teardown && !1 !== f.teardown.call(e, d, g.handle) || de.removeEvent(e, p, g.handle), 
                    delete u[p]);
                } else for (p in u) de.event.remove(e, p + t[l], n, r, !0);
                de.isEmptyObject(u) && je.remove(e, "handle events");
            }
        },
        dispatch: function(e) {
            var t, n, r, i, o, a, s = de.event.fix(e), u = new Array(arguments.length), l = (je.get(this, "events") || {})[s.type] || [], c = de.event.special[s.type] || {};
            for (u[0] = s, t = 1; t < arguments.length; t++) u[t] = arguments[t];
            if (s.delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, s)) {
                for (a = de.event.handlers.call(this, s, l), t = 0; (i = a[t++]) && !s.isPropagationStopped(); ) for (s.currentTarget = i.elem, 
                n = 0; (o = i.handlers[n++]) && !s.isImmediatePropagationStopped(); ) s.rnamespace && !s.rnamespace.test(o.namespace) || (s.handleObj = o, 
                s.data = o.data, void 0 !== (r = ((de.event.special[o.origType] || {}).handle || o.handler).apply(i.elem, u)) && !1 === (s.result = r) && (s.preventDefault(), 
                s.stopPropagation()));
                return c.postDispatch && c.postDispatch.call(this, s), s.result;
            }
        },
        handlers: function(e, t) {
            var n, r, i, o, a, s = [], u = t.delegateCount, l = e.target;
            if (u && l.nodeType && !("click" === e.type && e.button >= 1)) for (;l !== this; l = l.parentNode || this) if (1 === l.nodeType && ("click" !== e.type || !0 !== l.disabled)) {
                for (o = [], a = {}, n = 0; n < u; n++) r = t[n], i = r.selector + " ", void 0 === a[i] && (a[i] = r.needsContext ? de(i, this).index(l) > -1 : de.find(i, this, null, [ l ]).length), 
                a[i] && o.push(r);
                o.length && s.push({
                    elem: l,
                    handlers: o
                });
            }
            return l = this, u < t.length && s.push({
                elem: l,
                handlers: t.slice(u)
            }), s;
        },
        addProp: function(e, t) {
            Object.defineProperty(de.Event.prototype, e, {
                enumerable: !0,
                configurable: !0,
                get: de.isFunction(t) ? function() {
                    if (this.originalEvent) return t(this.originalEvent);
                } : function() {
                    if (this.originalEvent) return this.originalEvent[e];
                },
                set: function(t) {
                    Object.defineProperty(this, e, {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: t
                    });
                }
            });
        },
        fix: function(e) {
            return e[de.expando] ? e : new de.Event(e);
        },
        special: {
            load: {
                noBubble: !0
            },
            focus: {
                trigger: function() {
                    if (this !== x() && this.focus) return this.focus(), !1;
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === x() && this.blur) return this.blur(), !1;
                },
                delegateType: "focusout"
            },
            click: {
                trigger: function() {
                    if ("checkbox" === this.type && this.click && i(this, "input")) return this.click(), 
                    !1;
                },
                _default: function(e) {
                    return i(e.target, "a");
                }
            },
            beforeunload: {
                postDispatch: function(e) {
                    void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);
                }
            }
        }
    }, de.removeEvent = function(e, t, n) {
        e.removeEventListener && e.removeEventListener(t, n);
    }, de.Event = function(e, t) {
        if (!(this instanceof de.Event)) return new de.Event(e, t);
        e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? w : E, 
        this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, 
        this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, 
        t && de.extend(this, t), this.timeStamp = e && e.timeStamp || de.now(), this[de.expando] = !0;
    }, de.Event.prototype = {
        constructor: de.Event,
        isDefaultPrevented: E,
        isPropagationStopped: E,
        isImmediatePropagationStopped: E,
        isSimulated: !1,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = w, e && !this.isSimulated && e.preventDefault();
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = w, e && !this.isSimulated && e.stopPropagation();
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = w, e && !this.isSimulated && e.stopImmediatePropagation(), 
            this.stopPropagation();
        }
    }, de.each({
        altKey: !0,
        bubbles: !0,
        cancelable: !0,
        changedTouches: !0,
        ctrlKey: !0,
        detail: !0,
        eventPhase: !0,
        metaKey: !0,
        pageX: !0,
        pageY: !0,
        shiftKey: !0,
        view: !0,
        char: !0,
        charCode: !0,
        key: !0,
        keyCode: !0,
        button: !0,
        buttons: !0,
        clientX: !0,
        clientY: !0,
        offsetX: !0,
        offsetY: !0,
        pointerId: !0,
        pointerType: !0,
        screenX: !0,
        screenY: !0,
        targetTouches: !0,
        toElement: !0,
        touches: !0,
        which: function(e) {
            var t = e.button;
            return null == e.which && Ye.test(e.type) ? null != e.charCode ? e.charCode : e.keyCode : !e.which && void 0 !== t && Xe.test(e.type) ? 1 & t ? 1 : 2 & t ? 3 : 4 & t ? 2 : 0 : e.which;
        }
    }, de.event.addProp), de.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(e, t) {
        de.event.special[e] = {
            delegateType: t,
            bindType: t,
            handle: function(e) {
                var n, r = this, i = e.relatedTarget, o = e.handleObj;
                return i && (i === r || de.contains(r, i)) || (e.type = o.origType, n = o.handler.apply(this, arguments), 
                e.type = t), n;
            }
        };
    }), de.fn.extend({
        on: function(e, t, n, r) {
            return C(this, e, t, n, r);
        },
        one: function(e, t, n, r) {
            return C(this, e, t, n, r, 1);
        },
        off: function(e, t, n) {
            var r, i;
            if (e && e.preventDefault && e.handleObj) return r = e.handleObj, de(e.delegateTarget).off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), 
            this;
            if ("object" == typeof e) {
                for (i in e) this.off(i, t, e[i]);
                return this;
            }
            return !1 !== t && "function" != typeof t || (n = t, t = void 0), !1 === n && (n = E), 
            this.each(function() {
                de.event.remove(this, e, n, t);
            });
        }
    });
    var Ze = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi, et = /<script|<style|<link/i, tt = /checked\s*(?:[^=]|=\s*.checked.)/i, nt = /^true\/(.*)/, rt = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    de.extend({
        htmlPrefilter: function(e) {
            return e.replace(Ze, "<$1></$2>");
        },
        clone: function(e, t, n) {
            var r, i, o, a, s = e.cloneNode(!0), u = de.contains(e.ownerDocument, e);
            if (!(pe.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || de.isXMLDoc(e))) for (a = $(s), 
            o = $(e), r = 0, i = o.length; r < i; r++) O(o[r], a[r]);
            if (t) if (n) for (o = o || $(e), a = a || $(s), r = 0, i = o.length; r < i; r++) A(o[r], a[r]); else A(e, s);
            return a = $(s, "script"), a.length > 0 && y(a, !u && $(e, "script")), s;
        },
        cleanData: function(e) {
            for (var t, n, r, i = de.event.special, o = 0; void 0 !== (n = e[o]); o++) if (Ne(n)) {
                if (t = n[je.expando]) {
                    if (t.events) for (r in t.events) i[r] ? de.event.remove(n, r) : de.removeEvent(n, r, t.handle);
                    n[je.expando] = void 0;
                }
                n[Pe.expando] && (n[Pe.expando] = void 0);
            }
        }
    }), de.fn.extend({
        detach: function(e) {
            return I(this, e, !0);
        },
        remove: function(e) {
            return I(this, e);
        },
        text: function(e) {
            return De(this, function(e) {
                return void 0 === e ? de.text(this) : this.empty().each(function() {
                    1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e);
                });
            }, null, e, arguments.length);
        },
        append: function() {
            return k(this, arguments, function(e) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    S(this, e).appendChild(e);
                }
            });
        },
        prepend: function() {
            return k(this, arguments, function(e) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var t = S(this, e);
                    t.insertBefore(e, t.firstChild);
                }
            });
        },
        before: function() {
            return k(this, arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this);
            });
        },
        after: function() {
            return k(this, arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);
            });
        },
        empty: function() {
            for (var e, t = 0; null != (e = this[t]); t++) 1 === e.nodeType && (de.cleanData($(e, !1)), 
            e.textContent = "");
            return this;
        },
        clone: function(e, t) {
            return e = null != e && e, t = null == t ? e : t, this.map(function() {
                return de.clone(this, e, t);
            });
        },
        html: function(e) {
            return De(this, function(e) {
                var t = this[0] || {}, n = 0, r = this.length;
                if (void 0 === e && 1 === t.nodeType) return t.innerHTML;
                if ("string" == typeof e && !et.test(e) && !ze[(We.exec(e) || [ "", "" ])[1].toLowerCase()]) {
                    e = de.htmlPrefilter(e);
                    try {
                        for (;n < r; n++) t = this[n] || {}, 1 === t.nodeType && (de.cleanData($(t, !1)), 
                        t.innerHTML = e);
                        t = 0;
                    } catch (e) {}
                }
                t && this.empty().append(e);
            }, null, e, arguments.length);
        },
        replaceWith: function() {
            var e = [];
            return k(this, arguments, function(t) {
                var n = this.parentNode;
                de.inArray(this, e) < 0 && (de.cleanData($(this)), n && n.replaceChild(t, this));
            }, e);
        }
    }), de.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(e, t) {
        de.fn[e] = function(e) {
            for (var n, r = [], i = de(e), o = i.length - 1, a = 0; a <= o; a++) n = a === o ? this : this.clone(!0), 
            de(i[a])[t](n), ae.apply(r, n.get());
            return this.pushStack(r);
        };
    });
    var it = /^margin/, ot = new RegExp("^(" + Re + ")(?!px)[a-z%]+$", "i"), at = function(t) {
        var n = t.ownerDocument.defaultView;
        return n && n.opener || (n = e), n.getComputedStyle(t);
    };
    !function() {
        function t() {
            if (s) {
                s.style.cssText = "box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", 
                s.innerHTML = "", Qe.appendChild(a);
                var t = e.getComputedStyle(s);
                n = "1%" !== t.top, o = "2px" === t.marginLeft, r = "4px" === t.width, s.style.marginRight = "50%", 
                i = "4px" === t.marginRight, Qe.removeChild(a), s = null;
            }
        }
        var n, r, i, o, a = ne.createElement("div"), s = ne.createElement("div");
        s.style && (s.style.backgroundClip = "content-box", s.cloneNode(!0).style.backgroundClip = "", 
        pe.clearCloneStyle = "content-box" === s.style.backgroundClip, a.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", 
        a.appendChild(s), de.extend(pe, {
            pixelPosition: function() {
                return t(), n;
            },
            boxSizingReliable: function() {
                return t(), r;
            },
            pixelMarginRight: function() {
                return t(), i;
            },
            reliableMarginLeft: function() {
                return t(), o;
            }
        }));
    }();
    var st = /^(none|table(?!-c[ea]).+)/, ut = /^--/, lt = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, ct = {
        letterSpacing: "0",
        fontWeight: "400"
    }, ft = [ "Webkit", "Moz", "ms" ], ht = ne.createElement("div").style;
    de.extend({
        cssHooks: {
            opacity: {
                get: function(e, t) {
                    if (t) {
                        var n = D(e, "opacity");
                        return "" === n ? "1" : n;
                    }
                }
            }
        },
        cssNumber: {
            animationIterationCount: !0,
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {
            float: "cssFloat"
        },
        style: function(e, t, n, r) {
            if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
                var i, o, a, s = de.camelCase(t), u = ut.test(t), l = e.style;
                if (u || (t = P(s)), a = de.cssHooks[t] || de.cssHooks[s], void 0 === n) return a && "get" in a && void 0 !== (i = a.get(e, !1, r)) ? i : l[t];
                o = typeof n, "string" === o && (i = Ve.exec(n)) && i[1] && (n = m(e, t, i), o = "number"), 
                null != n && n === n && ("number" === o && (n += i && i[3] || (de.cssNumber[s] ? "" : "px")), 
                pe.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (l[t] = "inherit"), 
                a && "set" in a && void 0 === (n = a.set(e, n, r)) || (u ? l.setProperty(t, n) : l[t] = n));
            }
        },
        css: function(e, t, n, r) {
            var i, o, a, s = de.camelCase(t);
            return ut.test(t) || (t = P(s)), a = de.cssHooks[t] || de.cssHooks[s], a && "get" in a && (i = a.get(e, !0, n)), 
            void 0 === i && (i = D(e, t, r)), "normal" === i && t in ct && (i = ct[t]), "" === n || n ? (o = parseFloat(i), 
            !0 === n || isFinite(o) ? o || 0 : i) : i;
        }
    }), de.each([ "height", "width" ], function(e, t) {
        de.cssHooks[t] = {
            get: function(e, n, r) {
                if (n) return !st.test(de.css(e, "display")) || e.getClientRects().length && e.getBoundingClientRect().width ? R(e, t, r) : Ue(e, lt, function() {
                    return R(e, t, r);
                });
            },
            set: function(e, n, r) {
                var i, o = r && at(e), a = r && L(e, t, r, "border-box" === de.css(e, "boxSizing", !1, o), o);
                return a && (i = Ve.exec(n)) && "px" !== (i[3] || "px") && (e.style[t] = n, n = de.css(e, t)), 
                M(e, n, a);
            }
        };
    }), de.cssHooks.marginLeft = N(pe.reliableMarginLeft, function(e, t) {
        if (t) return (parseFloat(D(e, "marginLeft")) || e.getBoundingClientRect().left - Ue(e, {
            marginLeft: 0
        }, function() {
            return e.getBoundingClientRect().left;
        })) + "px";
    }), de.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(e, t) {
        de.cssHooks[e + t] = {
            expand: function(n) {
                for (var r = 0, i = {}, o = "string" == typeof n ? n.split(" ") : [ n ]; r < 4; r++) i[e + He[r] + t] = o[r] || o[r - 2] || o[0];
                return i;
            }
        }, it.test(e) || (de.cssHooks[e + t].set = M);
    }), de.fn.extend({
        css: function(e, t) {
            return De(this, function(e, t, n) {
                var r, i, o = {}, a = 0;
                if (Array.isArray(t)) {
                    for (r = at(e), i = t.length; a < i; a++) o[t[a]] = de.css(e, t[a], !1, r);
                    return o;
                }
                return void 0 !== n ? de.style(e, t, n) : de.css(e, t);
            }, e, t, arguments.length > 1);
        }
    }), de.Tween = V, V.prototype = {
        constructor: V,
        init: function(e, t, n, r, i, o) {
            this.elem = e, this.prop = n, this.easing = i || de.easing._default, this.options = t, 
            this.start = this.now = this.cur(), this.end = r, this.unit = o || (de.cssNumber[n] ? "" : "px");
        },
        cur: function() {
            var e = V.propHooks[this.prop];
            return e && e.get ? e.get(this) : V.propHooks._default.get(this);
        },
        run: function(e) {
            var t, n = V.propHooks[this.prop];
            return this.options.duration ? this.pos = t = de.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, 
            this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), 
            n && n.set ? n.set(this) : V.propHooks._default.set(this), this;
        }
    }, V.prototype.init.prototype = V.prototype, V.propHooks = {
        _default: {
            get: function(e) {
                var t;
                return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = de.css(e.elem, e.prop, ""), 
                t && "auto" !== t ? t : 0);
            },
            set: function(e) {
                de.fx.step[e.prop] ? de.fx.step[e.prop](e) : 1 !== e.elem.nodeType || null == e.elem.style[de.cssProps[e.prop]] && !de.cssHooks[e.prop] ? e.elem[e.prop] = e.now : de.style(e.elem, e.prop, e.now + e.unit);
            }
        }
    }, V.propHooks.scrollTop = V.propHooks.scrollLeft = {
        set: function(e) {
            e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);
        }
    }, de.easing = {
        linear: function(e) {
            return e;
        },
        swing: function(e) {
            return .5 - Math.cos(e * Math.PI) / 2;
        },
        _default: "swing"
    }, de.fx = V.prototype.init, de.fx.step = {};
    var pt, dt, mt = /^(?:toggle|show|hide)$/, gt = /queueHooks$/;
    de.Animation = de.extend(G, {
        tweeners: {
            "*": [ function(e, t) {
                var n = this.createTween(e, t);
                return m(n.elem, e, Ve.exec(t), n), n;
            } ]
        },
        tweener: function(e, t) {
            de.isFunction(e) ? (t = e, e = [ "*" ]) : e = e.match(Oe);
            for (var n, r = 0, i = e.length; r < i; r++) n = e[r], G.tweeners[n] = G.tweeners[n] || [], 
            G.tweeners[n].unshift(t);
        },
        prefilters: [ B ],
        prefilter: function(e, t) {
            t ? G.prefilters.unshift(e) : G.prefilters.push(e);
        }
    }), de.speed = function(e, t, n) {
        var r = e && "object" == typeof e ? de.extend({}, e) : {
            complete: n || !n && t || de.isFunction(e) && e,
            duration: e,
            easing: n && t || t && !de.isFunction(t) && t
        };
        return de.fx.off ? r.duration = 0 : "number" != typeof r.duration && (r.duration in de.fx.speeds ? r.duration = de.fx.speeds[r.duration] : r.duration = de.fx.speeds._default), 
        null != r.queue && !0 !== r.queue || (r.queue = "fx"), r.old = r.complete, r.complete = function() {
            de.isFunction(r.old) && r.old.call(this), r.queue && de.dequeue(this, r.queue);
        }, r;
    }, de.fn.extend({
        fadeTo: function(e, t, n, r) {
            return this.filter(Fe).css("opacity", 0).show().end().animate({
                opacity: t
            }, e, n, r);
        },
        animate: function(e, t, n, r) {
            var i = de.isEmptyObject(e), o = de.speed(t, n, r), a = function() {
                var t = G(this, de.extend({}, e), o);
                (i || je.get(this, "finish")) && t.stop(!0);
            };
            return a.finish = a, i || !1 === o.queue ? this.each(a) : this.queue(o.queue, a);
        },
        stop: function(e, t, n) {
            var r = function(e) {
                var t = e.stop;
                delete e.stop, t(n);
            };
            return "string" != typeof e && (n = t, t = e, e = void 0), t && !1 !== e && this.queue(e || "fx", []), 
            this.each(function() {
                var t = !0, i = null != e && e + "queueHooks", o = de.timers, a = je.get(this);
                if (i) a[i] && a[i].stop && r(a[i]); else for (i in a) a[i] && a[i].stop && gt.test(i) && r(a[i]);
                for (i = o.length; i--; ) o[i].elem !== this || null != e && o[i].queue !== e || (o[i].anim.stop(n), 
                t = !1, o.splice(i, 1));
                !t && n || de.dequeue(this, e);
            });
        },
        finish: function(e) {
            return !1 !== e && (e = e || "fx"), this.each(function() {
                var t, n = je.get(this), r = n[e + "queue"], i = n[e + "queueHooks"], o = de.timers, a = r ? r.length : 0;
                for (n.finish = !0, de.queue(this, e, []), i && i.stop && i.stop.call(this, !0), 
                t = o.length; t--; ) o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0), 
                o.splice(t, 1));
                for (t = 0; t < a; t++) r[t] && r[t].finish && r[t].finish.call(this);
                delete n.finish;
            });
        }
    }), de.each([ "toggle", "show", "hide" ], function(e, t) {
        var n = de.fn[t];
        de.fn[t] = function(e, r, i) {
            return null == e || "boolean" == typeof e ? n.apply(this, arguments) : this.animate(U(t, !0), e, r, i);
        };
    }), de.each({
        slideDown: U("show"),
        slideUp: U("hide"),
        slideToggle: U("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(e, t) {
        de.fn[e] = function(e, n, r) {
            return this.animate(t, e, n, r);
        };
    }), de.timers = [], de.fx.tick = function() {
        var e, t = 0, n = de.timers;
        for (pt = de.now(); t < n.length; t++) (e = n[t])() || n[t] !== e || n.splice(t--, 1);
        n.length || de.fx.stop(), pt = void 0;
    }, de.fx.timer = function(e) {
        de.timers.push(e), de.fx.start();
    }, de.fx.interval = 13, de.fx.start = function() {
        dt || (dt = !0, H());
    }, de.fx.stop = function() {
        dt = null;
    }, de.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    }, de.fn.delay = function(t, n) {
        return t = de.fx ? de.fx.speeds[t] || t : t, n = n || "fx", this.queue(n, function(n, r) {
            var i = e.setTimeout(n, t);
            r.stop = function() {
                e.clearTimeout(i);
            };
        });
    }, function() {
        var e = ne.createElement("input"), t = ne.createElement("select"), n = t.appendChild(ne.createElement("option"));
        e.type = "checkbox", pe.checkOn = "" !== e.value, pe.optSelected = n.selected, e = ne.createElement("input"), 
        e.value = "t", e.type = "radio", pe.radioValue = "t" === e.value;
    }();
    var vt, $t = de.expr.attrHandle;
    de.fn.extend({
        attr: function(e, t) {
            return De(this, de.attr, e, t, arguments.length > 1);
        },
        removeAttr: function(e) {
            return this.each(function() {
                de.removeAttr(this, e);
            });
        }
    }), de.extend({
        attr: function(e, t, n) {
            var r, i, o = e.nodeType;
            if (3 !== o && 8 !== o && 2 !== o) return void 0 === e.getAttribute ? de.prop(e, t, n) : (1 === o && de.isXMLDoc(e) || (i = de.attrHooks[t.toLowerCase()] || (de.expr.match.bool.test(t) ? vt : void 0)), 
            void 0 !== n ? null === n ? void de.removeAttr(e, t) : i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, n + ""), 
            n) : i && "get" in i && null !== (r = i.get(e, t)) ? r : (r = de.find.attr(e, t), 
            null == r ? void 0 : r));
        },
        attrHooks: {
            type: {
                set: function(e, t) {
                    if (!pe.radioValue && "radio" === t && i(e, "input")) {
                        var n = e.value;
                        return e.setAttribute("type", t), n && (e.value = n), t;
                    }
                }
            }
        },
        removeAttr: function(e, t) {
            var n, r = 0, i = t && t.match(Oe);
            if (i && 1 === e.nodeType) for (;n = i[r++]; ) e.removeAttribute(n);
        }
    }), vt = {
        set: function(e, t, n) {
            return !1 === t ? de.removeAttr(e, n) : e.setAttribute(n, n), n;
        }
    }, de.each(de.expr.match.bool.source.match(/\w+/g), function(e, t) {
        var n = $t[t] || de.find.attr;
        $t[t] = function(e, t, r) {
            var i, o, a = t.toLowerCase();
            return r || (o = $t[a], $t[a] = i, i = null != n(e, t, r) ? a : null, $t[a] = o), 
            i;
        };
    });
    var yt = /^(?:input|select|textarea|button)$/i, bt = /^(?:a|area)$/i;
    de.fn.extend({
        prop: function(e, t) {
            return De(this, de.prop, e, t, arguments.length > 1);
        },
        removeProp: function(e) {
            return this.each(function() {
                delete this[de.propFix[e] || e];
            });
        }
    }), de.extend({
        prop: function(e, t, n) {
            var r, i, o = e.nodeType;
            if (3 !== o && 8 !== o && 2 !== o) return 1 === o && de.isXMLDoc(e) || (t = de.propFix[t] || t, 
            i = de.propHooks[t]), void 0 !== n ? i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && "get" in i && null !== (r = i.get(e, t)) ? r : e[t];
        },
        propHooks: {
            tabIndex: {
                get: function(e) {
                    var t = de.find.attr(e, "tabindex");
                    return t ? parseInt(t, 10) : yt.test(e.nodeName) || bt.test(e.nodeName) && e.href ? 0 : -1;
                }
            }
        },
        propFix: {
            for: "htmlFor",
            class: "className"
        }
    }), pe.optSelected || (de.propHooks.selected = {
        get: function(e) {
            var t = e.parentNode;
            return t && t.parentNode && t.parentNode.selectedIndex, null;
        },
        set: function(e) {
            var t = e.parentNode;
            t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex);
        }
    }), de.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        de.propFix[this.toLowerCase()] = this;
    }), de.fn.extend({
        addClass: function(e) {
            var t, n, r, i, o, a, s, u = 0;
            if (de.isFunction(e)) return this.each(function(t) {
                de(this).addClass(e.call(this, t, K(this)));
            });
            if ("string" == typeof e && e) for (t = e.match(Oe) || []; n = this[u++]; ) if (i = K(n), 
            r = 1 === n.nodeType && " " + z(i) + " ") {
                for (a = 0; o = t[a++]; ) r.indexOf(" " + o + " ") < 0 && (r += o + " ");
                s = z(r), i !== s && n.setAttribute("class", s);
            }
            return this;
        },
        removeClass: function(e) {
            var t, n, r, i, o, a, s, u = 0;
            if (de.isFunction(e)) return this.each(function(t) {
                de(this).removeClass(e.call(this, t, K(this)));
            });
            if (!arguments.length) return this.attr("class", "");
            if ("string" == typeof e && e) for (t = e.match(Oe) || []; n = this[u++]; ) if (i = K(n), 
            r = 1 === n.nodeType && " " + z(i) + " ") {
                for (a = 0; o = t[a++]; ) for (;r.indexOf(" " + o + " ") > -1; ) r = r.replace(" " + o + " ", " ");
                s = z(r), i !== s && n.setAttribute("class", s);
            }
            return this;
        },
        toggleClass: function(e, t) {
            var n = typeof e;
            return "boolean" == typeof t && "string" === n ? t ? this.addClass(e) : this.removeClass(e) : de.isFunction(e) ? this.each(function(n) {
                de(this).toggleClass(e.call(this, n, K(this), t), t);
            }) : this.each(function() {
                var t, r, i, o;
                if ("string" === n) for (r = 0, i = de(this), o = e.match(Oe) || []; t = o[r++]; ) i.hasClass(t) ? i.removeClass(t) : i.addClass(t); else void 0 !== e && "boolean" !== n || (t = K(this), 
                t && je.set(this, "__className__", t), this.setAttribute && this.setAttribute("class", t || !1 === e ? "" : je.get(this, "__className__") || ""));
            });
        },
        hasClass: function(e) {
            var t, n, r = 0;
            for (t = " " + e + " "; n = this[r++]; ) if (1 === n.nodeType && (" " + z(K(n)) + " ").indexOf(t) > -1) return !0;
            return !1;
        }
    });
    var wt = /\r/g;
    de.fn.extend({
        val: function(e) {
            var t, n, r, i = this[0];
            {
                if (arguments.length) return r = de.isFunction(e), this.each(function(n) {
                    var i;
                    1 === this.nodeType && (i = r ? e.call(this, n, de(this).val()) : e, null == i ? i = "" : "number" == typeof i ? i += "" : Array.isArray(i) && (i = de.map(i, function(e) {
                        return null == e ? "" : e + "";
                    })), (t = de.valHooks[this.type] || de.valHooks[this.nodeName.toLowerCase()]) && "set" in t && void 0 !== t.set(this, i, "value") || (this.value = i));
                });
                if (i) return (t = de.valHooks[i.type] || de.valHooks[i.nodeName.toLowerCase()]) && "get" in t && void 0 !== (n = t.get(i, "value")) ? n : (n = i.value, 
                "string" == typeof n ? n.replace(wt, "") : null == n ? "" : n);
            }
        }
    }), de.extend({
        valHooks: {
            option: {
                get: function(e) {
                    var t = de.find.attr(e, "value");
                    return null != t ? t : z(de.text(e));
                }
            },
            select: {
                get: function(e) {
                    var t, n, r, o = e.options, a = e.selectedIndex, s = "select-one" === e.type, u = s ? null : [], l = s ? a + 1 : o.length;
                    for (r = a < 0 ? l : s ? a : 0; r < l; r++) if (n = o[r], (n.selected || r === a) && !n.disabled && (!n.parentNode.disabled || !i(n.parentNode, "optgroup"))) {
                        if (t = de(n).val(), s) return t;
                        u.push(t);
                    }
                    return u;
                },
                set: function(e, t) {
                    for (var n, r, i = e.options, o = de.makeArray(t), a = i.length; a--; ) r = i[a], 
                    (r.selected = de.inArray(de.valHooks.option.get(r), o) > -1) && (n = !0);
                    return n || (e.selectedIndex = -1), o;
                }
            }
        }
    }), de.each([ "radio", "checkbox" ], function() {
        de.valHooks[this] = {
            set: function(e, t) {
                if (Array.isArray(t)) return e.checked = de.inArray(de(e).val(), t) > -1;
            }
        }, pe.checkOn || (de.valHooks[this].get = function(e) {
            return null === e.getAttribute("value") ? "on" : e.value;
        });
    });
    var Et = /^(?:focusinfocus|focusoutblur)$/;
    de.extend(de.event, {
        trigger: function(t, n, r, i) {
            var o, a, s, u, l, c, f, h = [ r || ne ], p = ce.call(t, "type") ? t.type : t, d = ce.call(t, "namespace") ? t.namespace.split(".") : [];
            if (a = s = r = r || ne, 3 !== r.nodeType && 8 !== r.nodeType && !Et.test(p + de.event.triggered) && (p.indexOf(".") > -1 && (d = p.split("."), 
            p = d.shift(), d.sort()), l = p.indexOf(":") < 0 && "on" + p, t = t[de.expando] ? t : new de.Event(p, "object" == typeof t && t), 
            t.isTrigger = i ? 2 : 3, t.namespace = d.join("."), t.rnamespace = t.namespace ? new RegExp("(^|\\.)" + d.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, 
            t.result = void 0, t.target || (t.target = r), n = null == n ? [ t ] : de.makeArray(n, [ t ]), 
            f = de.event.special[p] || {}, i || !f.trigger || !1 !== f.trigger.apply(r, n))) {
                if (!i && !f.noBubble && !de.isWindow(r)) {
                    for (u = f.delegateType || p, Et.test(u + p) || (a = a.parentNode); a; a = a.parentNode) h.push(a), 
                    s = a;
                    s === (r.ownerDocument || ne) && h.push(s.defaultView || s.parentWindow || e);
                }
                for (o = 0; (a = h[o++]) && !t.isPropagationStopped(); ) t.type = o > 1 ? u : f.bindType || p, 
                c = (je.get(a, "events") || {})[t.type] && je.get(a, "handle"), c && c.apply(a, n), 
                (c = l && a[l]) && c.apply && Ne(a) && (t.result = c.apply(a, n), !1 === t.result && t.preventDefault());
                return t.type = p, i || t.isDefaultPrevented() || f._default && !1 !== f._default.apply(h.pop(), n) || !Ne(r) || l && de.isFunction(r[p]) && !de.isWindow(r) && (s = r[l], 
                s && (r[l] = null), de.event.triggered = p, r[p](), de.event.triggered = void 0, 
                s && (r[l] = s)), t.result;
            }
        },
        simulate: function(e, t, n) {
            var r = de.extend(new de.Event(), n, {
                type: e,
                isSimulated: !0
            });
            de.event.trigger(r, null, t);
        }
    }), de.fn.extend({
        trigger: function(e, t) {
            return this.each(function() {
                de.event.trigger(e, t, this);
            });
        },
        triggerHandler: function(e, t) {
            var n = this[0];
            if (n) return de.event.trigger(e, t, n, !0);
        }
    }), de.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(e, t) {
        de.fn[t] = function(e, n) {
            return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t);
        };
    }), de.fn.extend({
        hover: function(e, t) {
            return this.mouseenter(e).mouseleave(t || e);
        }
    }), pe.focusin = "onfocusin" in e, pe.focusin || de.each({
        focus: "focusin",
        blur: "focusout"
    }, function(e, t) {
        var n = function(e) {
            de.event.simulate(t, e.target, de.event.fix(e));
        };
        de.event.special[t] = {
            setup: function() {
                var r = this.ownerDocument || this, i = je.access(r, t);
                i || r.addEventListener(e, n, !0), je.access(r, t, (i || 0) + 1);
            },
            teardown: function() {
                var r = this.ownerDocument || this, i = je.access(r, t) - 1;
                i ? je.access(r, t, i) : (r.removeEventListener(e, n, !0), je.remove(r, t));
            }
        };
    });
    var xt = e.location, Ct = de.now(), St = /\?/;
    de.parseXML = function(t) {
        var n;
        if (!t || "string" != typeof t) return null;
        try {
            n = new e.DOMParser().parseFromString(t, "text/xml");
        } catch (e) {
            n = void 0;
        }
        return n && !n.getElementsByTagName("parsererror").length || de.error("Invalid XML: " + t), 
        n;
    };
    var Tt = /\[\]$/, _t = /\r?\n/g, At = /^(?:submit|button|image|reset|file)$/i, Ot = /^(?:input|select|textarea|keygen)/i;
    de.param = function(e, t) {
        var n, r = [], i = function(e, t) {
            var n = de.isFunction(t) ? t() : t;
            r[r.length] = encodeURIComponent(e) + "=" + encodeURIComponent(null == n ? "" : n);
        };
        if (Array.isArray(e) || e.jquery && !de.isPlainObject(e)) de.each(e, function() {
            i(this.name, this.value);
        }); else for (n in e) Q(n, e[n], t, i);
        return r.join("&");
    }, de.fn.extend({
        serialize: function() {
            return de.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var e = de.prop(this, "elements");
                return e ? de.makeArray(e) : this;
            }).filter(function() {
                var e = this.type;
                return this.name && !de(this).is(":disabled") && Ot.test(this.nodeName) && !At.test(e) && (this.checked || !Be.test(e));
            }).map(function(e, t) {
                var n = de(this).val();
                return null == n ? null : Array.isArray(n) ? de.map(n, function(e) {
                    return {
                        name: t.name,
                        value: e.replace(_t, "\r\n")
                    };
                }) : {
                    name: t.name,
                    value: n.replace(_t, "\r\n")
                };
            }).get();
        }
    });
    var kt = /%20/g, It = /#.*$/, Dt = /([?&])_=[^&]*/, Nt = /^(.*?):[ \t]*([^\r\n]*)$/gm, jt = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, Pt = /^(?:GET|HEAD)$/, Mt = /^\/\//, Lt = {}, Rt = {}, Vt = "*/".concat("*"), Ht = ne.createElement("a");
    Ht.href = xt.href, de.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: xt.href,
            type: "GET",
            isLocal: jt.test(xt.protocol),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": Vt,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": JSON.parse,
                "text xml": de.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(e, t) {
            return t ? J(J(e, de.ajaxSettings), t) : J(de.ajaxSettings, e);
        },
        ajaxPrefilter: Y(Lt),
        ajaxTransport: Y(Rt),
        ajax: function(t, n) {
            function r(t, n, r, s) {
                var l, h, p, b, w, E = n;
                c || (c = !0, u && e.clearTimeout(u), i = void 0, a = s || "", x.readyState = t > 0 ? 4 : 0, 
                l = t >= 200 && t < 300 || 304 === t, r && (b = Z(d, x, r)), b = ee(d, b, x, l), 
                l ? (d.ifModified && (w = x.getResponseHeader("Last-Modified"), w && (de.lastModified[o] = w), 
                (w = x.getResponseHeader("etag")) && (de.etag[o] = w)), 204 === t || "HEAD" === d.type ? E = "nocontent" : 304 === t ? E = "notmodified" : (E = b.state, 
                h = b.data, p = b.error, l = !p)) : (p = E, !t && E || (E = "error", t < 0 && (t = 0))), 
                x.status = t, x.statusText = (n || E) + "", l ? v.resolveWith(m, [ h, E, x ]) : v.rejectWith(m, [ x, E, p ]), 
                x.statusCode(y), y = void 0, f && g.trigger(l ? "ajaxSuccess" : "ajaxError", [ x, d, l ? h : p ]), 
                $.fireWith(m, [ x, E ]), f && (g.trigger("ajaxComplete", [ x, d ]), --de.active || de.event.trigger("ajaxStop")));
            }
            "object" == typeof t && (n = t, t = void 0), n = n || {};
            var i, o, a, s, u, l, c, f, h, p, d = de.ajaxSetup({}, n), m = d.context || d, g = d.context && (m.nodeType || m.jquery) ? de(m) : de.event, v = de.Deferred(), $ = de.Callbacks("once memory"), y = d.statusCode || {}, b = {}, w = {}, E = "canceled", x = {
                readyState: 0,
                getResponseHeader: function(e) {
                    var t;
                    if (c) {
                        if (!s) for (s = {}; t = Nt.exec(a); ) s[t[1].toLowerCase()] = t[2];
                        t = s[e.toLowerCase()];
                    }
                    return null == t ? null : t;
                },
                getAllResponseHeaders: function() {
                    return c ? a : null;
                },
                setRequestHeader: function(e, t) {
                    return null == c && (e = w[e.toLowerCase()] = w[e.toLowerCase()] || e, b[e] = t), 
                    this;
                },
                overrideMimeType: function(e) {
                    return null == c && (d.mimeType = e), this;
                },
                statusCode: function(e) {
                    var t;
                    if (e) if (c) x.always(e[x.status]); else for (t in e) y[t] = [ y[t], e[t] ];
                    return this;
                },
                abort: function(e) {
                    var t = e || E;
                    return i && i.abort(t), r(0, t), this;
                }
            };
            if (v.promise(x), d.url = ((t || d.url || xt.href) + "").replace(Mt, xt.protocol + "//"), 
            d.type = n.method || n.type || d.method || d.type, d.dataTypes = (d.dataType || "*").toLowerCase().match(Oe) || [ "" ], 
            null == d.crossDomain) {
                l = ne.createElement("a");
                try {
                    l.href = d.url, l.href = l.href, d.crossDomain = Ht.protocol + "//" + Ht.host != l.protocol + "//" + l.host;
                } catch (e) {
                    d.crossDomain = !0;
                }
            }
            if (d.data && d.processData && "string" != typeof d.data && (d.data = de.param(d.data, d.traditional)), 
            X(Lt, d, n, x), c) return x;
            f = de.event && d.global, f && 0 == de.active++ && de.event.trigger("ajaxStart"), 
            d.type = d.type.toUpperCase(), d.hasContent = !Pt.test(d.type), o = d.url.replace(It, ""), 
            d.hasContent ? d.data && d.processData && 0 === (d.contentType || "").indexOf("application/x-www-form-urlencoded") && (d.data = d.data.replace(kt, "+")) : (p = d.url.slice(o.length), 
            d.data && (o += (St.test(o) ? "&" : "?") + d.data, delete d.data), !1 === d.cache && (o = o.replace(Dt, "$1"), 
            p = (St.test(o) ? "&" : "?") + "_=" + Ct++ + p), d.url = o + p), d.ifModified && (de.lastModified[o] && x.setRequestHeader("If-Modified-Since", de.lastModified[o]), 
            de.etag[o] && x.setRequestHeader("If-None-Match", de.etag[o])), (d.data && d.hasContent && !1 !== d.contentType || n.contentType) && x.setRequestHeader("Content-Type", d.contentType), 
            x.setRequestHeader("Accept", d.dataTypes[0] && d.accepts[d.dataTypes[0]] ? d.accepts[d.dataTypes[0]] + ("*" !== d.dataTypes[0] ? ", " + Vt + "; q=0.01" : "") : d.accepts["*"]);
            for (h in d.headers) x.setRequestHeader(h, d.headers[h]);
            if (d.beforeSend && (!1 === d.beforeSend.call(m, x, d) || c)) return x.abort();
            if (E = "abort", $.add(d.complete), x.done(d.success), x.fail(d.error), i = X(Rt, d, n, x)) {
                if (x.readyState = 1, f && g.trigger("ajaxSend", [ x, d ]), c) return x;
                d.async && d.timeout > 0 && (u = e.setTimeout(function() {
                    x.abort("timeout");
                }, d.timeout));
                try {
                    c = !1, i.send(b, r);
                } catch (e) {
                    if (c) throw e;
                    r(-1, e);
                }
            } else r(-1, "No Transport");
            return x;
        },
        getJSON: function(e, t, n) {
            return de.get(e, t, n, "json");
        },
        getScript: function(e, t) {
            return de.get(e, void 0, t, "script");
        }
    }), de.each([ "get", "post" ], function(e, t) {
        de[t] = function(e, n, r, i) {
            return de.isFunction(n) && (i = i || r, r = n, n = void 0), de.ajax(de.extend({
                url: e,
                type: t,
                dataType: i,
                data: n,
                success: r
            }, de.isPlainObject(e) && e));
        };
    }), de._evalUrl = function(e) {
        return de.ajax({
            url: e,
            type: "GET",
            dataType: "script",
            cache: !0,
            async: !1,
            global: !1,
            throws: !0
        });
    }, de.fn.extend({
        wrapAll: function(e) {
            var t;
            return this[0] && (de.isFunction(e) && (e = e.call(this[0])), t = de(e, this[0].ownerDocument).eq(0).clone(!0), 
            this[0].parentNode && t.insertBefore(this[0]), t.map(function() {
                for (var e = this; e.firstElementChild; ) e = e.firstElementChild;
                return e;
            }).append(this)), this;
        },
        wrapInner: function(e) {
            return de.isFunction(e) ? this.each(function(t) {
                de(this).wrapInner(e.call(this, t));
            }) : this.each(function() {
                var t = de(this), n = t.contents();
                n.length ? n.wrapAll(e) : t.append(e);
            });
        },
        wrap: function(e) {
            var t = de.isFunction(e);
            return this.each(function(n) {
                de(this).wrapAll(t ? e.call(this, n) : e);
            });
        },
        unwrap: function(e) {
            return this.parent(e).not("body").each(function() {
                de(this).replaceWith(this.childNodes);
            }), this;
        }
    }), de.expr.pseudos.hidden = function(e) {
        return !de.expr.pseudos.visible(e);
    }, de.expr.pseudos.visible = function(e) {
        return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);
    }, de.ajaxSettings.xhr = function() {
        try {
            return new e.XMLHttpRequest();
        } catch (e) {}
    };
    var Ft = {
        0: 200,
        1223: 204
    }, Ut = de.ajaxSettings.xhr();
    pe.cors = !!Ut && "withCredentials" in Ut, pe.ajax = Ut = !!Ut, de.ajaxTransport(function(t) {
        var n, r;
        if (pe.cors || Ut && !t.crossDomain) return {
            send: function(i, o) {
                var a, s = t.xhr();
                if (s.open(t.type, t.url, t.async, t.username, t.password), t.xhrFields) for (a in t.xhrFields) s[a] = t.xhrFields[a];
                t.mimeType && s.overrideMimeType && s.overrideMimeType(t.mimeType), t.crossDomain || i["X-Requested-With"] || (i["X-Requested-With"] = "XMLHttpRequest");
                for (a in i) s.setRequestHeader(a, i[a]);
                n = function(e) {
                    return function() {
                        n && (n = r = s.onload = s.onerror = s.onabort = s.onreadystatechange = null, "abort" === e ? s.abort() : "error" === e ? "number" != typeof s.status ? o(0, "error") : o(s.status, s.statusText) : o(Ft[s.status] || s.status, s.statusText, "text" !== (s.responseType || "text") || "string" != typeof s.responseText ? {
                            binary: s.response
                        } : {
                            text: s.responseText
                        }, s.getAllResponseHeaders()));
                    };
                }, s.onload = n(), r = s.onerror = n("error"), void 0 !== s.onabort ? s.onabort = r : s.onreadystatechange = function() {
                    4 === s.readyState && e.setTimeout(function() {
                        n && r();
                    });
                }, n = n("abort");
                try {
                    s.send(t.hasContent && t.data || null);
                } catch (e) {
                    if (n) throw e;
                }
            },
            abort: function() {
                n && n();
            }
        };
    }), de.ajaxPrefilter(function(e) {
        e.crossDomain && (e.contents.script = !1);
    }), de.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(e) {
                return de.globalEval(e), e;
            }
        }
    }), de.ajaxPrefilter("script", function(e) {
        void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET");
    }), de.ajaxTransport("script", function(e) {
        if (e.crossDomain) {
            var t, n;
            return {
                send: function(r, i) {
                    t = de("<script>").prop({
                        charset: e.scriptCharset,
                        src: e.url
                    }).on("load error", n = function(e) {
                        t.remove(), n = null, e && i("error" === e.type ? 404 : 200, e.type);
                    }), ne.head.appendChild(t[0]);
                },
                abort: function() {
                    n && n();
                }
            };
        }
    });
    var qt = [], Bt = /(=)\?(?=&|$)|\?\?/;
    de.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var e = qt.pop() || de.expando + "_" + Ct++;
            return this[e] = !0, e;
        }
    }), de.ajaxPrefilter("json jsonp", function(t, n, r) {
        var i, o, a, s = !1 !== t.jsonp && (Bt.test(t.url) ? "url" : "string" == typeof t.data && 0 === (t.contentType || "").indexOf("application/x-www-form-urlencoded") && Bt.test(t.data) && "data");
        if (s || "jsonp" === t.dataTypes[0]) return i = t.jsonpCallback = de.isFunction(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback, 
        s ? t[s] = t[s].replace(Bt, "$1" + i) : !1 !== t.jsonp && (t.url += (St.test(t.url) ? "&" : "?") + t.jsonp + "=" + i), 
        t.converters["script json"] = function() {
            return a || de.error(i + " was not called"), a[0];
        }, t.dataTypes[0] = "json", o = e[i], e[i] = function() {
            a = arguments;
        }, r.always(function() {
            void 0 === o ? de(e).removeProp(i) : e[i] = o, t[i] && (t.jsonpCallback = n.jsonpCallback, 
            qt.push(i)), a && de.isFunction(o) && o(a[0]), a = o = void 0;
        }), "script";
    }), pe.createHTMLDocument = function() {
        var e = ne.implementation.createHTMLDocument("").body;
        return e.innerHTML = "<form></form><form></form>", 2 === e.childNodes.length;
    }(), de.parseHTML = function(e, t, n) {
        if ("string" != typeof e) return [];
        "boolean" == typeof t && (n = t, t = !1);
        var r, i, o;
        return t || (pe.createHTMLDocument ? (t = ne.implementation.createHTMLDocument(""), 
        r = t.createElement("base"), r.href = ne.location.href, t.head.appendChild(r)) : t = ne), 
        i = xe.exec(e), o = !n && [], i ? [ t.createElement(i[1]) ] : (i = b([ e ], t, o), 
        o && o.length && de(o).remove(), de.merge([], i.childNodes));
    }, de.fn.load = function(e, t, n) {
        var r, i, o, a = this, s = e.indexOf(" ");
        return s > -1 && (r = z(e.slice(s)), e = e.slice(0, s)), de.isFunction(t) ? (n = t, 
        t = void 0) : t && "object" == typeof t && (i = "POST"), a.length > 0 && de.ajax({
            url: e,
            type: i || "GET",
            dataType: "html",
            data: t
        }).done(function(e) {
            o = arguments, a.html(r ? de("<div>").append(de.parseHTML(e)).find(r) : e);
        }).always(n && function(e, t) {
            a.each(function() {
                n.apply(this, o || [ e.responseText, t, e ]);
            });
        }), this;
    }, de.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(e, t) {
        de.fn[t] = function(e) {
            return this.on(t, e);
        };
    }), de.expr.pseudos.animated = function(e) {
        return de.grep(de.timers, function(t) {
            return e === t.elem;
        }).length;
    }, de.offset = {
        setOffset: function(e, t, n) {
            var r, i, o, a, s, u, l, c = de.css(e, "position"), f = de(e), h = {};
            "static" === c && (e.style.position = "relative"), s = f.offset(), o = de.css(e, "top"), 
            u = de.css(e, "left"), l = ("absolute" === c || "fixed" === c) && (o + u).indexOf("auto") > -1, 
            l ? (r = f.position(), a = r.top, i = r.left) : (a = parseFloat(o) || 0, i = parseFloat(u) || 0), 
            de.isFunction(t) && (t = t.call(e, n, de.extend({}, s))), null != t.top && (h.top = t.top - s.top + a), 
            null != t.left && (h.left = t.left - s.left + i), "using" in t ? t.using.call(e, h) : f.css(h);
        }
    }, de.fn.extend({
        offset: function(e) {
            if (arguments.length) return void 0 === e ? this : this.each(function(t) {
                de.offset.setOffset(this, e, t);
            });
            var t, n, r, i, o = this[0];
            if (o) return o.getClientRects().length ? (r = o.getBoundingClientRect(), t = o.ownerDocument, 
            n = t.documentElement, i = t.defaultView, {
                top: r.top + i.pageYOffset - n.clientTop,
                left: r.left + i.pageXOffset - n.clientLeft
            }) : {
                top: 0,
                left: 0
            };
        },
        position: function() {
            if (this[0]) {
                var e, t, n = this[0], r = {
                    top: 0,
                    left: 0
                };
                return "fixed" === de.css(n, "position") ? t = n.getBoundingClientRect() : (e = this.offsetParent(), 
                t = this.offset(), i(e[0], "html") || (r = e.offset()), r = {
                    top: r.top + de.css(e[0], "borderTopWidth", !0),
                    left: r.left + de.css(e[0], "borderLeftWidth", !0)
                }), {
                    top: t.top - r.top - de.css(n, "marginTop", !0),
                    left: t.left - r.left - de.css(n, "marginLeft", !0)
                };
            }
        },
        offsetParent: function() {
            return this.map(function() {
                for (var e = this.offsetParent; e && "static" === de.css(e, "position"); ) e = e.offsetParent;
                return e || Qe;
            });
        }
    }), de.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(e, t) {
        var n = "pageYOffset" === t;
        de.fn[e] = function(r) {
            return De(this, function(e, r, i) {
                var o;
                if (de.isWindow(e) ? o = e : 9 === e.nodeType && (o = e.defaultView), void 0 === i) return o ? o[t] : e[r];
                o ? o.scrollTo(n ? o.pageXOffset : i, n ? i : o.pageYOffset) : e[r] = i;
            }, e, r, arguments.length);
        };
    }), de.each([ "top", "left" ], function(e, t) {
        de.cssHooks[t] = N(pe.pixelPosition, function(e, n) {
            if (n) return n = D(e, t), ot.test(n) ? de(e).position()[t] + "px" : n;
        });
    }), de.each({
        Height: "height",
        Width: "width"
    }, function(e, t) {
        de.each({
            padding: "inner" + e,
            content: t,
            "": "outer" + e
        }, function(n, r) {
            de.fn[r] = function(i, o) {
                var a = arguments.length && (n || "boolean" != typeof i), s = n || (!0 === i || !0 === o ? "margin" : "border");
                return De(this, function(t, n, i) {
                    var o;
                    return de.isWindow(t) ? 0 === r.indexOf("outer") ? t["inner" + e] : t.document.documentElement["client" + e] : 9 === t.nodeType ? (o = t.documentElement, 
                    Math.max(t.body["scroll" + e], o["scroll" + e], t.body["offset" + e], o["offset" + e], o["client" + e])) : void 0 === i ? de.css(t, n, s) : de.style(t, n, i, s);
                }, t, a ? i : void 0, a);
            };
        });
    }), de.fn.extend({
        bind: function(e, t, n) {
            return this.on(e, null, t, n);
        },
        unbind: function(e, t) {
            return this.off(e, null, t);
        },
        delegate: function(e, t, n, r) {
            return this.on(t, e, n, r);
        },
        undelegate: function(e, t, n) {
            return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n);
        }
    }), de.holdReady = function(e) {
        e ? de.readyWait++ : de.ready(!0);
    }, de.isArray = Array.isArray, de.parseJSON = JSON.parse, de.nodeName = i, "function" == typeof define && define.amd && define("jquery", [], function() {
        return de;
    });
    var Wt = e.jQuery, Gt = e.$;
    return de.noConflict = function(t) {
        return e.$ === de && (e.$ = Gt), t && e.jQuery === de && (e.jQuery = Wt), de;
    }, t || (e.jQuery = e.$ = de), de;
}), function(e, t) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : e.Popper = t();
}(this, function() {
    "use strict";
    function e(e) {
        var t = !1, n = 0, r = document.createElement("span");
        return new MutationObserver(function() {
            e(), t = !1;
        }).observe(r, {
            attributes: !0
        }), function() {
            t || (t = !0, r.setAttribute("x-index", n), n += 1);
        };
    }
    function t(e) {
        var t = !1;
        return function() {
            t || (t = !0, setTimeout(function() {
                t = !1, e();
            }, se));
        };
    }
    function n(e) {
        var t = {};
        return e && "[object Function]" === t.toString.call(e);
    }
    function r(e, t) {
        if (1 !== e.nodeType) return [];
        var n = window.getComputedStyle(e, null);
        return t ? n[t] : n;
    }
    function i(e) {
        return "HTML" === e.nodeName ? e : e.parentNode || e.host;
    }
    function o(e) {
        if (!e || -1 !== [ "HTML", "BODY", "#document" ].indexOf(e.nodeName)) return window.document.body;
        var t = r(e), n = t.overflow, a = t.overflowX;
        return /(auto|scroll)/.test(n + t.overflowY + a) ? e : o(i(e));
    }
    function a(e) {
        var t = e && e.offsetParent, n = t && t.nodeName;
        return n && "BODY" !== n && "HTML" !== n ? -1 !== [ "TD", "TABLE" ].indexOf(t.nodeName) && "static" === r(t, "position") ? a(t) : t : window.document.documentElement;
    }
    function s(e) {
        var t = e.nodeName;
        return "BODY" !== t && ("HTML" === t || a(e.firstElementChild) === e);
    }
    function u(e) {
        return null !== e.parentNode ? u(e.parentNode) : e;
    }
    function l(e, t) {
        if (!(e && e.nodeType && t && t.nodeType)) return window.document.documentElement;
        var n = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING, r = n ? e : t, i = n ? t : e, o = document.createRange();
        o.setStart(r, 0), o.setEnd(i, 0);
        var c = o.commonAncestorContainer;
        if (e !== c && t !== c || r.contains(i)) return s(c) ? c : a(c);
        var f = u(e);
        return f.host ? l(f.host, t) : l(e, u(t).host);
    }
    function c(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "top", n = "top" === t ? "scrollTop" : "scrollLeft", r = e.nodeName;
        if ("BODY" === r || "HTML" === r) {
            var i = window.document.documentElement;
            return (window.document.scrollingElement || i)[n];
        }
        return e[n];
    }
    function f(e, t) {
        var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], r = c(t, "top"), i = c(t, "left"), o = n ? -1 : 1;
        return e.top += r * o, e.bottom += r * o, e.left += i * o, e.right += i * o, e;
    }
    function h(e, t) {
        var n = "x" === t ? "Left" : "Top", r = "Left" === n ? "Right" : "Bottom";
        return +e["border" + n + "Width"].split("px")[0] + +e["border" + r + "Width"].split("px")[0];
    }
    function p(e, t, n, r) {
        return Math.max(t["offset" + e], t["scroll" + e], n["client" + e], n["offset" + e], n["scroll" + e], he() ? n["offset" + e] + r["margin" + ("Height" === e ? "Top" : "Left")] + r["margin" + ("Height" === e ? "Bottom" : "Right")] : 0);
    }
    function d() {
        var e = window.document.body, t = window.document.documentElement, n = he() && window.getComputedStyle(t);
        return {
            height: p("Height", e, t, n),
            width: p("Width", e, t, n)
        };
    }
    function m(e) {
        return ge({}, e, {
            right: e.left + e.width,
            bottom: e.top + e.height
        });
    }
    function g(e) {
        var t = {};
        if (he()) try {
            t = e.getBoundingClientRect();
            var n = c(e, "top"), i = c(e, "left");
            t.top += n, t.left += i, t.bottom += n, t.right += i;
        } catch (e) {} else t = e.getBoundingClientRect();
        var o = {
            left: t.left,
            top: t.top,
            width: t.right - t.left,
            height: t.bottom - t.top
        }, a = "HTML" === e.nodeName ? d() : {}, s = a.width || e.clientWidth || o.right - o.left, u = a.height || e.clientHeight || o.bottom - o.top, l = e.offsetWidth - s, f = e.offsetHeight - u;
        if (l || f) {
            var p = r(e);
            l -= h(p, "x"), f -= h(p, "y"), o.width -= l, o.height -= f;
        }
        return m(o);
    }
    function v(e, t) {
        var n = he(), i = "HTML" === t.nodeName, a = g(e), s = g(t), u = o(e), l = r(t), c = +l.borderTopWidth.split("px")[0], h = +l.borderLeftWidth.split("px")[0], p = m({
            top: a.top - s.top - c,
            left: a.left - s.left - h,
            width: a.width,
            height: a.height
        });
        if (p.marginTop = 0, p.marginLeft = 0, !n && i) {
            var d = +l.marginTop.split("px")[0], v = +l.marginLeft.split("px")[0];
            p.top -= c - d, p.bottom -= c - d, p.left -= h - v, p.right -= h - v, p.marginTop = d, 
            p.marginLeft = v;
        }
        return (n ? t.contains(u) : t === u && "BODY" !== u.nodeName) && (p = f(p, t)), 
        p;
    }
    function $(e) {
        var t = window.document.documentElement, n = v(e, t), r = Math.max(t.clientWidth, window.innerWidth || 0), i = Math.max(t.clientHeight, window.innerHeight || 0), o = c(t), a = c(t, "left");
        return m({
            top: o - n.top + n.marginTop,
            left: a - n.left + n.marginLeft,
            width: r,
            height: i
        });
    }
    function y(e) {
        var t = e.nodeName;
        return "BODY" !== t && "HTML" !== t && ("fixed" === r(e, "position") || y(i(e)));
    }
    function b(e, t, n, r) {
        var a = {
            top: 0,
            left: 0
        }, s = l(e, t);
        if ("viewport" === r) a = $(s); else {
            var u = void 0;
            "scrollParent" === r ? (u = o(i(e)), "BODY" === u.nodeName && (u = window.document.documentElement)) : u = "window" === r ? window.document.documentElement : r;
            var c = v(u, s);
            if ("HTML" !== u.nodeName || y(s)) a = c; else {
                var f = d(), h = f.height, p = f.width;
                a.top += c.top - c.marginTop, a.bottom = h + c.top, a.left += c.left - c.marginLeft, 
                a.right = p + c.left;
            }
        }
        return a.left += n, a.top += n, a.right -= n, a.bottom -= n, a;
    }
    function w(e) {
        return e.width * e.height;
    }
    function E(e, t, n, r, i) {
        var o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;
        if (-1 === e.indexOf("auto")) return e;
        var a = b(n, r, o, i), s = {
            top: {
                width: a.width,
                height: t.top - a.top
            },
            right: {
                width: a.right - t.right,
                height: a.height
            },
            bottom: {
                width: a.width,
                height: a.bottom - t.bottom
            },
            left: {
                width: t.left - a.left,
                height: a.height
            }
        }, u = Object.keys(s).map(function(e) {
            return ge({
                key: e
            }, s[e], {
                area: w(s[e])
            });
        }).sort(function(e, t) {
            return t.area - e.area;
        }), l = u.filter(function(e) {
            var t = e.width, r = e.height;
            return t >= n.clientWidth && r >= n.clientHeight;
        }), c = l.length > 0 ? l[0].key : u[0].key, f = e.split("-")[1];
        return c + (f ? "-" + f : "");
    }
    function x(e, t, n) {
        return v(n, l(t, n));
    }
    function C(e) {
        var t = window.getComputedStyle(e), n = parseFloat(t.marginTop) + parseFloat(t.marginBottom), r = parseFloat(t.marginLeft) + parseFloat(t.marginRight);
        return {
            width: e.offsetWidth + r,
            height: e.offsetHeight + n
        };
    }
    function S(e) {
        var t = {
            left: "right",
            right: "left",
            bottom: "top",
            top: "bottom"
        };
        return e.replace(/left|right|bottom|top/g, function(e) {
            return t[e];
        });
    }
    function T(e, t, n) {
        n = n.split("-")[0];
        var r = C(e), i = {
            width: r.width,
            height: r.height
        }, o = -1 !== [ "right", "left" ].indexOf(n), a = o ? "top" : "left", s = o ? "left" : "top", u = o ? "height" : "width", l = o ? "width" : "height";
        return i[a] = t[a] + t[u] / 2 - r[u] / 2, i[s] = n === s ? t[s] - r[l] : t[S(s)], 
        i;
    }
    function _(e, t) {
        return Array.prototype.find ? e.find(t) : e.filter(t)[0];
    }
    function A(e, t, n) {
        if (Array.prototype.findIndex) return e.findIndex(function(e) {
            return e[t] === n;
        });
        var r = _(e, function(e) {
            return e[t] === n;
        });
        return e.indexOf(r);
    }
    function O(e, t, r) {
        return (void 0 === r ? e : e.slice(0, A(e, "name", r))).forEach(function(e) {
            e.function && console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
            var r = e.function || e.fn;
            e.enabled && n(r) && (t.offsets.popper = m(t.offsets.popper), t.offsets.reference = m(t.offsets.reference), 
            t = r(t, e));
        }), t;
    }
    function k() {
        if (!this.state.isDestroyed) {
            var e = {
                instance: this,
                styles: {},
                arrowStyles: {},
                attributes: {},
                flipped: !1,
                offsets: {}
            };
            e.offsets.reference = x(this.state, this.popper, this.reference), e.placement = E(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), 
            e.originalPlacement = e.placement, e.offsets.popper = T(this.popper, e.offsets.reference, e.placement), 
            e.offsets.popper.position = "absolute", e = O(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, 
            this.options.onCreate(e));
        }
    }
    function I(e, t) {
        return e.some(function(e) {
            var n = e.name;
            return e.enabled && n === t;
        });
    }
    function D(e) {
        for (var t = [ !1, "ms", "Webkit", "Moz", "O" ], n = e.charAt(0).toUpperCase() + e.slice(1), r = 0; r < t.length - 1; r++) {
            var i = t[r], o = i ? "" + i + n : e;
            if (void 0 !== window.document.body.style[o]) return o;
        }
        return null;
    }
    function N() {
        return this.state.isDestroyed = !0, I(this.modifiers, "applyStyle") && (this.popper.removeAttribute("x-placement"), 
        this.popper.style.left = "", this.popper.style.position = "", this.popper.style.top = "", 
        this.popper.style[D("transform")] = ""), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), 
        this;
    }
    function j(e, t, n, r) {
        var i = "BODY" === e.nodeName, a = i ? window : e;
        a.addEventListener(t, n, {
            passive: !0
        }), i || j(o(a.parentNode), t, n, r), r.push(a);
    }
    function P(e, t, n, r) {
        n.updateBound = r, window.addEventListener("resize", n.updateBound, {
            passive: !0
        });
        var i = o(e);
        return j(i, "scroll", n.updateBound, n.scrollParents), n.scrollElement = i, n.eventsEnabled = !0, 
        n;
    }
    function M() {
        this.state.eventsEnabled || (this.state = P(this.reference, this.options, this.state, this.scheduleUpdate));
    }
    function L(e, t) {
        return window.removeEventListener("resize", t.updateBound), t.scrollParents.forEach(function(e) {
            e.removeEventListener("scroll", t.updateBound);
        }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, 
        t;
    }
    function R() {
        this.state.eventsEnabled && (window.cancelAnimationFrame(this.scheduleUpdate), this.state = L(this.reference, this.state));
    }
    function V(e) {
        return "" !== e && !isNaN(parseFloat(e)) && isFinite(e);
    }
    function H(e, t) {
        Object.keys(t).forEach(function(n) {
            var r = "";
            -1 !== [ "width", "height", "top", "right", "bottom", "left" ].indexOf(n) && V(t[n]) && (r = "px"), 
            e.style[n] = t[n] + r;
        });
    }
    function F(e, t) {
        Object.keys(t).forEach(function(n) {
            !1 !== t[n] ? e.setAttribute(n, t[n]) : e.removeAttribute(n);
        });
    }
    function U(e) {
        return H(e.instance.popper, e.styles), F(e.instance.popper, e.attributes), e.arrowElement && Object.keys(e.arrowStyles).length && H(e.arrowElement, e.arrowStyles), 
        e;
    }
    function q(e, t, n, r, i) {
        var o = x(i, t, e), a = E(n.placement, o, t, e, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);
        return t.setAttribute("x-placement", a), H(t, {
            position: "absolute"
        }), n;
    }
    function B(e, t) {
        var n = t.x, r = t.y, i = e.offsets.popper, o = _(e.instance.modifiers, function(e) {
            return "applyStyle" === e.name;
        }).gpuAcceleration;
        void 0 !== o && console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
        var s = void 0 !== o ? o : t.gpuAcceleration, u = a(e.instance.popper), l = g(u), c = {
            position: i.position
        }, f = {
            left: Math.floor(i.left),
            top: Math.floor(i.top),
            bottom: Math.floor(i.bottom),
            right: Math.floor(i.right)
        }, h = "bottom" === n ? "top" : "bottom", p = "right" === r ? "left" : "right", d = D("transform"), m = void 0, v = void 0;
        if (v = "bottom" === h ? -l.height + f.bottom : f.top, m = "right" === p ? -l.width + f.right : f.left, 
        s && d) c[d] = "translate3d(" + m + "px, " + v + "px, 0)", c[h] = 0, c[p] = 0, c.willChange = "transform"; else {
            var $ = "bottom" === h ? -1 : 1, y = "right" === p ? -1 : 1;
            c[h] = v * $, c[p] = m * y, c.willChange = h + ", " + p;
        }
        var b = {
            "x-placement": e.placement
        };
        return e.attributes = ge({}, b, e.attributes), e.styles = ge({}, c, e.styles), e.arrowStyles = ge({}, e.offsets.arrow, e.arrowStyles), 
        e;
    }
    function W(e, t, n) {
        var r = _(e, function(e) {
            return e.name === t;
        }), i = !!r && e.some(function(e) {
            return e.name === n && e.enabled && e.order < r.order;
        });
        if (!i) {
            var o = "`" + t + "`", a = "`" + n + "`";
            console.warn(a + " modifier is required by " + o + " modifier in order to work, be sure to include it before " + o + "!");
        }
        return i;
    }
    function G(e, t) {
        if (!W(e.instance.modifiers, "arrow", "keepTogether")) return e;
        var n = t.element;
        if ("string" == typeof n) {
            if (!(n = e.instance.popper.querySelector(n))) return e;
        } else if (!e.instance.popper.contains(n)) return console.warn("WARNING: `arrow.element` must be child of its popper element!"), 
        e;
        var i = e.placement.split("-")[0], o = e.offsets, a = o.popper, s = o.reference, u = -1 !== [ "left", "right" ].indexOf(i), l = u ? "height" : "width", c = u ? "Top" : "Left", f = c.toLowerCase(), h = u ? "left" : "top", p = u ? "bottom" : "right", d = C(n)[l];
        s[p] - d < a[f] && (e.offsets.popper[f] -= a[f] - (s[p] - d)), s[f] + d > a[p] && (e.offsets.popper[f] += s[f] + d - a[p]);
        var g = s[f] + s[l] / 2 - d / 2, v = r(e.instance.popper, "margin" + c).replace("px", ""), $ = g - m(e.offsets.popper)[f] - v;
        return $ = Math.max(Math.min(a[l] - d, $), 0), e.arrowElement = n, e.offsets.arrow = {}, 
        e.offsets.arrow[f] = Math.round($), e.offsets.arrow[h] = "", e;
    }
    function z(e) {
        return "end" === e ? "start" : "start" === e ? "end" : e;
    }
    function K(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n = $e.indexOf(e), r = $e.slice(n + 1).concat($e.slice(0, n));
        return t ? r.reverse() : r;
    }
    function Q(e, t) {
        if (I(e.instance.modifiers, "inner")) return e;
        if (e.flipped && e.placement === e.originalPlacement) return e;
        var n = b(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement), r = e.placement.split("-")[0], i = S(r), o = e.placement.split("-")[1] || "", a = [];
        switch (t.behavior) {
          case ye.FLIP:
            a = [ r, i ];
            break;

          case ye.CLOCKWISE:
            a = K(r);
            break;

          case ye.COUNTERCLOCKWISE:
            a = K(r, !0);
            break;

          default:
            a = t.behavior;
        }
        return a.forEach(function(s, u) {
            if (r !== s || a.length === u + 1) return e;
            r = e.placement.split("-")[0], i = S(r);
            var l = e.offsets.popper, c = e.offsets.reference, f = Math.floor, h = "left" === r && f(l.right) > f(c.left) || "right" === r && f(l.left) < f(c.right) || "top" === r && f(l.bottom) > f(c.top) || "bottom" === r && f(l.top) < f(c.bottom), p = f(l.left) < f(n.left), d = f(l.right) > f(n.right), m = f(l.top) < f(n.top), g = f(l.bottom) > f(n.bottom), v = "left" === r && p || "right" === r && d || "top" === r && m || "bottom" === r && g, $ = -1 !== [ "top", "bottom" ].indexOf(r), y = !!t.flipVariations && ($ && "start" === o && p || $ && "end" === o && d || !$ && "start" === o && m || !$ && "end" === o && g);
            (h || v || y) && (e.flipped = !0, (h || v) && (r = a[u + 1]), y && (o = z(o)), e.placement = r + (o ? "-" + o : ""), 
            e.offsets.popper = ge({}, e.offsets.popper, T(e.instance.popper, e.offsets.reference, e.placement)), 
            e = O(e.instance.modifiers, e, "flip"));
        }), e;
    }
    function Y(e) {
        var t = e.offsets, n = t.popper, r = t.reference, i = e.placement.split("-")[0], o = Math.floor, a = -1 !== [ "top", "bottom" ].indexOf(i), s = a ? "right" : "bottom", u = a ? "left" : "top", l = a ? "width" : "height";
        return n[s] < o(r[u]) && (e.offsets.popper[u] = o(r[u]) - n[l]), n[u] > o(r[s]) && (e.offsets.popper[u] = o(r[s])), 
        e;
    }
    function X(e, t, n, r) {
        var i = e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/), o = +i[1], a = i[2];
        if (!o) return e;
        if (0 === a.indexOf("%")) {
            var s = void 0;
            switch (a) {
              case "%p":
                s = n;
                break;

              case "%":
              case "%r":
              default:
                s = r;
            }
            return m(s)[t] / 100 * o;
        }
        if ("vh" === a || "vw" === a) {
            return ("vh" === a ? Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : Math.max(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * o;
        }
        return o;
    }
    function J(e, t, n, r) {
        var i = [ 0, 0 ], o = -1 !== [ "right", "left" ].indexOf(r), a = e.split(/(\+|\-)/).map(function(e) {
            return e.trim();
        }), s = a.indexOf(_(a, function(e) {
            return -1 !== e.search(/,|\s/);
        }));
        a[s] && -1 === a[s].indexOf(",") && console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
        var u = /\s*,\s*|\s+/, l = -1 !== s ? [ a.slice(0, s).concat([ a[s].split(u)[0] ]), [ a[s].split(u)[1] ].concat(a.slice(s + 1)) ] : [ a ];
        return l = l.map(function(e, r) {
            var i = (1 === r ? !o : o) ? "height" : "width", a = !1;
            return e.reduce(function(e, t) {
                return "" === e[e.length - 1] && -1 !== [ "+", "-" ].indexOf(t) ? (e[e.length - 1] = t, 
                a = !0, e) : a ? (e[e.length - 1] += t, a = !1, e) : e.concat(t);
            }, []).map(function(e) {
                return X(e, i, t, n);
            });
        }), l.forEach(function(e, t) {
            e.forEach(function(n, r) {
                V(n) && (i[t] += n * ("-" === e[r - 1] ? -1 : 1));
            });
        }), i;
    }
    function Z(e, t) {
        var n = t.offset, r = e.placement, i = e.offsets, o = i.popper, a = i.reference, s = r.split("-")[0], u = void 0;
        return u = V(+n) ? [ +n, 0 ] : J(n, o, a, s), "left" === s ? (o.top += u[0], o.left -= u[1]) : "right" === s ? (o.top += u[0], 
        o.left += u[1]) : "top" === s ? (o.left += u[0], o.top -= u[1]) : "bottom" === s && (o.left += u[0], 
        o.top += u[1]), e.popper = o, e;
    }
    function ee(e, t) {
        var n = t.boundariesElement || a(e.instance.popper);
        e.instance.reference === n && (n = a(n));
        var r = b(e.instance.popper, e.instance.reference, t.padding, n);
        t.boundaries = r;
        var i = t.priority, o = e.offsets.popper, s = {
            primary: function(e) {
                var n = o[e];
                return o[e] < r[e] && !t.escapeWithReference && (n = Math.max(o[e], r[e])), me({}, e, n);
            },
            secondary: function(e) {
                var n = "right" === e ? "left" : "top", i = o[n];
                return o[e] > r[e] && !t.escapeWithReference && (i = Math.min(o[n], r[e] - ("right" === e ? o.width : o.height))), 
                me({}, n, i);
            }
        };
        return i.forEach(function(e) {
            var t = -1 !== [ "left", "top" ].indexOf(e) ? "primary" : "secondary";
            o = ge({}, o, s[t](e));
        }), e.offsets.popper = o, e;
    }
    function te(e) {
        var t = e.placement, n = t.split("-")[0], r = t.split("-")[1];
        if (r) {
            var i = e.offsets, o = i.reference, a = i.popper, s = -1 !== [ "bottom", "top" ].indexOf(n), u = s ? "left" : "top", l = s ? "width" : "height", c = {
                start: me({}, u, o[u]),
                end: me({}, u, o[u] + o[l] - a[l])
            };
            e.offsets.popper = ge({}, a, c[r]);
        }
        return e;
    }
    function ne(e) {
        if (!W(e.instance.modifiers, "hide", "preventOverflow")) return e;
        var t = e.offsets.reference, n = _(e.instance.modifiers, function(e) {
            return "preventOverflow" === e.name;
        }).boundaries;
        if (t.bottom < n.top || t.left > n.right || t.top > n.bottom || t.right < n.left) {
            if (!0 === e.hide) return e;
            e.hide = !0, e.attributes["x-out-of-boundaries"] = "";
        } else {
            if (!1 === e.hide) return e;
            e.hide = !1, e.attributes["x-out-of-boundaries"] = !1;
        }
        return e;
    }
    function re(e) {
        var t = e.placement, n = t.split("-")[0], r = e.offsets, i = r.popper, o = r.reference, a = -1 !== [ "left", "right" ].indexOf(n), s = -1 === [ "top", "left" ].indexOf(n);
        return i[a ? "left" : "top"] = o[n] - (s ? i[a ? "width" : "height"] : 0), e.placement = S(t), 
        e.offsets.popper = m(i), e;
    }
    for (var ie = [ "native code", "[object MutationObserverConstructor]" ], oe = "undefined" != typeof window, ae = [ "Edge", "Trident", "Firefox" ], se = 0, ue = 0; ue < ae.length; ue += 1) if (oe && navigator.userAgent.indexOf(ae[ue]) >= 0) {
        se = 1;
        break;
    }
    var le = oe && function(e) {
        return ie.some(function(t) {
            return (e || "").toString().indexOf(t) > -1;
        });
    }(window.MutationObserver), ce = le ? e : t, fe = void 0, he = function() {
        return void 0 === fe && (fe = -1 !== navigator.appVersion.indexOf("MSIE 10")), fe;
    }, pe = function(e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }, de = function() {
        function e(e, t) {
            for (var n = 0; n < t.length; n++) {
                var r = t[n];
                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), 
                Object.defineProperty(e, r.key, r);
            }
        }
        return function(t, n, r) {
            return n && e(t.prototype, n), r && e(t, r), t;
        };
    }(), me = function(e, t, n) {
        return t in e ? Object.defineProperty(e, t, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : e[t] = n, e;
    }, ge = Object.assign || function(e) {
        for (var t = 1; t < arguments.length; t++) {
            var n = arguments[t];
            for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
        }
        return e;
    }, ve = [ "auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start" ], $e = ve.slice(3), ye = {
        FLIP: "flip",
        CLOCKWISE: "clockwise",
        COUNTERCLOCKWISE: "counterclockwise"
    }, be = {
        shift: {
            order: 100,
            enabled: !0,
            fn: te
        },
        offset: {
            order: 200,
            enabled: !0,
            fn: Z,
            offset: 0
        },
        preventOverflow: {
            order: 300,
            enabled: !0,
            fn: ee,
            priority: [ "left", "right", "top", "bottom" ],
            padding: 5,
            boundariesElement: "scrollParent"
        },
        keepTogether: {
            order: 400,
            enabled: !0,
            fn: Y
        },
        arrow: {
            order: 500,
            enabled: !0,
            fn: G,
            element: "[x-arrow]"
        },
        flip: {
            order: 600,
            enabled: !0,
            fn: Q,
            behavior: "flip",
            padding: 5,
            boundariesElement: "viewport"
        },
        inner: {
            order: 700,
            enabled: !1,
            fn: re
        },
        hide: {
            order: 800,
            enabled: !0,
            fn: ne
        },
        computeStyle: {
            order: 850,
            enabled: !0,
            fn: B,
            gpuAcceleration: !0,
            x: "bottom",
            y: "right"
        },
        applyStyle: {
            order: 900,
            enabled: !0,
            fn: U,
            onLoad: q,
            gpuAcceleration: void 0
        }
    }, we = {
        placement: "bottom",
        eventsEnabled: !0,
        removeOnDestroy: !1,
        onCreate: function() {},
        onUpdate: function() {},
        modifiers: be
    }, Ee = function() {
        function e(t, r) {
            var i = this, o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            pe(this, e), this.scheduleUpdate = function() {
                return requestAnimationFrame(i.update);
            }, this.update = ce(this.update.bind(this)), this.options = ge({}, e.Defaults, o), 
            this.state = {
                isDestroyed: !1,
                isCreated: !1,
                scrollParents: []
            }, this.reference = t.jquery ? t[0] : t, this.popper = r.jquery ? r[0] : r, this.options.modifiers = {}, 
            Object.keys(ge({}, e.Defaults.modifiers, o.modifiers)).forEach(function(t) {
                i.options.modifiers[t] = ge({}, e.Defaults.modifiers[t] || {}, o.modifiers ? o.modifiers[t] : {});
            }), this.modifiers = Object.keys(this.options.modifiers).map(function(e) {
                return ge({
                    name: e
                }, i.options.modifiers[e]);
            }).sort(function(e, t) {
                return e.order - t.order;
            }), this.modifiers.forEach(function(e) {
                e.enabled && n(e.onLoad) && e.onLoad(i.reference, i.popper, i.options, e, i.state);
            }), this.update();
            var a = this.options.eventsEnabled;
            a && this.enableEventListeners(), this.state.eventsEnabled = a;
        }
        return de(e, [ {
            key: "update",
            value: function() {
                return k.call(this);
            }
        }, {
            key: "destroy",
            value: function() {
                return N.call(this);
            }
        }, {
            key: "enableEventListeners",
            value: function() {
                return M.call(this);
            }
        }, {
            key: "disableEventListeners",
            value: function() {
                return R.call(this);
            }
        } ]), e;
    }();
    return Ee.Utils = ("undefined" != typeof window ? window : global).PopperUtils, 
    Ee.placements = ve, Ee.Defaults = we, Ee;
}), function(e, t) {
    "use strict";
    function n(e) {
        return null != e && "" !== e && "hasOwnProperty" !== e && a.test("." + e);
    }
    function r(e, r) {
        if (!n(r)) throw o("badmember", 'Dotted member path "@{0}" is invalid.', r);
        for (var i = r.split("."), a = 0, s = i.length; a < s && t.isDefined(e); a++) {
            var u = i[a];
            e = null !== e ? e[u] : void 0;
        }
        return e;
    }
    function i(e, n) {
        n = n || {}, t.forEach(n, function(e, t) {
            delete n[t];
        });
        for (var r in e) !e.hasOwnProperty(r) || "$" === r.charAt(0) && "$" === r.charAt(1) || (n[r] = e[r]);
        return n;
    }
    var o = t.$$minErr("$resource"), a = /^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;
    t.module("ngResource", [ "ng" ]).info({
        angularVersion: "1.6.6"
    }).provider("$resource", function() {
        var e = /^https?:\/\/\[[^\]]*][^\/]*/, n = this;
        this.defaults = {
            stripTrailingSlashes: !0,
            cancellable: !1,
            actions: {
                get: {
                    method: "GET"
                },
                save: {
                    method: "POST"
                },
                query: {
                    method: "GET",
                    isArray: !0
                },
                remove: {
                    method: "DELETE"
                },
                delete: {
                    method: "DELETE"
                }
            }
        }, this.$get = [ "$http", "$log", "$q", "$timeout", function(a, s, u, l) {
            function c(e, t) {
                this.template = e, this.defaults = d({}, n.defaults, t), this.urlParams = {};
            }
            function f(e, t, b, w) {
                function E(e, n) {
                    var i = {};
                    return n = d({}, t, n), p(n, function(t, n) {
                        $(t) && (t = t(e)), i[n] = t && t.charAt && "@" === t.charAt(0) ? r(e, t.substr(1)) : t;
                    }), i;
                }
                function x(e) {
                    return e.resource;
                }
                function C(e) {
                    i(e || {}, this);
                }
                var S = new c(e, w);
                return b = d({}, n.defaults.actions, b), C.prototype.toJSON = function() {
                    var e = d({}, this);
                    return delete e.$promise, delete e.$resolved, delete e.$cancelRequest, e;
                }, p(b, function(e, t) {
                    var n = !0 === e.hasBody || !1 !== e.hasBody && /^(POST|PUT|PATCH)$/i.test(e.method), r = e.timeout, c = v(e.cancellable) ? e.cancellable : S.defaults.cancellable;
                    r && !y(r) && (s.debug("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the `cancellable` option."), 
                    delete e.timeout, r = null), C[t] = function(s, f, v, y) {
                        function b(e) {
                            R.catch(h), null !== O && O.resolve(e);
                        }
                        var w, T, _, A = {};
                        switch (arguments.length) {
                          case 4:
                            _ = y, T = v;

                          case 3:
                          case 2:
                            if (!$(f)) {
                                A = s, w = f, T = v;
                                break;
                            }
                            if ($(s)) {
                                T = s, _ = f;
                                break;
                            }
                            T = f, _ = v;

                          case 1:
                            $(s) ? T = s : n ? w = s : A = s;
                            break;

                          case 0:
                            break;

                          default:
                            throw o("badargs", "Expected up to 4 arguments [params, data, success, error], got {0} arguments", arguments.length);
                        }
                        var O, k, I = this instanceof C, D = I ? w : e.isArray ? [] : new C(w), N = {}, j = e.interceptor && e.interceptor.response || x, P = e.interceptor && e.interceptor.responseError || void 0, M = !!_, L = !!P;
                        p(e, function(e, t) {
                            switch (t) {
                              default:
                                N[t] = m(e);
                                break;

                              case "params":
                              case "isArray":
                              case "interceptor":
                              case "cancellable":
                            }
                        }), !I && c && (O = u.defer(), N.timeout = O.promise, r && (k = l(O.resolve, r))), 
                        n && (N.data = w), S.setUrlParams(N, d({}, E(w, e.params || {}), A), e.url);
                        var R = a(N).then(function(n) {
                            var r = n.data;
                            if (r) {
                                if (g(r) !== !!e.isArray) throw o("badcfg", "Error in resource configuration for action `{0}`. Expected response to contain an {1} but got an {2} (Request: {3} {4})", t, e.isArray ? "array" : "object", g(r) ? "array" : "object", N.method, N.url);
                                if (e.isArray) D.length = 0, p(r, function(e) {
                                    "object" == typeof e ? D.push(new C(e)) : D.push(e);
                                }); else {
                                    var a = D.$promise;
                                    i(r, D), D.$promise = a;
                                }
                            }
                            return n.resource = D, n;
                        }, function(e) {
                            return e.resource = D, u.reject(e);
                        });
                        return R = R.finally(function() {
                            D.$resolved = !0, !I && c && (D.$cancelRequest = h, l.cancel(k), O = k = N.timeout = null);
                        }), R = R.then(function(e) {
                            var t = j(e);
                            return (T || h)(t, e.headers, e.status, e.statusText), t;
                        }, M || L ? function(e) {
                            return M && !L && R.catch(h), M && _(e), L ? P(e) : u.reject(e);
                        } : void 0), I ? R : (D.$promise = R, D.$resolved = !1, c && (D.$cancelRequest = b), 
                        D);
                    }, C.prototype["$" + t] = function(e, n, r) {
                        $(e) && (r = n, n = e, e = {});
                        var i = C[t].call(this, e, this, n, r);
                        return i.$promise || i;
                    };
                }), C.bind = function(n) {
                    var r = d({}, t, n);
                    return f(e, r, b, w);
                }, C;
            }
            var h = t.noop, p = t.forEach, d = t.extend, m = t.copy, g = t.isArray, v = t.isDefined, $ = t.isFunction, y = t.isNumber, b = t.$$encodeUriQuery, w = t.$$encodeUriSegment;
            return c.prototype = {
                setUrlParams: function(t, n, r) {
                    var i, a, s = this, u = r || s.template, l = "", c = s.urlParams = Object.create(null);
                    p(u.split(/\W/), function(e) {
                        if ("hasOwnProperty" === e) throw o("badname", "hasOwnProperty is not a valid parameter name.");
                        !new RegExp("^\\d+$").test(e) && e && new RegExp("(^|[^\\\\]):" + e + "(\\W|$)").test(u) && (c[e] = {
                            isQueryParamValue: new RegExp("\\?.*=:" + e + "(?:\\W|$)").test(u)
                        });
                    }), u = u.replace(/\\:/g, ":"), u = u.replace(e, function(e) {
                        return l = e, "";
                    }), n = n || {}, p(s.urlParams, function(e, t) {
                        i = n.hasOwnProperty(t) ? n[t] : s.defaults[t], v(i) && null !== i ? (a = e.isQueryParamValue ? b(i, !0) : w(i), 
                        u = u.replace(new RegExp(":" + t + "(\\W|$)", "g"), function(e, t) {
                            return a + t;
                        })) : u = u.replace(new RegExp("(/?):" + t + "(\\W|$)", "g"), function(e, t, n) {
                            return "/" === n.charAt(0) ? n : t + n;
                        });
                    }), s.defaults.stripTrailingSlashes && (u = u.replace(/\/+$/, "") || "/"), u = u.replace(/\/\.(?=\w+($|\?))/, "."), 
                    t.url = l + u.replace(/\/(\\|%5C)\./, "/."), p(n, function(e, n) {
                        s.urlParams[n] || (t.params = t.params || {}, t.params[n] = e);
                    });
                }
            }, f;
        } ];
    });
}(window, window.angular), "undefined" == typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");

!function(e) {
    var t = e.fn.jquery.split(" ")[0].split(".");
    if (t[0] < 2 && t[1] < 9 || 1 == t[0] && 9 == t[1] && t[2] < 1 || t[0] >= 4) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
}(jQuery), function() {
    function e(e, t) {
        if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return !t || "object" != typeof t && "function" != typeof t ? e : t;
    }
    function t(e, t) {
        if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
        e.prototype = Object.create(t && t.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
    }
    function n(e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }
    var r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
        return typeof e;
    } : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    }, i = function() {
        function e(e, t) {
            for (var n = 0; n < t.length; n++) {
                var r = t[n];
                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), 
                Object.defineProperty(e, r.key, r);
            }
        }
        return function(t, n, r) {
            return n && e(t.prototype, n), r && e(t, r), t;
        };
    }(), o = function(e) {
        function t(e) {
            return {}.toString.call(e).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
        }
        function n(e) {
            return (e[0] || e).nodeType;
        }
        function r() {
            return {
                bindType: a.end,
                delegateType: a.end,
                handle: function(t) {
                    if (e(t.target).is(this)) return t.handleObj.handler.apply(this, arguments);
                }
            };
        }
        function i() {
            if (window.QUnit) return !1;
            var e = document.createElement("bootstrap");
            for (var t in s) if (void 0 !== e.style[t]) return {
                end: s[t]
            };
            return !1;
        }
        function o(t) {
            var n = this, r = !1;
            return e(this).one(u.TRANSITION_END, function() {
                r = !0;
            }), setTimeout(function() {
                r || u.triggerTransitionEnd(n);
            }, t), this;
        }
        var a = !1, s = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        }, u = {
            TRANSITION_END: "bsTransitionEnd",
            getUID: function(e) {
                do {
                    e += ~~(1e6 * Math.random());
                } while (document.getElementById(e));
                return e;
            },
            getSelectorFromElement: function(t) {
                var n = t.getAttribute("data-target");
                n && "#" !== n || (n = t.getAttribute("href") || "");
                try {
                    return e(n).length > 0 ? n : null;
                } catch (e) {
                    return null;
                }
            },
            reflow: function(e) {
                return e.offsetHeight;
            },
            triggerTransitionEnd: function(t) {
                e(t).trigger(a.end);
            },
            supportsTransitionEnd: function() {
                return Boolean(a);
            },
            typeCheckConfig: function(e, r, i) {
                for (var o in i) if (i.hasOwnProperty(o)) {
                    var a = i[o], s = r[o], u = s && n(s) ? "element" : t(s);
                    if (!new RegExp(a).test(u)) throw new Error(e.toUpperCase() + ': Option "' + o + '" provided type "' + u + '" but expected type "' + a + '".');
                }
            }
        };
        return function() {
            a = i(), e.fn.emulateTransitionEnd = o, u.supportsTransitionEnd() && (e.event.special[u.TRANSITION_END] = r());
        }(), u;
    }(jQuery), a = (function(e) {
        var t = "alert", r = e.fn[t], a = {
            DISMISS: '[data-dismiss="alert"]'
        }, s = {
            CLOSE: "close.bs.alert",
            CLOSED: "closed.bs.alert",
            CLICK_DATA_API: "click.bs.alert.data-api"
        }, u = {
            ALERT: "alert",
            FADE: "fade",
            SHOW: "show"
        }, l = function() {
            function t(e) {
                n(this, t), this._element = e;
            }
            return t.prototype.close = function(e) {
                e = e || this._element;
                var t = this._getRootElement(e);
                this._triggerCloseEvent(t).isDefaultPrevented() || this._removeElement(t);
            }, t.prototype.dispose = function() {
                e.removeData(this._element, "bs.alert"), this._element = null;
            }, t.prototype._getRootElement = function(t) {
                var n = o.getSelectorFromElement(t), r = !1;
                return n && (r = e(n)[0]), r || (r = e(t).closest("." + u.ALERT)[0]), r;
            }, t.prototype._triggerCloseEvent = function(t) {
                var n = e.Event(s.CLOSE);
                return e(t).trigger(n), n;
            }, t.prototype._removeElement = function(t) {
                var n = this;
                if (e(t).removeClass(u.SHOW), !o.supportsTransitionEnd() || !e(t).hasClass(u.FADE)) return void this._destroyElement(t);
                e(t).one(o.TRANSITION_END, function(e) {
                    return n._destroyElement(t, e);
                }).emulateTransitionEnd(150);
            }, t.prototype._destroyElement = function(t) {
                e(t).detach().trigger(s.CLOSED).remove();
            }, t._jQueryInterface = function(n) {
                return this.each(function() {
                    var r = e(this), i = r.data("bs.alert");
                    i || (i = new t(this), r.data("bs.alert", i)), "close" === n && i[n](this);
                });
            }, t._handleDismiss = function(e) {
                return function(t) {
                    t && t.preventDefault(), e.close(this);
                };
            }, i(t, null, [ {
                key: "VERSION",
                get: function() {
                    return "4.0.0-beta";
                }
            } ]), t;
        }();
        e(document).on(s.CLICK_DATA_API, a.DISMISS, l._handleDismiss(new l())), e.fn[t] = l._jQueryInterface, 
        e.fn[t].Constructor = l, e.fn[t].noConflict = function() {
            return e.fn[t] = r, l._jQueryInterface;
        };
    }(jQuery), function(e) {
        var t = "button", r = e.fn[t], o = {
            ACTIVE: "active",
            BUTTON: "btn",
            FOCUS: "focus"
        }, a = {
            DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
            DATA_TOGGLE: '[data-toggle="buttons"]',
            INPUT: "input",
            ACTIVE: ".active",
            BUTTON: ".btn"
        }, s = {
            CLICK_DATA_API: "click.bs.button.data-api",
            FOCUS_BLUR_DATA_API: "focus.bs.button.data-api blur.bs.button.data-api"
        }, u = function() {
            function t(e) {
                n(this, t), this._element = e;
            }
            return t.prototype.toggle = function() {
                var t = !0, n = !0, r = e(this._element).closest(a.DATA_TOGGLE)[0];
                if (r) {
                    var i = e(this._element).find(a.INPUT)[0];
                    if (i) {
                        if ("radio" === i.type) if (i.checked && e(this._element).hasClass(o.ACTIVE)) t = !1; else {
                            var s = e(r).find(a.ACTIVE)[0];
                            s && e(s).removeClass(o.ACTIVE);
                        }
                        if (t) {
                            if (i.hasAttribute("disabled") || r.hasAttribute("disabled") || i.classList.contains("disabled") || r.classList.contains("disabled")) return;
                            i.checked = !e(this._element).hasClass(o.ACTIVE), e(i).trigger("change");
                        }
                        i.focus(), n = !1;
                    }
                }
                n && this._element.setAttribute("aria-pressed", !e(this._element).hasClass(o.ACTIVE)), 
                t && e(this._element).toggleClass(o.ACTIVE);
            }, t.prototype.dispose = function() {
                e.removeData(this._element, "bs.button"), this._element = null;
            }, t._jQueryInterface = function(n) {
                return this.each(function() {
                    var r = e(this).data("bs.button");
                    r || (r = new t(this), e(this).data("bs.button", r)), "toggle" === n && r[n]();
                });
            }, i(t, null, [ {
                key: "VERSION",
                get: function() {
                    return "4.0.0-beta";
                }
            } ]), t;
        }();
        e(document).on(s.CLICK_DATA_API, a.DATA_TOGGLE_CARROT, function(t) {
            t.preventDefault();
            var n = t.target;
            e(n).hasClass(o.BUTTON) || (n = e(n).closest(a.BUTTON)), u._jQueryInterface.call(e(n), "toggle");
        }).on(s.FOCUS_BLUR_DATA_API, a.DATA_TOGGLE_CARROT, function(t) {
            var n = e(t.target).closest(a.BUTTON)[0];
            e(n).toggleClass(o.FOCUS, /^focus(in)?$/.test(t.type));
        }), e.fn[t] = u._jQueryInterface, e.fn[t].Constructor = u, e.fn[t].noConflict = function() {
            return e.fn[t] = r, u._jQueryInterface;
        };
    }(jQuery), function(e) {
        var t = "carousel", a = "bs.carousel", s = "." + a, u = e.fn[t], l = {
            interval: 5e3,
            keyboard: !0,
            slide: !1,
            pause: "hover",
            wrap: !0
        }, c = {
            interval: "(number|boolean)",
            keyboard: "boolean",
            slide: "(boolean|string)",
            pause: "(string|boolean)",
            wrap: "boolean"
        }, f = {
            NEXT: "next",
            PREV: "prev",
            LEFT: "left",
            RIGHT: "right"
        }, h = {
            SLIDE: "slide" + s,
            SLID: "slid" + s,
            KEYDOWN: "keydown" + s,
            MOUSEENTER: "mouseenter" + s,
            MOUSELEAVE: "mouseleave" + s,
            TOUCHEND: "touchend" + s,
            LOAD_DATA_API: "load.bs.carousel.data-api",
            CLICK_DATA_API: "click.bs.carousel.data-api"
        }, p = {
            CAROUSEL: "carousel",
            ACTIVE: "active",
            SLIDE: "slide",
            RIGHT: "carousel-item-right",
            LEFT: "carousel-item-left",
            NEXT: "carousel-item-next",
            PREV: "carousel-item-prev",
            ITEM: "carousel-item"
        }, d = {
            ACTIVE: ".active",
            ACTIVE_ITEM: ".active.carousel-item",
            ITEM: ".carousel-item",
            NEXT_PREV: ".carousel-item-next, .carousel-item-prev",
            INDICATORS: ".carousel-indicators",
            DATA_SLIDE: "[data-slide], [data-slide-to]",
            DATA_RIDE: '[data-ride="carousel"]'
        }, m = function() {
            function u(t, r) {
                n(this, u), this._items = null, this._interval = null, this._activeElement = null, 
                this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this._config = this._getConfig(r), 
                this._element = e(t)[0], this._indicatorsElement = e(this._element).find(d.INDICATORS)[0], 
                this._addEventListeners();
            }
            return u.prototype.next = function() {
                this._isSliding || this._slide(f.NEXT);
            }, u.prototype.nextWhenVisible = function() {
                document.hidden || this.next();
            }, u.prototype.prev = function() {
                this._isSliding || this._slide(f.PREV);
            }, u.prototype.pause = function(t) {
                t || (this._isPaused = !0), e(this._element).find(d.NEXT_PREV)[0] && o.supportsTransitionEnd() && (o.triggerTransitionEnd(this._element), 
                this.cycle(!0)), clearInterval(this._interval), this._interval = null;
            }, u.prototype.cycle = function(e) {
                e || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), 
                this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
            }, u.prototype.to = function(t) {
                var n = this;
                this._activeElement = e(this._element).find(d.ACTIVE_ITEM)[0];
                var r = this._getItemIndex(this._activeElement);
                if (!(t > this._items.length - 1 || t < 0)) {
                    if (this._isSliding) return void e(this._element).one(h.SLID, function() {
                        return n.to(t);
                    });
                    if (r === t) return this.pause(), void this.cycle();
                    var i = t > r ? f.NEXT : f.PREV;
                    this._slide(i, this._items[t]);
                }
            }, u.prototype.dispose = function() {
                e(this._element).off(s), e.removeData(this._element, a), this._items = null, this._config = null, 
                this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, 
                this._activeElement = null, this._indicatorsElement = null;
            }, u.prototype._getConfig = function(n) {
                return n = e.extend({}, l, n), o.typeCheckConfig(t, n, c), n;
            }, u.prototype._addEventListeners = function() {
                var t = this;
                this._config.keyboard && e(this._element).on(h.KEYDOWN, function(e) {
                    return t._keydown(e);
                }), "hover" === this._config.pause && (e(this._element).on(h.MOUSEENTER, function(e) {
                    return t.pause(e);
                }).on(h.MOUSELEAVE, function(e) {
                    return t.cycle(e);
                }), "ontouchstart" in document.documentElement && e(this._element).on(h.TOUCHEND, function() {
                    t.pause(), t.touchTimeout && clearTimeout(t.touchTimeout), t.touchTimeout = setTimeout(function(e) {
                        return t.cycle(e);
                    }, 500 + t._config.interval);
                }));
            }, u.prototype._keydown = function(e) {
                if (!/input|textarea/i.test(e.target.tagName)) switch (e.which) {
                  case 37:
                    e.preventDefault(), this.prev();
                    break;

                  case 39:
                    e.preventDefault(), this.next();
                    break;

                  default:
                    return;
                }
            }, u.prototype._getItemIndex = function(t) {
                return this._items = e.makeArray(e(t).parent().find(d.ITEM)), this._items.indexOf(t);
            }, u.prototype._getItemByDirection = function(e, t) {
                var n = e === f.NEXT, r = e === f.PREV, i = this._getItemIndex(t), o = this._items.length - 1;
                if ((r && 0 === i || n && i === o) && !this._config.wrap) return t;
                var a = e === f.PREV ? -1 : 1, s = (i + a) % this._items.length;
                return -1 === s ? this._items[this._items.length - 1] : this._items[s];
            }, u.prototype._triggerSlideEvent = function(t, n) {
                var r = this._getItemIndex(t), i = this._getItemIndex(e(this._element).find(d.ACTIVE_ITEM)[0]), o = e.Event(h.SLIDE, {
                    relatedTarget: t,
                    direction: n,
                    from: i,
                    to: r
                });
                return e(this._element).trigger(o), o;
            }, u.prototype._setActiveIndicatorElement = function(t) {
                if (this._indicatorsElement) {
                    e(this._indicatorsElement).find(d.ACTIVE).removeClass(p.ACTIVE);
                    var n = this._indicatorsElement.children[this._getItemIndex(t)];
                    n && e(n).addClass(p.ACTIVE);
                }
            }, u.prototype._slide = function(t, n) {
                var r = this, i = e(this._element).find(d.ACTIVE_ITEM)[0], a = this._getItemIndex(i), s = n || i && this._getItemByDirection(t, i), u = this._getItemIndex(s), l = Boolean(this._interval), c = void 0, m = void 0, g = void 0;
                if (t === f.NEXT ? (c = p.LEFT, m = p.NEXT, g = f.LEFT) : (c = p.RIGHT, m = p.PREV, 
                g = f.RIGHT), s && e(s).hasClass(p.ACTIVE)) return void (this._isSliding = !1);
                if (!this._triggerSlideEvent(s, g).isDefaultPrevented() && i && s) {
                    this._isSliding = !0, l && this.pause(), this._setActiveIndicatorElement(s);
                    var v = e.Event(h.SLID, {
                        relatedTarget: s,
                        direction: g,
                        from: a,
                        to: u
                    });
                    o.supportsTransitionEnd() && e(this._element).hasClass(p.SLIDE) ? (e(s).addClass(m), 
                    o.reflow(s), e(i).addClass(c), e(s).addClass(c), e(i).one(o.TRANSITION_END, function() {
                        e(s).removeClass(c + " " + m).addClass(p.ACTIVE), e(i).removeClass(p.ACTIVE + " " + m + " " + c), 
                        r._isSliding = !1, setTimeout(function() {
                            return e(r._element).trigger(v);
                        }, 0);
                    }).emulateTransitionEnd(600)) : (e(i).removeClass(p.ACTIVE), e(s).addClass(p.ACTIVE), 
                    this._isSliding = !1, e(this._element).trigger(v)), l && this.cycle();
                }
            }, u._jQueryInterface = function(t) {
                return this.each(function() {
                    var n = e(this).data(a), i = e.extend({}, l, e(this).data());
                    "object" === (void 0 === t ? "undefined" : r(t)) && e.extend(i, t);
                    var o = "string" == typeof t ? t : i.slide;
                    if (n || (n = new u(this, i), e(this).data(a, n)), "number" == typeof t) n.to(t); else if ("string" == typeof o) {
                        if (void 0 === n[o]) throw new Error('No method named "' + o + '"');
                        n[o]();
                    } else i.interval && (n.pause(), n.cycle());
                });
            }, u._dataApiClickHandler = function(t) {
                var n = o.getSelectorFromElement(this);
                if (n) {
                    var r = e(n)[0];
                    if (r && e(r).hasClass(p.CAROUSEL)) {
                        var i = e.extend({}, e(r).data(), e(this).data()), s = this.getAttribute("data-slide-to");
                        s && (i.interval = !1), u._jQueryInterface.call(e(r), i), s && e(r).data(a).to(s), 
                        t.preventDefault();
                    }
                }
            }, i(u, null, [ {
                key: "VERSION",
                get: function() {
                    return "4.0.0-beta";
                }
            }, {
                key: "Default",
                get: function() {
                    return l;
                }
            } ]), u;
        }();
        e(document).on(h.CLICK_DATA_API, d.DATA_SLIDE, m._dataApiClickHandler), e(window).on(h.LOAD_DATA_API, function() {
            e(d.DATA_RIDE).each(function() {
                var t = e(this);
                m._jQueryInterface.call(t, t.data());
            });
        }), e.fn[t] = m._jQueryInterface, e.fn[t].Constructor = m, e.fn[t].noConflict = function() {
            return e.fn[t] = u, m._jQueryInterface;
        };
    }(jQuery), function(e) {
        var t = "collapse", a = "bs.collapse", s = e.fn[t], u = {
            toggle: !0,
            parent: ""
        }, l = {
            toggle: "boolean",
            parent: "string"
        }, c = {
            SHOW: "show.bs.collapse",
            SHOWN: "shown.bs.collapse",
            HIDE: "hide.bs.collapse",
            HIDDEN: "hidden.bs.collapse",
            CLICK_DATA_API: "click.bs.collapse.data-api"
        }, f = {
            SHOW: "show",
            COLLAPSE: "collapse",
            COLLAPSING: "collapsing",
            COLLAPSED: "collapsed"
        }, h = {
            WIDTH: "width",
            HEIGHT: "height"
        }, p = {
            ACTIVES: ".show, .collapsing",
            DATA_TOGGLE: '[data-toggle="collapse"]'
        }, d = function() {
            function s(t, r) {
                n(this, s), this._isTransitioning = !1, this._element = t, this._config = this._getConfig(r), 
                this._triggerArray = e.makeArray(e('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]'));
                for (var i = e(p.DATA_TOGGLE), a = 0; a < i.length; a++) {
                    var u = i[a], l = o.getSelectorFromElement(u);
                    null !== l && e(l).filter(t).length > 0 && this._triggerArray.push(u);
                }
                this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), 
                this._config.toggle && this.toggle();
            }
            return s.prototype.toggle = function() {
                e(this._element).hasClass(f.SHOW) ? this.hide() : this.show();
            }, s.prototype.show = function() {
                var t = this;
                if (!this._isTransitioning && !e(this._element).hasClass(f.SHOW)) {
                    var n = void 0, r = void 0;
                    if (this._parent && (n = e.makeArray(e(this._parent).children().children(p.ACTIVES)), 
                    n.length || (n = null)), !(n && (r = e(n).data(a)) && r._isTransitioning)) {
                        var i = e.Event(c.SHOW);
                        if (e(this._element).trigger(i), !i.isDefaultPrevented()) {
                            n && (s._jQueryInterface.call(e(n), "hide"), r || e(n).data(a, null));
                            var u = this._getDimension();
                            e(this._element).removeClass(f.COLLAPSE).addClass(f.COLLAPSING), this._element.style[u] = 0, 
                            this._triggerArray.length && e(this._triggerArray).removeClass(f.COLLAPSED).attr("aria-expanded", !0), 
                            this.setTransitioning(!0);
                            var l = function() {
                                e(t._element).removeClass(f.COLLAPSING).addClass(f.COLLAPSE).addClass(f.SHOW), t._element.style[u] = "", 
                                t.setTransitioning(!1), e(t._element).trigger(c.SHOWN);
                            };
                            if (!o.supportsTransitionEnd()) return void l();
                            var h = u[0].toUpperCase() + u.slice(1), d = "scroll" + h;
                            e(this._element).one(o.TRANSITION_END, l).emulateTransitionEnd(600), this._element.style[u] = this._element[d] + "px";
                        }
                    }
                }
            }, s.prototype.hide = function() {
                var t = this;
                if (!this._isTransitioning && e(this._element).hasClass(f.SHOW)) {
                    var n = e.Event(c.HIDE);
                    if (e(this._element).trigger(n), !n.isDefaultPrevented()) {
                        var r = this._getDimension();
                        if (this._element.style[r] = this._element.getBoundingClientRect()[r] + "px", o.reflow(this._element), 
                        e(this._element).addClass(f.COLLAPSING).removeClass(f.COLLAPSE).removeClass(f.SHOW), 
                        this._triggerArray.length) for (var i = 0; i < this._triggerArray.length; i++) {
                            var a = this._triggerArray[i], s = o.getSelectorFromElement(a);
                            if (null !== s) {
                                var u = e(s);
                                u.hasClass(f.SHOW) || e(a).addClass(f.COLLAPSED).attr("aria-expanded", !1);
                            }
                        }
                        this.setTransitioning(!0);
                        var l = function() {
                            t.setTransitioning(!1), e(t._element).removeClass(f.COLLAPSING).addClass(f.COLLAPSE).trigger(c.HIDDEN);
                        };
                        if (this._element.style[r] = "", !o.supportsTransitionEnd()) return void l();
                        e(this._element).one(o.TRANSITION_END, l).emulateTransitionEnd(600);
                    }
                }
            }, s.prototype.setTransitioning = function(e) {
                this._isTransitioning = e;
            }, s.prototype.dispose = function() {
                e.removeData(this._element, a), this._config = null, this._parent = null, this._element = null, 
                this._triggerArray = null, this._isTransitioning = null;
            }, s.prototype._getConfig = function(n) {
                return n = e.extend({}, u, n), n.toggle = Boolean(n.toggle), o.typeCheckConfig(t, n, l), 
                n;
            }, s.prototype._getDimension = function() {
                return e(this._element).hasClass(h.WIDTH) ? h.WIDTH : h.HEIGHT;
            }, s.prototype._getParent = function() {
                var t = this, n = e(this._config.parent)[0], r = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
                return e(n).find(r).each(function(e, n) {
                    t._addAriaAndCollapsedClass(s._getTargetFromElement(n), [ n ]);
                }), n;
            }, s.prototype._addAriaAndCollapsedClass = function(t, n) {
                if (t) {
                    var r = e(t).hasClass(f.SHOW);
                    n.length && e(n).toggleClass(f.COLLAPSED, !r).attr("aria-expanded", r);
                }
            }, s._getTargetFromElement = function(t) {
                var n = o.getSelectorFromElement(t);
                return n ? e(n)[0] : null;
            }, s._jQueryInterface = function(t) {
                return this.each(function() {
                    var n = e(this), i = n.data(a), o = e.extend({}, u, n.data(), "object" === (void 0 === t ? "undefined" : r(t)) && t);
                    if (!i && o.toggle && /show|hide/.test(t) && (o.toggle = !1), i || (i = new s(this, o), 
                    n.data(a, i)), "string" == typeof t) {
                        if (void 0 === i[t]) throw new Error('No method named "' + t + '"');
                        i[t]();
                    }
                });
            }, i(s, null, [ {
                key: "VERSION",
                get: function() {
                    return "4.0.0-beta";
                }
            }, {
                key: "Default",
                get: function() {
                    return u;
                }
            } ]), s;
        }();
        e(document).on(c.CLICK_DATA_API, p.DATA_TOGGLE, function(t) {
            /input|textarea/i.test(t.target.tagName) || t.preventDefault();
            var n = e(this), r = o.getSelectorFromElement(this);
            e(r).each(function() {
                var t = e(this), r = t.data(a), i = r ? "toggle" : n.data();
                d._jQueryInterface.call(t, i);
            });
        }), e.fn[t] = d._jQueryInterface, e.fn[t].Constructor = d, e.fn[t].noConflict = function() {
            return e.fn[t] = s, d._jQueryInterface;
        };
    }(jQuery), function(e) {
        if ("undefined" == typeof Popper) throw new Error("Bootstrap dropdown require Popper.js (https://popper.js.org)");
        var t = "dropdown", a = "bs.dropdown", s = "." + a, u = e.fn[t], l = new RegExp("38|40|27"), c = {
            HIDE: "hide" + s,
            HIDDEN: "hidden" + s,
            SHOW: "show" + s,
            SHOWN: "shown" + s,
            CLICK: "click" + s,
            CLICK_DATA_API: "click.bs.dropdown.data-api",
            KEYDOWN_DATA_API: "keydown.bs.dropdown.data-api",
            KEYUP_DATA_API: "keyup.bs.dropdown.data-api"
        }, f = {
            DISABLED: "disabled",
            SHOW: "show",
            DROPUP: "dropup",
            MENURIGHT: "dropdown-menu-right",
            MENULEFT: "dropdown-menu-left"
        }, h = {
            DATA_TOGGLE: '[data-toggle="dropdown"]',
            FORM_CHILD: ".dropdown form",
            MENU: ".dropdown-menu",
            NAVBAR_NAV: ".navbar-nav",
            VISIBLE_ITEMS: ".dropdown-menu .dropdown-item:not(.disabled)"
        }, p = {
            TOP: "top-start",
            TOPEND: "top-end",
            BOTTOM: "bottom-start",
            BOTTOMEND: "bottom-end"
        }, d = {
            placement: p.BOTTOM,
            offset: 0,
            flip: !0
        }, m = {
            placement: "string",
            offset: "(number|string)",
            flip: "boolean"
        }, g = function() {
            function u(e, t) {
                n(this, u), this._element = e, this._popper = null, this._config = this._getConfig(t), 
                this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();
            }
            return u.prototype.toggle = function() {
                if (!this._element.disabled && !e(this._element).hasClass(f.DISABLED)) {
                    var t = u._getParentFromElement(this._element), n = e(this._menu).hasClass(f.SHOW);
                    if (u._clearMenus(), !n) {
                        var r = {
                            relatedTarget: this._element
                        }, i = e.Event(c.SHOW, r);
                        if (e(t).trigger(i), !i.isDefaultPrevented()) {
                            var o = this._element;
                            e(t).hasClass(f.DROPUP) && (e(this._menu).hasClass(f.MENULEFT) || e(this._menu).hasClass(f.MENURIGHT)) && (o = t), 
                            this._popper = new Popper(o, this._menu, this._getPopperConfig()), "ontouchstart" in document.documentElement && !e(t).closest(h.NAVBAR_NAV).length && e("body").children().on("mouseover", null, e.noop), 
                            this._element.focus(), this._element.setAttribute("aria-expanded", !0), e(this._menu).toggleClass(f.SHOW), 
                            e(t).toggleClass(f.SHOW).trigger(e.Event(c.SHOWN, r));
                        }
                    }
                }
            }, u.prototype.dispose = function() {
                e.removeData(this._element, a), e(this._element).off(s), this._element = null, this._menu = null, 
                null !== this._popper && this._popper.destroy(), this._popper = null;
            }, u.prototype.update = function() {
                this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();
            }, u.prototype._addEventListeners = function() {
                var t = this;
                e(this._element).on(c.CLICK, function(e) {
                    e.preventDefault(), e.stopPropagation(), t.toggle();
                });
            }, u.prototype._getConfig = function(n) {
                var r = e(this._element).data();
                return void 0 !== r.placement && (r.placement = p[r.placement.toUpperCase()]), n = e.extend({}, this.constructor.Default, e(this._element).data(), n), 
                o.typeCheckConfig(t, n, this.constructor.DefaultType), n;
            }, u.prototype._getMenuElement = function() {
                if (!this._menu) {
                    var t = u._getParentFromElement(this._element);
                    this._menu = e(t).find(h.MENU)[0];
                }
                return this._menu;
            }, u.prototype._getPlacement = function() {
                var t = e(this._element).parent(), n = this._config.placement;
                return t.hasClass(f.DROPUP) || this._config.placement === p.TOP ? (n = p.TOP, e(this._menu).hasClass(f.MENURIGHT) && (n = p.TOPEND)) : e(this._menu).hasClass(f.MENURIGHT) && (n = p.BOTTOMEND), 
                n;
            }, u.prototype._detectNavbar = function() {
                return e(this._element).closest(".navbar").length > 0;
            }, u.prototype._getPopperConfig = function() {
                var e = {
                    placement: this._getPlacement(),
                    modifiers: {
                        offset: {
                            offset: this._config.offset
                        },
                        flip: {
                            enabled: this._config.flip
                        }
                    }
                };
                return this._inNavbar && (e.modifiers.applyStyle = {
                    enabled: !this._inNavbar
                }), e;
            }, u._jQueryInterface = function(t) {
                return this.each(function() {
                    var n = e(this).data(a), i = "object" === (void 0 === t ? "undefined" : r(t)) ? t : null;
                    if (n || (n = new u(this, i), e(this).data(a, n)), "string" == typeof t) {
                        if (void 0 === n[t]) throw new Error('No method named "' + t + '"');
                        n[t]();
                    }
                });
            }, u._clearMenus = function(t) {
                if (!t || 3 !== t.which && ("keyup" !== t.type || 9 === t.which)) for (var n = e.makeArray(e(h.DATA_TOGGLE)), r = 0; r < n.length; r++) {
                    var i = u._getParentFromElement(n[r]), o = e(n[r]).data(a), s = {
                        relatedTarget: n[r]
                    };
                    if (o) {
                        var l = o._menu;
                        if (e(i).hasClass(f.SHOW) && !(t && ("click" === t.type && /input|textarea/i.test(t.target.tagName) || "keyup" === t.type && 9 === t.which) && e.contains(i, t.target))) {
                            var p = e.Event(c.HIDE, s);
                            e(i).trigger(p), p.isDefaultPrevented() || ("ontouchstart" in document.documentElement && e("body").children().off("mouseover", null, e.noop), 
                            n[r].setAttribute("aria-expanded", "false"), e(l).removeClass(f.SHOW), e(i).removeClass(f.SHOW).trigger(e.Event(c.HIDDEN, s)));
                        }
                    }
                }
            }, u._getParentFromElement = function(t) {
                var n = void 0, r = o.getSelectorFromElement(t);
                return r && (n = e(r)[0]), n || t.parentNode;
            }, u._dataApiKeydownHandler = function(t) {
                if (!(!l.test(t.which) || /button/i.test(t.target.tagName) && 32 === t.which || /input|textarea/i.test(t.target.tagName) || (t.preventDefault(), 
                t.stopPropagation(), this.disabled || e(this).hasClass(f.DISABLED)))) {
                    var n = u._getParentFromElement(this), r = e(n).hasClass(f.SHOW);
                    if (!r && (27 !== t.which || 32 !== t.which) || r && (27 === t.which || 32 === t.which)) {
                        if (27 === t.which) {
                            var i = e(n).find(h.DATA_TOGGLE)[0];
                            e(i).trigger("focus");
                        }
                        return void e(this).trigger("click");
                    }
                    var o = e(n).find(h.VISIBLE_ITEMS).get();
                    if (o.length) {
                        var a = o.indexOf(t.target);
                        38 === t.which && a > 0 && a--, 40 === t.which && a < o.length - 1 && a++, a < 0 && (a = 0), 
                        o[a].focus();
                    }
                }
            }, i(u, null, [ {
                key: "VERSION",
                get: function() {
                    return "4.0.0-beta";
                }
            }, {
                key: "Default",
                get: function() {
                    return d;
                }
            }, {
                key: "DefaultType",
                get: function() {
                    return m;
                }
            } ]), u;
        }();
        e(document).on(c.KEYDOWN_DATA_API, h.DATA_TOGGLE, g._dataApiKeydownHandler).on(c.KEYDOWN_DATA_API, h.MENU, g._dataApiKeydownHandler).on(c.CLICK_DATA_API + " " + c.KEYUP_DATA_API, g._clearMenus).on(c.CLICK_DATA_API, h.DATA_TOGGLE, function(t) {
            t.preventDefault(), t.stopPropagation(), g._jQueryInterface.call(e(this), "toggle");
        }).on(c.CLICK_DATA_API, h.FORM_CHILD, function(e) {
            e.stopPropagation();
        }), e.fn[t] = g._jQueryInterface, e.fn[t].Constructor = g, e.fn[t].noConflict = function() {
            return e.fn[t] = u, g._jQueryInterface;
        };
    }(jQuery), function(e) {
        var t = "modal", a = ".bs.modal", s = e.fn[t], u = {
            backdrop: !0,
            keyboard: !0,
            focus: !0,
            show: !0
        }, l = {
            backdrop: "(boolean|string)",
            keyboard: "boolean",
            focus: "boolean",
            show: "boolean"
        }, c = {
            HIDE: "hide.bs.modal",
            HIDDEN: "hidden.bs.modal",
            SHOW: "show.bs.modal",
            SHOWN: "shown.bs.modal",
            FOCUSIN: "focusin.bs.modal",
            RESIZE: "resize.bs.modal",
            CLICK_DISMISS: "click.dismiss.bs.modal",
            KEYDOWN_DISMISS: "keydown.dismiss.bs.modal",
            MOUSEUP_DISMISS: "mouseup.dismiss.bs.modal",
            MOUSEDOWN_DISMISS: "mousedown.dismiss.bs.modal",
            CLICK_DATA_API: "click.bs.modal.data-api"
        }, f = {
            SCROLLBAR_MEASURER: "modal-scrollbar-measure",
            BACKDROP: "modal-backdrop",
            OPEN: "modal-open",
            FADE: "fade",
            SHOW: "show"
        }, h = {
            DIALOG: ".modal-dialog",
            DATA_TOGGLE: '[data-toggle="modal"]',
            DATA_DISMISS: '[data-dismiss="modal"]',
            FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
            NAVBAR_TOGGLER: ".navbar-toggler"
        }, p = function() {
            function s(t, r) {
                n(this, s), this._config = this._getConfig(r), this._element = t, this._dialog = e(t).find(h.DIALOG)[0], 
                this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, 
                this._originalBodyPadding = 0, this._scrollbarWidth = 0;
            }
            return s.prototype.toggle = function(e) {
                return this._isShown ? this.hide() : this.show(e);
            }, s.prototype.show = function(t) {
                var n = this;
                if (!this._isTransitioning) {
                    o.supportsTransitionEnd() && e(this._element).hasClass(f.FADE) && (this._isTransitioning = !0);
                    var r = e.Event(c.SHOW, {
                        relatedTarget: t
                    });
                    e(this._element).trigger(r), this._isShown || r.isDefaultPrevented() || (this._isShown = !0, 
                    this._checkScrollbar(), this._setScrollbar(), e(document.body).addClass(f.OPEN), 
                    this._setEscapeEvent(), this._setResizeEvent(), e(this._element).on(c.CLICK_DISMISS, h.DATA_DISMISS, function(e) {
                        return n.hide(e);
                    }), e(this._dialog).on(c.MOUSEDOWN_DISMISS, function() {
                        e(n._element).one(c.MOUSEUP_DISMISS, function(t) {
                            e(t.target).is(n._element) && (n._ignoreBackdropClick = !0);
                        });
                    }), this._showBackdrop(function() {
                        return n._showElement(t);
                    }));
                }
            }, s.prototype.hide = function(t) {
                var n = this;
                if (t && t.preventDefault(), !this._isTransitioning && this._isShown) {
                    var r = o.supportsTransitionEnd() && e(this._element).hasClass(f.FADE);
                    r && (this._isTransitioning = !0);
                    var i = e.Event(c.HIDE);
                    e(this._element).trigger(i), this._isShown && !i.isDefaultPrevented() && (this._isShown = !1, 
                    this._setEscapeEvent(), this._setResizeEvent(), e(document).off(c.FOCUSIN), e(this._element).removeClass(f.SHOW), 
                    e(this._element).off(c.CLICK_DISMISS), e(this._dialog).off(c.MOUSEDOWN_DISMISS), 
                    r ? e(this._element).one(o.TRANSITION_END, function(e) {
                        return n._hideModal(e);
                    }).emulateTransitionEnd(300) : this._hideModal());
                }
            }, s.prototype.dispose = function() {
                e.removeData(this._element, "bs.modal"), e(window, document, this._element, this._backdrop).off(a), 
                this._config = null, this._element = null, this._dialog = null, this._backdrop = null, 
                this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, 
                this._scrollbarWidth = null;
            }, s.prototype.handleUpdate = function() {
                this._adjustDialog();
            }, s.prototype._getConfig = function(n) {
                return n = e.extend({}, u, n), o.typeCheckConfig(t, n, l), n;
            }, s.prototype._showElement = function(t) {
                var n = this, r = o.supportsTransitionEnd() && e(this._element).hasClass(f.FADE);
                this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), 
                this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), 
                this._element.scrollTop = 0, r && o.reflow(this._element), e(this._element).addClass(f.SHOW), 
                this._config.focus && this._enforceFocus();
                var i = e.Event(c.SHOWN, {
                    relatedTarget: t
                }), a = function() {
                    n._config.focus && n._element.focus(), n._isTransitioning = !1, e(n._element).trigger(i);
                };
                r ? e(this._dialog).one(o.TRANSITION_END, a).emulateTransitionEnd(300) : a();
            }, s.prototype._enforceFocus = function() {
                var t = this;
                e(document).off(c.FOCUSIN).on(c.FOCUSIN, function(n) {
                    document === n.target || t._element === n.target || e(t._element).has(n.target).length || t._element.focus();
                });
            }, s.prototype._setEscapeEvent = function() {
                var t = this;
                this._isShown && this._config.keyboard ? e(this._element).on(c.KEYDOWN_DISMISS, function(e) {
                    27 === e.which && (e.preventDefault(), t.hide());
                }) : this._isShown || e(this._element).off(c.KEYDOWN_DISMISS);
            }, s.prototype._setResizeEvent = function() {
                var t = this;
                this._isShown ? e(window).on(c.RESIZE, function(e) {
                    return t.handleUpdate(e);
                }) : e(window).off(c.RESIZE);
            }, s.prototype._hideModal = function() {
                var t = this;
                this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), 
                this._isTransitioning = !1, this._showBackdrop(function() {
                    e(document.body).removeClass(f.OPEN), t._resetAdjustments(), t._resetScrollbar(), 
                    e(t._element).trigger(c.HIDDEN);
                });
            }, s.prototype._removeBackdrop = function() {
                this._backdrop && (e(this._backdrop).remove(), this._backdrop = null);
            }, s.prototype._showBackdrop = function(t) {
                var n = this, r = e(this._element).hasClass(f.FADE) ? f.FADE : "";
                if (this._isShown && this._config.backdrop) {
                    var i = o.supportsTransitionEnd() && r;
                    if (this._backdrop = document.createElement("div"), this._backdrop.className = f.BACKDROP, 
                    r && e(this._backdrop).addClass(r), e(this._backdrop).appendTo(document.body), e(this._element).on(c.CLICK_DISMISS, function(e) {
                        if (n._ignoreBackdropClick) return void (n._ignoreBackdropClick = !1);
                        e.target === e.currentTarget && ("static" === n._config.backdrop ? n._element.focus() : n.hide());
                    }), i && o.reflow(this._backdrop), e(this._backdrop).addClass(f.SHOW), !t) return;
                    if (!i) return void t();
                    e(this._backdrop).one(o.TRANSITION_END, t).emulateTransitionEnd(150);
                } else if (!this._isShown && this._backdrop) {
                    e(this._backdrop).removeClass(f.SHOW);
                    var a = function() {
                        n._removeBackdrop(), t && t();
                    };
                    o.supportsTransitionEnd() && e(this._element).hasClass(f.FADE) ? e(this._backdrop).one(o.TRANSITION_END, a).emulateTransitionEnd(150) : a();
                } else t && t();
            }, s.prototype._adjustDialog = function() {
                var e = this._element.scrollHeight > document.documentElement.clientHeight;
                !this._isBodyOverflowing && e && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), 
                this._isBodyOverflowing && !e && (this._element.style.paddingRight = this._scrollbarWidth + "px");
            }, s.prototype._resetAdjustments = function() {
                this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
            }, s.prototype._checkScrollbar = function() {
                this._isBodyOverflowing = document.body.clientWidth < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
            }, s.prototype._setScrollbar = function() {
                var t = this;
                if (this._isBodyOverflowing) {
                    e(h.FIXED_CONTENT).each(function(n, r) {
                        var i = e(r)[0].style.paddingRight, o = e(r).css("padding-right");
                        e(r).data("padding-right", i).css("padding-right", parseFloat(o) + t._scrollbarWidth + "px");
                    }), e(h.NAVBAR_TOGGLER).each(function(n, r) {
                        var i = e(r)[0].style.marginRight, o = e(r).css("margin-right");
                        e(r).data("margin-right", i).css("margin-right", parseFloat(o) + t._scrollbarWidth + "px");
                    });
                    var n = document.body.style.paddingRight, r = e("body").css("padding-right");
                    e("body").data("padding-right", n).css("padding-right", parseFloat(r) + this._scrollbarWidth + "px");
                }
            }, s.prototype._resetScrollbar = function() {
                e(h.FIXED_CONTENT).each(function(t, n) {
                    var r = e(n).data("padding-right");
                    void 0 !== r && e(n).css("padding-right", r).removeData("padding-right");
                }), e(h.NAVBAR_TOGGLER).each(function(t, n) {
                    var r = e(n).data("margin-right");
                    void 0 !== r && e(n).css("margin-right", r).removeData("margin-right");
                });
                var t = e("body").data("padding-right");
                void 0 !== t && e("body").css("padding-right", t).removeData("padding-right");
            }, s.prototype._getScrollbarWidth = function() {
                var e = document.createElement("div");
                e.className = f.SCROLLBAR_MEASURER, document.body.appendChild(e);
                var t = e.getBoundingClientRect().width - e.clientWidth;
                return document.body.removeChild(e), t;
            }, s._jQueryInterface = function(t, n) {
                return this.each(function() {
                    var i = e(this).data("bs.modal"), o = e.extend({}, s.Default, e(this).data(), "object" === (void 0 === t ? "undefined" : r(t)) && t);
                    if (i || (i = new s(this, o), e(this).data("bs.modal", i)), "string" == typeof t) {
                        if (void 0 === i[t]) throw new Error('No method named "' + t + '"');
                        i[t](n);
                    } else o.show && i.show(n);
                });
            }, i(s, null, [ {
                key: "VERSION",
                get: function() {
                    return "4.0.0-beta";
                }
            }, {
                key: "Default",
                get: function() {
                    return u;
                }
            } ]), s;
        }();
        e(document).on(c.CLICK_DATA_API, h.DATA_TOGGLE, function(t) {
            var n = this, r = void 0, i = o.getSelectorFromElement(this);
            i && (r = e(i)[0]);
            var a = e(r).data("bs.modal") ? "toggle" : e.extend({}, e(r).data(), e(this).data());
            "A" !== this.tagName && "AREA" !== this.tagName || t.preventDefault();
            var s = e(r).one(c.SHOW, function(t) {
                t.isDefaultPrevented() || s.one(c.HIDDEN, function() {
                    e(n).is(":visible") && n.focus();
                });
            });
            p._jQueryInterface.call(e(r), a, this);
        }), e.fn[t] = p._jQueryInterface, e.fn[t].Constructor = p, e.fn[t].noConflict = function() {
            return e.fn[t] = s, p._jQueryInterface;
        };
    }(jQuery), function(e) {
        var t = "scrollspy", a = e.fn[t], s = {
            offset: 10,
            method: "auto",
            target: ""
        }, u = {
            offset: "number",
            method: "string",
            target: "(string|element)"
        }, l = {
            ACTIVATE: "activate.bs.scrollspy",
            SCROLL: "scroll.bs.scrollspy",
            LOAD_DATA_API: "load.bs.scrollspy.data-api"
        }, c = {
            DROPDOWN_ITEM: "dropdown-item",
            DROPDOWN_MENU: "dropdown-menu",
            ACTIVE: "active"
        }, f = {
            DATA_SPY: '[data-spy="scroll"]',
            ACTIVE: ".active",
            NAV_LIST_GROUP: ".nav, .list-group",
            NAV_LINKS: ".nav-link",
            LIST_ITEMS: ".list-group-item",
            DROPDOWN: ".dropdown",
            DROPDOWN_ITEMS: ".dropdown-item",
            DROPDOWN_TOGGLE: ".dropdown-toggle"
        }, h = {
            OFFSET: "offset",
            POSITION: "position"
        }, p = function() {
            function a(t, r) {
                var i = this;
                n(this, a), this._element = t, this._scrollElement = "BODY" === t.tagName ? window : t, 
                this._config = this._getConfig(r), this._selector = this._config.target + " " + f.NAV_LINKS + "," + this._config.target + " " + f.LIST_ITEMS + "," + this._config.target + " " + f.DROPDOWN_ITEMS, 
                this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, 
                e(this._scrollElement).on(l.SCROLL, function(e) {
                    return i._process(e);
                }), this.refresh(), this._process();
            }
            return a.prototype.refresh = function() {
                var t = this, n = this._scrollElement !== this._scrollElement.window ? h.POSITION : h.OFFSET, r = "auto" === this._config.method ? n : this._config.method, i = r === h.POSITION ? this._getScrollTop() : 0;
                this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), 
                e.makeArray(e(this._selector)).map(function(t) {
                    var n = void 0, a = o.getSelectorFromElement(t);
                    if (a && (n = e(a)[0]), n) {
                        var s = n.getBoundingClientRect();
                        if (s.width || s.height) return [ e(n)[r]().top + i, a ];
                    }
                    return null;
                }).filter(function(e) {
                    return e;
                }).sort(function(e, t) {
                    return e[0] - t[0];
                }).forEach(function(e) {
                    t._offsets.push(e[0]), t._targets.push(e[1]);
                });
            }, a.prototype.dispose = function() {
                e.removeData(this._element, "bs.scrollspy"), e(this._scrollElement).off(".bs.scrollspy"), 
                this._element = null, this._scrollElement = null, this._config = null, this._selector = null, 
                this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
            }, a.prototype._getConfig = function(n) {
                if (n = e.extend({}, s, n), "string" != typeof n.target) {
                    var r = e(n.target).attr("id");
                    r || (r = o.getUID(t), e(n.target).attr("id", r)), n.target = "#" + r;
                }
                return o.typeCheckConfig(t, n, u), n;
            }, a.prototype._getScrollTop = function() {
                return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
            }, a.prototype._getScrollHeight = function() {
                return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
            }, a.prototype._getOffsetHeight = function() {
                return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
            }, a.prototype._process = function() {
                var e = this._getScrollTop() + this._config.offset, t = this._getScrollHeight(), n = this._config.offset + t - this._getOffsetHeight();
                if (this._scrollHeight !== t && this.refresh(), e >= n) {
                    var r = this._targets[this._targets.length - 1];
                    return void (this._activeTarget !== r && this._activate(r));
                }
                if (this._activeTarget && e < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, 
                void this._clear();
                for (var i = this._offsets.length; i--; ) {
                    this._activeTarget !== this._targets[i] && e >= this._offsets[i] && (void 0 === this._offsets[i + 1] || e < this._offsets[i + 1]) && this._activate(this._targets[i]);
                }
            }, a.prototype._activate = function(t) {
                this._activeTarget = t, this._clear();
                var n = this._selector.split(",");
                n = n.map(function(e) {
                    return e + '[data-target="' + t + '"],' + e + '[href="' + t + '"]';
                });
                var r = e(n.join(","));
                r.hasClass(c.DROPDOWN_ITEM) ? (r.closest(f.DROPDOWN).find(f.DROPDOWN_TOGGLE).addClass(c.ACTIVE), 
                r.addClass(c.ACTIVE)) : (r.addClass(c.ACTIVE), r.parents(f.NAV_LIST_GROUP).prev(f.NAV_LINKS + ", " + f.LIST_ITEMS).addClass(c.ACTIVE)), 
                e(this._scrollElement).trigger(l.ACTIVATE, {
                    relatedTarget: t
                });
            }, a.prototype._clear = function() {
                e(this._selector).filter(f.ACTIVE).removeClass(c.ACTIVE);
            }, a._jQueryInterface = function(t) {
                return this.each(function() {
                    var n = e(this).data("bs.scrollspy"), i = "object" === (void 0 === t ? "undefined" : r(t)) && t;
                    if (n || (n = new a(this, i), e(this).data("bs.scrollspy", n)), "string" == typeof t) {
                        if (void 0 === n[t]) throw new Error('No method named "' + t + '"');
                        n[t]();
                    }
                });
            }, i(a, null, [ {
                key: "VERSION",
                get: function() {
                    return "4.0.0-beta";
                }
            }, {
                key: "Default",
                get: function() {
                    return s;
                }
            } ]), a;
        }();
        e(window).on(l.LOAD_DATA_API, function() {
            for (var t = e.makeArray(e(f.DATA_SPY)), n = t.length; n--; ) {
                var r = e(t[n]);
                p._jQueryInterface.call(r, r.data());
            }
        }), e.fn[t] = p._jQueryInterface, e.fn[t].Constructor = p, e.fn[t].noConflict = function() {
            return e.fn[t] = a, p._jQueryInterface;
        };
    }(jQuery), function(e) {
        var t = e.fn.tab, r = {
            HIDE: "hide.bs.tab",
            HIDDEN: "hidden.bs.tab",
            SHOW: "show.bs.tab",
            SHOWN: "shown.bs.tab",
            CLICK_DATA_API: "click.bs.tab.data-api"
        }, a = {
            DROPDOWN_MENU: "dropdown-menu",
            ACTIVE: "active",
            DISABLED: "disabled",
            FADE: "fade",
            SHOW: "show"
        }, s = {
            DROPDOWN: ".dropdown",
            NAV_LIST_GROUP: ".nav, .list-group",
            ACTIVE: ".active",
            DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
            DROPDOWN_TOGGLE: ".dropdown-toggle",
            DROPDOWN_ACTIVE_CHILD: "> .dropdown-menu .active"
        }, u = function() {
            function t(e) {
                n(this, t), this._element = e;
            }
            return t.prototype.show = function() {
                var t = this;
                if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && e(this._element).hasClass(a.ACTIVE) || e(this._element).hasClass(a.DISABLED))) {
                    var n = void 0, i = void 0, u = e(this._element).closest(s.NAV_LIST_GROUP)[0], l = o.getSelectorFromElement(this._element);
                    u && (i = e.makeArray(e(u).find(s.ACTIVE)), i = i[i.length - 1]);
                    var c = e.Event(r.HIDE, {
                        relatedTarget: this._element
                    }), f = e.Event(r.SHOW, {
                        relatedTarget: i
                    });
                    if (i && e(i).trigger(c), e(this._element).trigger(f), !f.isDefaultPrevented() && !c.isDefaultPrevented()) {
                        l && (n = e(l)[0]), this._activate(this._element, u);
                        var h = function() {
                            var n = e.Event(r.HIDDEN, {
                                relatedTarget: t._element
                            }), o = e.Event(r.SHOWN, {
                                relatedTarget: i
                            });
                            e(i).trigger(n), e(t._element).trigger(o);
                        };
                        n ? this._activate(n, n.parentNode, h) : h();
                    }
                }
            }, t.prototype.dispose = function() {
                e.removeData(this._element, "bs.tab"), this._element = null;
            }, t.prototype._activate = function(t, n, r) {
                var i = this, u = e(n).find(s.ACTIVE)[0], l = r && o.supportsTransitionEnd() && u && e(u).hasClass(a.FADE), c = function() {
                    return i._transitionComplete(t, u, l, r);
                };
                u && l ? e(u).one(o.TRANSITION_END, c).emulateTransitionEnd(150) : c(), u && e(u).removeClass(a.SHOW);
            }, t.prototype._transitionComplete = function(t, n, r, i) {
                if (n) {
                    e(n).removeClass(a.ACTIVE);
                    var u = e(n.parentNode).find(s.DROPDOWN_ACTIVE_CHILD)[0];
                    u && e(u).removeClass(a.ACTIVE), n.setAttribute("aria-expanded", !1);
                }
                if (e(t).addClass(a.ACTIVE), t.setAttribute("aria-expanded", !0), r ? (o.reflow(t), 
                e(t).addClass(a.SHOW)) : e(t).removeClass(a.FADE), t.parentNode && e(t.parentNode).hasClass(a.DROPDOWN_MENU)) {
                    var l = e(t).closest(s.DROPDOWN)[0];
                    l && e(l).find(s.DROPDOWN_TOGGLE).addClass(a.ACTIVE), t.setAttribute("aria-expanded", !0);
                }
                i && i();
            }, t._jQueryInterface = function(n) {
                return this.each(function() {
                    var r = e(this), i = r.data("bs.tab");
                    if (i || (i = new t(this), r.data("bs.tab", i)), "string" == typeof n) {
                        if (void 0 === i[n]) throw new Error('No method named "' + n + '"');
                        i[n]();
                    }
                });
            }, i(t, null, [ {
                key: "VERSION",
                get: function() {
                    return "4.0.0-beta";
                }
            } ]), t;
        }();
        e(document).on(r.CLICK_DATA_API, s.DATA_TOGGLE, function(t) {
            t.preventDefault(), u._jQueryInterface.call(e(this), "show");
        }), e.fn.tab = u._jQueryInterface, e.fn.tab.Constructor = u, e.fn.tab.noConflict = function() {
            return e.fn.tab = t, u._jQueryInterface;
        };
    }(jQuery), function(e) {
        if ("undefined" == typeof Popper) throw new Error("Bootstrap tooltips require Popper.js (https://popper.js.org)");
        var t = "tooltip", a = ".bs.tooltip", s = e.fn[t], u = new RegExp("(^|\\s)bs-tooltip\\S+", "g"), l = {
            animation: "boolean",
            template: "string",
            title: "(string|element|function)",
            trigger: "string",
            delay: "(number|object)",
            html: "boolean",
            selector: "(string|boolean)",
            placement: "(string|function)",
            offset: "(number|string)",
            container: "(string|element|boolean)",
            fallbackPlacement: "(string|array)"
        }, c = {
            AUTO: "auto",
            TOP: "top",
            RIGHT: "right",
            BOTTOM: "bottom",
            LEFT: "left"
        }, f = {
            animation: !0,
            template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
            trigger: "hover focus",
            title: "",
            delay: 0,
            html: !1,
            selector: !1,
            placement: "top",
            offset: 0,
            container: !1,
            fallbackPlacement: "flip"
        }, h = {
            SHOW: "show",
            OUT: "out"
        }, p = {
            HIDE: "hide" + a,
            HIDDEN: "hidden" + a,
            SHOW: "show" + a,
            SHOWN: "shown" + a,
            INSERTED: "inserted" + a,
            CLICK: "click" + a,
            FOCUSIN: "focusin" + a,
            FOCUSOUT: "focusout" + a,
            MOUSEENTER: "mouseenter" + a,
            MOUSELEAVE: "mouseleave" + a
        }, d = {
            FADE: "fade",
            SHOW: "show"
        }, m = {
            TOOLTIP: ".tooltip",
            TOOLTIP_INNER: ".tooltip-inner",
            ARROW: ".arrow"
        }, g = {
            HOVER: "hover",
            FOCUS: "focus",
            CLICK: "click",
            MANUAL: "manual"
        }, v = function() {
            function s(e, t) {
                n(this, s), this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, 
                this._popper = null, this.element = e, this.config = this._getConfig(t), this.tip = null, 
                this._setListeners();
            }
            return s.prototype.enable = function() {
                this._isEnabled = !0;
            }, s.prototype.disable = function() {
                this._isEnabled = !1;
            }, s.prototype.toggleEnabled = function() {
                this._isEnabled = !this._isEnabled;
            }, s.prototype.toggle = function(t) {
                if (t) {
                    var n = this.constructor.DATA_KEY, r = e(t.currentTarget).data(n);
                    r || (r = new this.constructor(t.currentTarget, this._getDelegateConfig()), e(t.currentTarget).data(n, r)), 
                    r._activeTrigger.click = !r._activeTrigger.click, r._isWithActiveTrigger() ? r._enter(null, r) : r._leave(null, r);
                } else {
                    if (e(this.getTipElement()).hasClass(d.SHOW)) return void this._leave(null, this);
                    this._enter(null, this);
                }
            }, s.prototype.dispose = function() {
                clearTimeout(this._timeout), e.removeData(this.element, this.constructor.DATA_KEY), 
                e(this.element).off(this.constructor.EVENT_KEY), e(this.element).closest(".modal").off("hide.bs.modal"), 
                this.tip && e(this.tip).remove(), this._isEnabled = null, this._timeout = null, 
                this._hoverState = null, this._activeTrigger = null, null !== this._popper && this._popper.destroy(), 
                this._popper = null, this.element = null, this.config = null, this.tip = null;
            }, s.prototype.show = function() {
                var t = this;
                if ("none" === e(this.element).css("display")) throw new Error("Please use show on visible elements");
                var n = e.Event(this.constructor.Event.SHOW);
                if (this.isWithContent() && this._isEnabled) {
                    e(this.element).trigger(n);
                    var r = e.contains(this.element.ownerDocument.documentElement, this.element);
                    if (n.isDefaultPrevented() || !r) return;
                    var i = this.getTipElement(), a = o.getUID(this.constructor.NAME);
                    i.setAttribute("id", a), this.element.setAttribute("aria-describedby", a), this.setContent(), 
                    this.config.animation && e(i).addClass(d.FADE);
                    var u = "function" == typeof this.config.placement ? this.config.placement.call(this, i, this.element) : this.config.placement, l = this._getAttachment(u);
                    this.addAttachmentClass(l);
                    var c = !1 === this.config.container ? document.body : e(this.config.container);
                    e(i).data(this.constructor.DATA_KEY, this), e.contains(this.element.ownerDocument.documentElement, this.tip) || e(i).appendTo(c), 
                    e(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new Popper(this.element, i, {
                        placement: l,
                        modifiers: {
                            offset: {
                                offset: this.config.offset
                            },
                            flip: {
                                behavior: this.config.fallbackPlacement
                            },
                            arrow: {
                                element: m.ARROW
                            }
                        },
                        onCreate: function(e) {
                            e.originalPlacement !== e.placement && t._handlePopperPlacementChange(e);
                        },
                        onUpdate: function(e) {
                            t._handlePopperPlacementChange(e);
                        }
                    }), e(i).addClass(d.SHOW), "ontouchstart" in document.documentElement && e("body").children().on("mouseover", null, e.noop);
                    var f = function() {
                        t.config.animation && t._fixTransition();
                        var n = t._hoverState;
                        t._hoverState = null, e(t.element).trigger(t.constructor.Event.SHOWN), n === h.OUT && t._leave(null, t);
                    };
                    o.supportsTransitionEnd() && e(this.tip).hasClass(d.FADE) ? e(this.tip).one(o.TRANSITION_END, f).emulateTransitionEnd(s._TRANSITION_DURATION) : f();
                }
            }, s.prototype.hide = function(t) {
                var n = this, r = this.getTipElement(), i = e.Event(this.constructor.Event.HIDE), a = function() {
                    n._hoverState !== h.SHOW && r.parentNode && r.parentNode.removeChild(r), n._cleanTipClass(), 
                    n.element.removeAttribute("aria-describedby"), e(n.element).trigger(n.constructor.Event.HIDDEN), 
                    null !== n._popper && n._popper.destroy(), t && t();
                };
                e(this.element).trigger(i), i.isDefaultPrevented() || (e(r).removeClass(d.SHOW), 
                "ontouchstart" in document.documentElement && e("body").children().off("mouseover", null, e.noop), 
                this._activeTrigger[g.CLICK] = !1, this._activeTrigger[g.FOCUS] = !1, this._activeTrigger[g.HOVER] = !1, 
                o.supportsTransitionEnd() && e(this.tip).hasClass(d.FADE) ? e(r).one(o.TRANSITION_END, a).emulateTransitionEnd(150) : a(), 
                this._hoverState = "");
            }, s.prototype.update = function() {
                null !== this._popper && this._popper.scheduleUpdate();
            }, s.prototype.isWithContent = function() {
                return Boolean(this.getTitle());
            }, s.prototype.addAttachmentClass = function(t) {
                e(this.getTipElement()).addClass("bs-tooltip-" + t);
            }, s.prototype.getTipElement = function() {
                return this.tip = this.tip || e(this.config.template)[0];
            }, s.prototype.setContent = function() {
                var t = e(this.getTipElement());
                this.setElementContent(t.find(m.TOOLTIP_INNER), this.getTitle()), t.removeClass(d.FADE + " " + d.SHOW);
            }, s.prototype.setElementContent = function(t, n) {
                var i = this.config.html;
                "object" === (void 0 === n ? "undefined" : r(n)) && (n.nodeType || n.jquery) ? i ? e(n).parent().is(t) || t.empty().append(n) : t.text(e(n).text()) : t[i ? "html" : "text"](n);
            }, s.prototype.getTitle = function() {
                var e = this.element.getAttribute("data-original-title");
                return e || (e = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), 
                e;
            }, s.prototype._getAttachment = function(e) {
                return c[e.toUpperCase()];
            }, s.prototype._setListeners = function() {
                var t = this;
                this.config.trigger.split(" ").forEach(function(n) {
                    if ("click" === n) e(t.element).on(t.constructor.Event.CLICK, t.config.selector, function(e) {
                        return t.toggle(e);
                    }); else if (n !== g.MANUAL) {
                        var r = n === g.HOVER ? t.constructor.Event.MOUSEENTER : t.constructor.Event.FOCUSIN, i = n === g.HOVER ? t.constructor.Event.MOUSELEAVE : t.constructor.Event.FOCUSOUT;
                        e(t.element).on(r, t.config.selector, function(e) {
                            return t._enter(e);
                        }).on(i, t.config.selector, function(e) {
                            return t._leave(e);
                        });
                    }
                    e(t.element).closest(".modal").on("hide.bs.modal", function() {
                        return t.hide();
                    });
                }), this.config.selector ? this.config = e.extend({}, this.config, {
                    trigger: "manual",
                    selector: ""
                }) : this._fixTitle();
            }, s.prototype._fixTitle = function() {
                var e = r(this.element.getAttribute("data-original-title"));
                (this.element.getAttribute("title") || "string" !== e) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), 
                this.element.setAttribute("title", ""));
            }, s.prototype._enter = function(t, n) {
                var r = this.constructor.DATA_KEY;
                return n = n || e(t.currentTarget).data(r), n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), 
                e(t.currentTarget).data(r, n)), t && (n._activeTrigger["focusin" === t.type ? g.FOCUS : g.HOVER] = !0), 
                e(n.getTipElement()).hasClass(d.SHOW) || n._hoverState === h.SHOW ? void (n._hoverState = h.SHOW) : (clearTimeout(n._timeout), 
                n._hoverState = h.SHOW, n.config.delay && n.config.delay.show ? void (n._timeout = setTimeout(function() {
                    n._hoverState === h.SHOW && n.show();
                }, n.config.delay.show)) : void n.show());
            }, s.prototype._leave = function(t, n) {
                var r = this.constructor.DATA_KEY;
                if (n = n || e(t.currentTarget).data(r), n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), 
                e(t.currentTarget).data(r, n)), t && (n._activeTrigger["focusout" === t.type ? g.FOCUS : g.HOVER] = !1), 
                !n._isWithActiveTrigger()) {
                    if (clearTimeout(n._timeout), n._hoverState = h.OUT, !n.config.delay || !n.config.delay.hide) return void n.hide();
                    n._timeout = setTimeout(function() {
                        n._hoverState === h.OUT && n.hide();
                    }, n.config.delay.hide);
                }
            }, s.prototype._isWithActiveTrigger = function() {
                for (var e in this._activeTrigger) if (this._activeTrigger[e]) return !0;
                return !1;
            }, s.prototype._getConfig = function(n) {
                return n = e.extend({}, this.constructor.Default, e(this.element).data(), n), n.delay && "number" == typeof n.delay && (n.delay = {
                    show: n.delay,
                    hide: n.delay
                }), n.title && "number" == typeof n.title && (n.title = n.title.toString()), n.content && "number" == typeof n.content && (n.content = n.content.toString()), 
                o.typeCheckConfig(t, n, this.constructor.DefaultType), n;
            }, s.prototype._getDelegateConfig = function() {
                var e = {};
                if (this.config) for (var t in this.config) this.constructor.Default[t] !== this.config[t] && (e[t] = this.config[t]);
                return e;
            }, s.prototype._cleanTipClass = function() {
                var t = e(this.getTipElement()), n = t.attr("class").match(u);
                null !== n && n.length > 0 && t.removeClass(n.join(""));
            }, s.prototype._handlePopperPlacementChange = function(e) {
                this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(e.placement));
            }, s.prototype._fixTransition = function() {
                var t = this.getTipElement(), n = this.config.animation;
                null === t.getAttribute("x-placement") && (e(t).removeClass(d.FADE), this.config.animation = !1, 
                this.hide(), this.show(), this.config.animation = n);
            }, s._jQueryInterface = function(t) {
                return this.each(function() {
                    var n = e(this).data("bs.tooltip"), i = "object" === (void 0 === t ? "undefined" : r(t)) && t;
                    if ((n || !/dispose|hide/.test(t)) && (n || (n = new s(this, i), e(this).data("bs.tooltip", n)), 
                    "string" == typeof t)) {
                        if (void 0 === n[t]) throw new Error('No method named "' + t + '"');
                        n[t]();
                    }
                });
            }, i(s, null, [ {
                key: "VERSION",
                get: function() {
                    return "4.0.0-beta";
                }
            }, {
                key: "Default",
                get: function() {
                    return f;
                }
            }, {
                key: "NAME",
                get: function() {
                    return t;
                }
            }, {
                key: "DATA_KEY",
                get: function() {
                    return "bs.tooltip";
                }
            }, {
                key: "Event",
                get: function() {
                    return p;
                }
            }, {
                key: "EVENT_KEY",
                get: function() {
                    return a;
                }
            }, {
                key: "DefaultType",
                get: function() {
                    return l;
                }
            } ]), s;
        }();
        return e.fn[t] = v._jQueryInterface, e.fn[t].Constructor = v, e.fn[t].noConflict = function() {
            return e.fn[t] = s, v._jQueryInterface;
        }, v;
    }(jQuery));
    !function(o) {
        var s = "popover", u = ".bs.popover", l = o.fn[s], c = new RegExp("(^|\\s)bs-popover\\S+", "g"), f = o.extend({}, a.Default, {
            placement: "right",
            trigger: "click",
            content: "",
            template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
        }), h = o.extend({}, a.DefaultType, {
            content: "(string|element|function)"
        }), p = {
            FADE: "fade",
            SHOW: "show"
        }, d = {
            TITLE: ".popover-header",
            CONTENT: ".popover-body"
        }, m = {
            HIDE: "hide" + u,
            HIDDEN: "hidden" + u,
            SHOW: "show" + u,
            SHOWN: "shown" + u,
            INSERTED: "inserted" + u,
            CLICK: "click" + u,
            FOCUSIN: "focusin" + u,
            FOCUSOUT: "focusout" + u,
            MOUSEENTER: "mouseenter" + u,
            MOUSELEAVE: "mouseleave" + u
        }, g = function(a) {
            function l() {
                return n(this, l), e(this, a.apply(this, arguments));
            }
            return t(l, a), l.prototype.isWithContent = function() {
                return this.getTitle() || this._getContent();
            }, l.prototype.addAttachmentClass = function(e) {
                o(this.getTipElement()).addClass("bs-popover-" + e);
            }, l.prototype.getTipElement = function() {
                return this.tip = this.tip || o(this.config.template)[0];
            }, l.prototype.setContent = function() {
                var e = o(this.getTipElement());
                this.setElementContent(e.find(d.TITLE), this.getTitle()), this.setElementContent(e.find(d.CONTENT), this._getContent()), 
                e.removeClass(p.FADE + " " + p.SHOW);
            }, l.prototype._getContent = function() {
                return this.element.getAttribute("data-content") || ("function" == typeof this.config.content ? this.config.content.call(this.element) : this.config.content);
            }, l.prototype._cleanTipClass = function() {
                var e = o(this.getTipElement()), t = e.attr("class").match(c);
                null !== t && t.length > 0 && e.removeClass(t.join(""));
            }, l._jQueryInterface = function(e) {
                return this.each(function() {
                    var t = o(this).data("bs.popover"), n = "object" === (void 0 === e ? "undefined" : r(e)) ? e : null;
                    if ((t || !/destroy|hide/.test(e)) && (t || (t = new l(this, n), o(this).data("bs.popover", t)), 
                    "string" == typeof e)) {
                        if (void 0 === t[e]) throw new Error('No method named "' + e + '"');
                        t[e]();
                    }
                });
            }, i(l, null, [ {
                key: "VERSION",
                get: function() {
                    return "4.0.0-beta";
                }
            }, {
                key: "Default",
                get: function() {
                    return f;
                }
            }, {
                key: "NAME",
                get: function() {
                    return s;
                }
            }, {
                key: "DATA_KEY",
                get: function() {
                    return "bs.popover";
                }
            }, {
                key: "Event",
                get: function() {
                    return m;
                }
            }, {
                key: "EVENT_KEY",
                get: function() {
                    return u;
                }
            }, {
                key: "DefaultType",
                get: function() {
                    return h;
                }
            } ]), l;
        }(a);
        o.fn[s] = g._jQueryInterface, o.fn[s].Constructor = g, o.fn[s].noConflict = function() {
            return o.fn[s] = l, g._jQueryInterface;
        };
    }(jQuery);
}(), angular.module("ldnFabric", [ "ui.router", "ngResource", "angular-jwt" ]), 
angular.module("ldnFabric").config(Interceptor), Interceptor.inject = [ "$httpProvider" ], 
angular.module("ldnFabric").config(Router), Router.inject = [ "$stateProvider", "$urlRouterProvider", "$locationProvider" ], 
angular.module("ldnFabric").constant("API", "https://dwelldn.herokuapp.com/api"), 
angular.module("ldnFabric").controller("LoginCtrl", LoginCtrl), LoginCtrl.inject = [ "User", "CurrentUserService", "$state" ], 
angular.module("ldnFabric").controller("RegisterCtrl", RegisterCtrl), RegisterCtrl.inject = [ "User", "CurrentUserService", "$state" ], 
angular.module("ldnFabric").controller("BuildingsEditCtrl", BuildingsEditCtrl), 
BuildingsEditCtrl.inject = [ "$stateParams", "Building", "$state" ], angular.module("ldnFabric").controller("BuildingsIndexCtrl", BuildingsIndexCtrl), 
BuildingsIndexCtrl.inject = [ "Building" ], angular.module("ldnFabric").controller("BuildingsNewCtrl", BuildingsNewCtrl), 
BuildingsNewCtrl.inject = [ "Building", "$state", "Period" ], angular.module("ldnFabric").controller("BuildingsShowCtrl", BuildingsShowCtrl), 
BuildingsShowCtrl.inject = [ "$stateParams", "Building", "Material", "Favourite", "CurrentUserService", "$state" ], 
angular.module("ldnFabric").controller("MainCtrl", MainCtrl), MainCtrl.inject = [ "$rootScope", "CurrentUserService", "$state" ], 
angular.module("ldnFabric").controller("periodsIndexCtrl", periodsIndexCtrl), periodsIndexCtrl.inject = [ "Period" ], 
angular.module("ldnFabric").controller("periodsShowCtrl", periodsShowCtrl), periodsShowCtrl.inject = [ "Period", "$stateParams" ], 
angular.module("ldnFabric").controller("UsersShowCtrl", UsersShowCtrl), UsersShowCtrl.inject = [ "User", "$stateParams" ], 
angular.module("ldnFabric").directive("googleMap", googleMap), googleMap.$inject = [ "$window" ], 
angular.module("ldnFabric").directive("streetView", streetView), streetView.inject = [ "$window" ], 
angular.module("ldnFabric").factory("AuthInterceptor", AuthInterceptor), AuthInterceptor.inject = [ "API", "TokenService" ], 
angular.module("ldnFabric").factory("Building", buildingsFactory), buildingsFactory.inject = [ "$resource", "API" ], 
angular.module("ldnFabric").factory("Favourite", FavouritesFactory), FavouritesFactory.inject = [ "$resource", "API" ], 
angular.module("ldnFabric").factory("Material", MaterialFactory), MaterialFactory.inject = [ "$resource", "API" ], 
angular.module("ldnFabric").factory("Period", PeriodsFactory), PeriodsFactory.inject = [ "$resource", "API" ], 
angular.module("ldnFabric").service("User", UserFactory), UserFactory.$inject = [ "API", "$resource" ], 
angular.module("ldnFabric").service("CurrentUserService", CurrentUserService), CurrentUserService.inject = [ "TokenService", "$rootScope", "User" ], 
angular.module("ldnFabric").service("TokenService", TokenService), TokenService.inject = [ "$window", "jwtHelper" ];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
